/**
 * This class is generated by jOOQ
 */
package com.lvl6.mobsters.db.jooq.generated.tables.pojos;


import com.lvl6.mobsters.db.jooq.generated.tables.interfaces.IAchievementForUser;

import java.sql.Timestamp;

import javax.annotation.Generated;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.1"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(name = "achievement_for_user", schema = "mobsters", uniqueConstraints = {
	@UniqueConstraint(columnNames = {"user_id", "achievement_id"})
})
public class AchievementForUserPojo implements IAchievementForUser {

	private static final long serialVersionUID = 950260534;

	private String    userId;
	private Integer   achievementId;
	private Integer   progress;
	private Boolean   isComplete;
	private Timestamp timeCompleted;
	private Boolean   isRedeemed;
	private Timestamp timeRedeemed;

	public AchievementForUserPojo() {}

	public AchievementForUserPojo(AchievementForUserPojo value) {
		this.userId = value.userId;
		this.achievementId = value.achievementId;
		this.progress = value.progress;
		this.isComplete = value.isComplete;
		this.timeCompleted = value.timeCompleted;
		this.isRedeemed = value.isRedeemed;
		this.timeRedeemed = value.timeRedeemed;
	}

	public AchievementForUserPojo(
		String    userId,
		Integer   achievementId,
		Integer   progress,
		Boolean   isComplete,
		Timestamp timeCompleted,
		Boolean   isRedeemed,
		Timestamp timeRedeemed
	) {
		this.userId = userId;
		this.achievementId = achievementId;
		this.progress = progress;
		this.isComplete = isComplete;
		this.timeCompleted = timeCompleted;
		this.isRedeemed = isRedeemed;
		this.timeRedeemed = timeRedeemed;
	}

	@Column(name = "user_id", nullable = false, length = 36)
	@NotNull
	@Size(max = 36)
	@Override
	public String getUserId() {
		return this.userId;
	}

	@Override
	public AchievementForUserPojo setUserId(String userId) {
		this.userId = userId;
		return this;
	}

	@Column(name = "achievement_id", nullable = false, precision = 10)
	@NotNull
	@Override
	public Integer getAchievementId() {
		return this.achievementId;
	}

	@Override
	public AchievementForUserPojo setAchievementId(Integer achievementId) {
		this.achievementId = achievementId;
		return this;
	}

	@Column(name = "progress", precision = 10)
	@Override
	public Integer getProgress() {
		return this.progress;
	}

	@Override
	public AchievementForUserPojo setProgress(Integer progress) {
		this.progress = progress;
		return this;
	}

	@Column(name = "is_complete", precision = 1)
	@Override
	public Boolean getIsComplete() {
		return this.isComplete;
	}

	@Override
	public AchievementForUserPojo setIsComplete(Boolean isComplete) {
		this.isComplete = isComplete;
		return this;
	}

	@Column(name = "time_completed")
	@Override
	public Timestamp getTimeCompleted() {
		return this.timeCompleted;
	}

	@Override
	public AchievementForUserPojo setTimeCompleted(Timestamp timeCompleted) {
		this.timeCompleted = timeCompleted;
		return this;
	}

	@Column(name = "is_redeemed", precision = 1)
	@Override
	public Boolean getIsRedeemed() {
		return this.isRedeemed;
	}

	@Override
	public AchievementForUserPojo setIsRedeemed(Boolean isRedeemed) {
		this.isRedeemed = isRedeemed;
		return this;
	}

	@Column(name = "time_redeemed")
	@Override
	public Timestamp getTimeRedeemed() {
		return this.timeRedeemed;
	}

	@Override
	public AchievementForUserPojo setTimeRedeemed(Timestamp timeRedeemed) {
		this.timeRedeemed = timeRedeemed;
		return this;
	}

	// -------------------------------------------------------------------------
	// FROM and INTO
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void from(IAchievementForUser from) {
		setUserId(from.getUserId());
		setAchievementId(from.getAchievementId());
		setProgress(from.getProgress());
		setIsComplete(from.getIsComplete());
		setTimeCompleted(from.getTimeCompleted());
		setIsRedeemed(from.getIsRedeemed());
		setTimeRedeemed(from.getTimeRedeemed());
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public <E extends IAchievementForUser> E into(E into) {
		into.from(this);
		return into;
	}
}
