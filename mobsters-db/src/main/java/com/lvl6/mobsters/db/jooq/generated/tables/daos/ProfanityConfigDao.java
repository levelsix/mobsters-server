/**
 * This class is generated by jOOQ
 */
package com.lvl6.mobsters.db.jooq.generated.tables.daos;


import com.lvl6.mobsters.db.jooq.generated.tables.ProfanityConfig;
import com.lvl6.mobsters.db.jooq.generated.tables.pojos.ProfanityConfigPojo;
import com.lvl6.mobsters.db.jooq.generated.tables.records.ProfanityConfigRecord;

import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.1"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ProfanityConfigDao extends DAOImpl<ProfanityConfigRecord, ProfanityConfigPojo, String> {

	/**
	 * Create a new ProfanityConfigDao without any configuration
	 */
	public ProfanityConfigDao() {
		super(ProfanityConfig.PROFANITY_CONFIG, ProfanityConfigPojo.class);
	}

	/**
	 * Create a new ProfanityConfigDao with an attached configuration
	 */
	public ProfanityConfigDao(Configuration configuration) {
		super(ProfanityConfig.PROFANITY_CONFIG, ProfanityConfigPojo.class, configuration);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	protected String getId(ProfanityConfigPojo object) {
		return object.getTerm();
	}

	/**
	 * Fetch records that have <code>term IN (values)</code>
	 */
	public List<ProfanityConfigPojo> fetchByTerm(String... values) {
		return fetch(ProfanityConfig.PROFANITY_CONFIG.TERM, values);
	}

	/**
	 * Fetch a unique record that has <code>term = value</code>
	 */
	public ProfanityConfigPojo fetchOneByTerm(String value) {
		return fetchOne(ProfanityConfig.PROFANITY_CONFIG.TERM, value);
	}
}
