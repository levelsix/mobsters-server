/**
 * This class is generated by jOOQ
 */
package com.lvl6.mobsters.db.jooq.generated.tables.daos;


import com.lvl6.mobsters.db.jooq.generated.tables.AchievementConfig;
import com.lvl6.mobsters.db.jooq.generated.tables.pojos.AchievementConfigPojo;
import com.lvl6.mobsters.db.jooq.generated.tables.records.AchievementConfigRecord;

import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.1"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AchievementConfigDao extends DAOImpl<AchievementConfigRecord, AchievementConfigPojo, Integer> {

	/**
	 * Create a new AchievementConfigDao without any configuration
	 */
	public AchievementConfigDao() {
		super(AchievementConfig.ACHIEVEMENT_CONFIG, AchievementConfigPojo.class);
	}

	/**
	 * Create a new AchievementConfigDao with an attached configuration
	 */
	public AchievementConfigDao(Configuration configuration) {
		super(AchievementConfig.ACHIEVEMENT_CONFIG, AchievementConfigPojo.class, configuration);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	protected Integer getId(AchievementConfigPojo object) {
		return object.getId();
	}

	/**
	 * Fetch records that have <code>id IN (values)</code>
	 */
	public List<AchievementConfigPojo> fetchById(Integer... values) {
		return fetch(AchievementConfig.ACHIEVEMENT_CONFIG.ID, values);
	}

	/**
	 * Fetch a unique record that has <code>id = value</code>
	 */
	public AchievementConfigPojo fetchOneById(Integer value) {
		return fetchOne(AchievementConfig.ACHIEVEMENT_CONFIG.ID, value);
	}

	/**
	 * Fetch records that have <code>name IN (values)</code>
	 */
	public List<AchievementConfigPojo> fetchByName(String... values) {
		return fetch(AchievementConfig.ACHIEVEMENT_CONFIG.NAME, values);
	}

	/**
	 * Fetch records that have <code>description IN (values)</code>
	 */
	public List<AchievementConfigPojo> fetchByDescription(String... values) {
		return fetch(AchievementConfig.ACHIEVEMENT_CONFIG.DESCRIPTION, values);
	}

	/**
	 * Fetch records that have <code>gem_reward IN (values)</code>
	 */
	public List<AchievementConfigPojo> fetchByGemReward(Integer... values) {
		return fetch(AchievementConfig.ACHIEVEMENT_CONFIG.GEM_REWARD, values);
	}

	/**
	 * Fetch records that have <code>lvl IN (values)</code>
	 */
	public List<AchievementConfigPojo> fetchByLvl(Byte... values) {
		return fetch(AchievementConfig.ACHIEVEMENT_CONFIG.LVL, values);
	}

	/**
	 * Fetch records that have <code>achievement_type IN (values)</code>
	 */
	public List<AchievementConfigPojo> fetchByAchievementType(String... values) {
		return fetch(AchievementConfig.ACHIEVEMENT_CONFIG.ACHIEVEMENT_TYPE, values);
	}

	/**
	 * Fetch records that have <code>resource_type IN (values)</code>
	 */
	public List<AchievementConfigPojo> fetchByResourceType(String... values) {
		return fetch(AchievementConfig.ACHIEVEMENT_CONFIG.RESOURCE_TYPE, values);
	}

	/**
	 * Fetch records that have <code>monster_element IN (values)</code>
	 */
	public List<AchievementConfigPojo> fetchByMonsterElement(String... values) {
		return fetch(AchievementConfig.ACHIEVEMENT_CONFIG.MONSTER_ELEMENT, values);
	}

	/**
	 * Fetch records that have <code>monster_quality IN (values)</code>
	 */
	public List<AchievementConfigPojo> fetchByMonsterQuality(String... values) {
		return fetch(AchievementConfig.ACHIEVEMENT_CONFIG.MONSTER_QUALITY, values);
	}

	/**
	 * Fetch records that have <code>static_data_id IN (values)</code>
	 */
	public List<AchievementConfigPojo> fetchByStaticDataId(Integer... values) {
		return fetch(AchievementConfig.ACHIEVEMENT_CONFIG.STATIC_DATA_ID, values);
	}

	/**
	 * Fetch records that have <code>quantity IN (values)</code>
	 */
	public List<AchievementConfigPojo> fetchByQuantity(Integer... values) {
		return fetch(AchievementConfig.ACHIEVEMENT_CONFIG.QUANTITY, values);
	}

	/**
	 * Fetch records that have <code>priority IN (values)</code>
	 */
	public List<AchievementConfigPojo> fetchByPriority(Integer... values) {
		return fetch(AchievementConfig.ACHIEVEMENT_CONFIG.PRIORITY, values);
	}

	/**
	 * Fetch records that have <code>prerequisite_id IN (values)</code>
	 */
	public List<AchievementConfigPojo> fetchByPrerequisiteId(Integer... values) {
		return fetch(AchievementConfig.ACHIEVEMENT_CONFIG.PREREQUISITE_ID, values);
	}

	/**
	 * Fetch records that have <code>successor_id IN (values)</code>
	 */
	public List<AchievementConfigPojo> fetchBySuccessorId(Integer... values) {
		return fetch(AchievementConfig.ACHIEVEMENT_CONFIG.SUCCESSOR_ID, values);
	}

	/**
	 * Fetch records that have <code>exp_reward IN (values)</code>
	 */
	public List<AchievementConfigPojo> fetchByExpReward(Integer... values) {
		return fetch(AchievementConfig.ACHIEVEMENT_CONFIG.EXP_REWARD, values);
	}
}
