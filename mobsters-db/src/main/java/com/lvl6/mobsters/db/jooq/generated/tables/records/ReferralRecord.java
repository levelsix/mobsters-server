/**
 * This class is generated by jOOQ
 */
package com.lvl6.mobsters.db.jooq.generated.tables.records;


import com.lvl6.mobsters.db.jooq.generated.tables.Referral;
import com.lvl6.mobsters.db.jooq.generated.tables.interfaces.IReferral;

import java.sql.Timestamp;

import javax.annotation.Generated;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;
import javax.validation.constraints.NotNull;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Record4;
import org.jooq.Row;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.1"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(name = "referral", schema = "mobsters", uniqueConstraints = {
	@UniqueConstraint(columnNames = {"referrer_id", "newly_referred_id"})
})
public class ReferralRecord extends UpdatableRecordImpl<ReferralRecord> implements Record4<Integer, Integer, Timestamp, Integer>, IReferral {

	private static final long serialVersionUID = 2079711361;

	/**
	 * Setter for <code>mobsters.referral.referrer_id</code>.
	 */
	@Override
	public ReferralRecord setReferrerId(Integer value) {
		setValue(0, value);
		return this;
	}

	/**
	 * Getter for <code>mobsters.referral.referrer_id</code>.
	 */
	@Column(name = "referrer_id", nullable = false, precision = 10)
	@NotNull
	@Override
	public Integer getReferrerId() {
		return (Integer) getValue(0);
	}

	/**
	 * Setter for <code>mobsters.referral.newly_referred_id</code>.
	 */
	@Override
	public ReferralRecord setNewlyReferredId(Integer value) {
		setValue(1, value);
		return this;
	}

	/**
	 * Getter for <code>mobsters.referral.newly_referred_id</code>.
	 */
	@Column(name = "newly_referred_id", nullable = false, precision = 10)
	@NotNull
	@Override
	public Integer getNewlyReferredId() {
		return (Integer) getValue(1);
	}

	/**
	 * Setter for <code>mobsters.referral.time_of_referral</code>.
	 */
	@Override
	public ReferralRecord setTimeOfReferral(Timestamp value) {
		setValue(2, value);
		return this;
	}

	/**
	 * Getter for <code>mobsters.referral.time_of_referral</code>.
	 */
	@Column(name = "time_of_referral")
	@Override
	public Timestamp getTimeOfReferral() {
		return (Timestamp) getValue(2);
	}

	/**
	 * Setter for <code>mobsters.referral.coins_given_to_referrer</code>.
	 */
	@Override
	public ReferralRecord setCoinsGivenToReferrer(Integer value) {
		setValue(3, value);
		return this;
	}

	/**
	 * Getter for <code>mobsters.referral.coins_given_to_referrer</code>.
	 */
	@Column(name = "coins_given_to_referrer", precision = 10)
	@Override
	public Integer getCoinsGivenToReferrer() {
		return (Integer) getValue(3);
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Record2<Integer, Integer> key() {
		return (Record2) super.key();
	}

	// -------------------------------------------------------------------------
	// Record4 type implementation
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row4<Integer, Integer, Timestamp, Integer> fieldsRow() {
		return (Row4) super.fieldsRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row4<Integer, Integer, Timestamp, Integer> valuesRow() {
		return (Row4) super.valuesRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field1() {
		return Referral.REFERRAL.REFERRER_ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field2() {
		return Referral.REFERRAL.NEWLY_REFERRED_ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Timestamp> field3() {
		return Referral.REFERRAL.TIME_OF_REFERRAL;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field4() {
		return Referral.REFERRAL.COINS_GIVEN_TO_REFERRER;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value1() {
		return getReferrerId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value2() {
		return getNewlyReferredId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Timestamp value3() {
		return getTimeOfReferral();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value4() {
		return getCoinsGivenToReferrer();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ReferralRecord value1(Integer value) {
		setReferrerId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ReferralRecord value2(Integer value) {
		setNewlyReferredId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ReferralRecord value3(Timestamp value) {
		setTimeOfReferral(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ReferralRecord value4(Integer value) {
		setCoinsGivenToReferrer(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ReferralRecord values(Integer value1, Integer value2, Timestamp value3, Integer value4) {
		value1(value1);
		value2(value2);
		value3(value3);
		value4(value4);
		return this;
	}

	// -------------------------------------------------------------------------
	// FROM and INTO
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void from(IReferral from) {
		setReferrerId(from.getReferrerId());
		setNewlyReferredId(from.getNewlyReferredId());
		setTimeOfReferral(from.getTimeOfReferral());
		setCoinsGivenToReferrer(from.getCoinsGivenToReferrer());
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public <E extends IReferral> E into(E into) {
		into.from(this);
		return into;
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached ReferralRecord
	 */
	public ReferralRecord() {
		super(Referral.REFERRAL);
	}

	/**
	 * Create a detached, initialised ReferralRecord
	 */
	public ReferralRecord(Integer referrerId, Integer newlyReferredId, Timestamp timeOfReferral, Integer coinsGivenToReferrer) {
		super(Referral.REFERRAL);

		setValue(0, referrerId);
		setValue(1, newlyReferredId);
		setValue(2, timeOfReferral);
		setValue(3, coinsGivenToReferrer);
	}
}
