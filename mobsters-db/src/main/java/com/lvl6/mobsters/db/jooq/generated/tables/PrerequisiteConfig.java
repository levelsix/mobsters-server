/**
 * This class is generated by jOOQ
 */
package com.lvl6.mobsters.db.jooq.generated.tables;


import com.lvl6.mobsters.db.jooq.generated.Keys;
import com.lvl6.mobsters.db.jooq.generated.Mobsters;
import com.lvl6.mobsters.db.jooq.generated.tables.records.PrerequisiteConfigRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.1"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PrerequisiteConfig extends TableImpl<PrerequisiteConfigRecord> {

	private static final long serialVersionUID = -1613220600;

	/**
	 * The reference instance of <code>mobsters.prerequisite_config</code>
	 */
	public static final PrerequisiteConfig PREREQUISITE_CONFIG = new PrerequisiteConfig();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<PrerequisiteConfigRecord> getRecordType() {
		return PrerequisiteConfigRecord.class;
	}

	/**
	 * The column <code>mobsters.prerequisite_config.id</code>.
	 */
	public final TableField<PrerequisiteConfigRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>mobsters.prerequisite_config.game_type</code>. the type of the object that has a prerequisite, e.g. structure, research, skill
	 */
	public final TableField<PrerequisiteConfigRecord, String> GAME_TYPE = createField("game_type", org.jooq.impl.SQLDataType.VARCHAR.length(45), this, "the type of the object that has a prerequisite, e.g. structure, research, skill");

	/**
	 * The column <code>mobsters.prerequisite_config.game_entity_id</code>. the id of the object that has a prerequisite, e.g. id of structure in structure table
	 */
	public final TableField<PrerequisiteConfigRecord, Integer> GAME_ENTITY_ID = createField("game_entity_id", org.jooq.impl.SQLDataType.INTEGER, this, "the id of the object that has a prerequisite, e.g. id of structure in structure table");

	/**
	 * The column <code>mobsters.prerequisite_config.prereq_game_type</code>. what the user needs to be have before the object can be built/acquired
	 */
	public final TableField<PrerequisiteConfigRecord, String> PREREQ_GAME_TYPE = createField("prereq_game_type", org.jooq.impl.SQLDataType.VARCHAR.length(45), this, "what the user needs to be have before the object can be built/acquired");

	/**
	 * The column <code>mobsters.prerequisite_config.prereq_game_entity_id</code>.
	 */
	public final TableField<PrerequisiteConfigRecord, Integer> PREREQ_GAME_ENTITY_ID = createField("prereq_game_entity_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>mobsters.prerequisite_config.quantity</code>.
	 */
	public final TableField<PrerequisiteConfigRecord, Integer> QUANTITY = createField("quantity", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * Create a <code>mobsters.prerequisite_config</code> table reference
	 */
	public PrerequisiteConfig() {
		this("prerequisite_config", null);
	}

	/**
	 * Create an aliased <code>mobsters.prerequisite_config</code> table reference
	 */
	public PrerequisiteConfig(String alias) {
		this(alias, PREREQUISITE_CONFIG);
	}

	private PrerequisiteConfig(String alias, Table<PrerequisiteConfigRecord> aliased) {
		this(alias, aliased, null);
	}

	private PrerequisiteConfig(String alias, Table<PrerequisiteConfigRecord> aliased, Field<?>[] parameters) {
		super(alias, Mobsters.MOBSTERS, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<PrerequisiteConfigRecord, Integer> getIdentity() {
		return Keys.IDENTITY_PREREQUISITE_CONFIG;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<PrerequisiteConfigRecord> getPrimaryKey() {
		return Keys.KEY_PREREQUISITE_CONFIG_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<PrerequisiteConfigRecord>> getKeys() {
		return Arrays.<UniqueKey<PrerequisiteConfigRecord>>asList(Keys.KEY_PREREQUISITE_CONFIG_PRIMARY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public PrerequisiteConfig as(String alias) {
		return new PrerequisiteConfig(alias, this);
	}

	/**
	 * Rename this table
	 */
	public PrerequisiteConfig rename(String name) {
		return new PrerequisiteConfig(name, null);
	}
}
