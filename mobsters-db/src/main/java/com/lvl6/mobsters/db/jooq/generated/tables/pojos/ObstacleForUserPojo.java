/**
 * This class is generated by jOOQ
 */
package com.lvl6.mobsters.db.jooq.generated.tables.pojos;


import com.lvl6.mobsters.db.jooq.generated.tables.interfaces.IObstacleForUser;

import java.sql.Timestamp;

import javax.annotation.Generated;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.1"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(name = "obstacle_for_user", schema = "mobsters")
public class ObstacleForUserPojo implements IObstacleForUser {

	private static final long serialVersionUID = -1665260904;

	private String    id;
	private String    userId;
	private Integer   obstacleId;
	private Integer   xcoord;
	private Integer   ycoord;
	private Timestamp removalTime;
	private String    orientation;

	public ObstacleForUserPojo() {}

	public ObstacleForUserPojo(ObstacleForUserPojo value) {
		this.id = value.id;
		this.userId = value.userId;
		this.obstacleId = value.obstacleId;
		this.xcoord = value.xcoord;
		this.ycoord = value.ycoord;
		this.removalTime = value.removalTime;
		this.orientation = value.orientation;
	}

	public ObstacleForUserPojo(
		String    id,
		String    userId,
		Integer   obstacleId,
		Integer   xcoord,
		Integer   ycoord,
		Timestamp removalTime,
		String    orientation
	) {
		this.id = id;
		this.userId = userId;
		this.obstacleId = obstacleId;
		this.xcoord = xcoord;
		this.ycoord = ycoord;
		this.removalTime = removalTime;
		this.orientation = orientation;
	}

	@Id
	@Column(name = "id", unique = true, nullable = false, length = 36)
	@NotNull
	@Size(max = 36)
	@Override
	public String getId() {
		return this.id;
	}

	@Override
	public ObstacleForUserPojo setId(String id) {
		this.id = id;
		return this;
	}

	@Column(name = "user_id", length = 36)
	@Size(max = 36)
	@Override
	public String getUserId() {
		return this.userId;
	}

	@Override
	public ObstacleForUserPojo setUserId(String userId) {
		this.userId = userId;
		return this;
	}

	@Column(name = "obstacle_id", precision = 10)
	@Override
	public Integer getObstacleId() {
		return this.obstacleId;
	}

	@Override
	public ObstacleForUserPojo setObstacleId(Integer obstacleId) {
		this.obstacleId = obstacleId;
		return this;
	}

	@Column(name = "xcoord", precision = 10)
	@Override
	public Integer getXcoord() {
		return this.xcoord;
	}

	@Override
	public ObstacleForUserPojo setXcoord(Integer xcoord) {
		this.xcoord = xcoord;
		return this;
	}

	@Column(name = "ycoord", precision = 10)
	@Override
	public Integer getYcoord() {
		return this.ycoord;
	}

	@Override
	public ObstacleForUserPojo setYcoord(Integer ycoord) {
		this.ycoord = ycoord;
		return this;
	}

	@Column(name = "removal_time")
	@Override
	public Timestamp getRemovalTime() {
		return this.removalTime;
	}

	@Override
	public ObstacleForUserPojo setRemovalTime(Timestamp removalTime) {
		this.removalTime = removalTime;
		return this;
	}

	@Column(name = "orientation", length = 45)
	@Size(max = 45)
	@Override
	public String getOrientation() {
		return this.orientation;
	}

	@Override
	public ObstacleForUserPojo setOrientation(String orientation) {
		this.orientation = orientation;
		return this;
	}

	// -------------------------------------------------------------------------
	// FROM and INTO
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void from(IObstacleForUser from) {
		setId(from.getId());
		setUserId(from.getUserId());
		setObstacleId(from.getObstacleId());
		setXcoord(from.getXcoord());
		setYcoord(from.getYcoord());
		setRemovalTime(from.getRemovalTime());
		setOrientation(from.getOrientation());
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public <E extends IObstacleForUser> E into(E into) {
		into.from(this);
		return into;
	}


	public String toString() {
		com.lvl6.mobsters.db.jooq.generated.tables.records.ObstacleForUserRecord poop = new com.lvl6.mobsters.db.jooq.generated.tables.records.ObstacleForUserRecord();
		poop.from(this);
		return "ObstacleForUserPojo[" + poop.valuesRow() + "]";
	}
}
