/**
 * This class is generated by jOOQ
 */
package com.lvl6.mobsters.db.jooq.generated.tables.pojos;


import com.lvl6.mobsters.db.jooq.generated.tables.interfaces.IResearchForUser;

import java.sql.Timestamp;

import javax.annotation.Generated;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.1"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(name = "research_for_user", schema = "mobsters", uniqueConstraints = {
	@UniqueConstraint(columnNames = {"id", "user_id"})
})
public class ResearchForUserPojo implements IResearchForUser {

	private static final long serialVersionUID = 373975703;

	private String    id;
	private String    userId;
	private Integer   researchId;
	private Timestamp timePurchased;
	private Boolean   isComplete;

	public ResearchForUserPojo() {}

	public ResearchForUserPojo(ResearchForUserPojo value) {
		this.id = value.id;
		this.userId = value.userId;
		this.researchId = value.researchId;
		this.timePurchased = value.timePurchased;
		this.isComplete = value.isComplete;
	}

	public ResearchForUserPojo(
		String    id,
		String    userId,
		Integer   researchId,
		Timestamp timePurchased,
		Boolean   isComplete
	) {
		this.id = id;
		this.userId = userId;
		this.researchId = researchId;
		this.timePurchased = timePurchased;
		this.isComplete = isComplete;
	}

	@Column(name = "id", nullable = false, length = 36)
	@NotNull
	@Size(max = 36)
	@Override
	public String getId() {
		return this.id;
	}

	@Override
	public ResearchForUserPojo setId(String id) {
		this.id = id;
		return this;
	}

	@Column(name = "user_id", nullable = false, length = 36)
	@NotNull
	@Size(max = 36)
	@Override
	public String getUserId() {
		return this.userId;
	}

	@Override
	public ResearchForUserPojo setUserId(String userId) {
		this.userId = userId;
		return this;
	}

	@Column(name = "research_id", precision = 10)
	@Override
	public Integer getResearchId() {
		return this.researchId;
	}

	@Override
	public ResearchForUserPojo setResearchId(Integer researchId) {
		this.researchId = researchId;
		return this;
	}

	@Column(name = "time_purchased")
	@Override
	public Timestamp getTimePurchased() {
		return this.timePurchased;
	}

	@Override
	public ResearchForUserPojo setTimePurchased(Timestamp timePurchased) {
		this.timePurchased = timePurchased;
		return this;
	}

	@Column(name = "is_complete", precision = 1)
	@Override
	public Boolean getIsComplete() {
		return this.isComplete;
	}

	@Override
	public ResearchForUserPojo setIsComplete(Boolean isComplete) {
		this.isComplete = isComplete;
		return this;
	}

	// -------------------------------------------------------------------------
	// FROM and INTO
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void from(IResearchForUser from) {
		setId(from.getId());
		setUserId(from.getUserId());
		setResearchId(from.getResearchId());
		setTimePurchased(from.getTimePurchased());
		setIsComplete(from.getIsComplete());
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public <E extends IResearchForUser> E into(E into) {
		into.from(this);
		return into;
	}


	public String toString() {
		com.lvl6.mobsters.db.jooq.generated.tables.records.ResearchForUserRecord poop = new com.lvl6.mobsters.db.jooq.generated.tables.records.ResearchForUserRecord();
		poop.from(this);
		return "ResearchForUserPojo[" + poop.valuesRow() + "]";
	}
}
