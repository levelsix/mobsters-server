/**
 * This class is generated by jOOQ
 */
package com.lvl6.mobsters.db.jooq.generated.tables;


import com.lvl6.mobsters.db.jooq.generated.Keys;
import com.lvl6.mobsters.db.jooq.generated.Mobsters;
import com.lvl6.mobsters.db.jooq.generated.tables.records.MiniEventForUserRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.1"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MiniEventForUser extends TableImpl<MiniEventForUserRecord> {

	private static final long serialVersionUID = 1428148272;

	/**
	 * The reference instance of <code>mobsters.mini_event_for_user</code>
	 */
	public static final MiniEventForUser MINI_EVENT_FOR_USER = new MiniEventForUser();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<MiniEventForUserRecord> getRecordType() {
		return MiniEventForUserRecord.class;
	}

	/**
	 * The column <code>mobsters.mini_event_for_user.user_id</code>.
	 */
	public final TableField<MiniEventForUserRecord, String> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.CHAR.length(36).nullable(false), this, "");

	/**
	 * The column <code>mobsters.mini_event_for_user.mini_event_timetable_id</code>.
	 */
	public final TableField<MiniEventForUserRecord, Integer> MINI_EVENT_TIMETABLE_ID = createField("mini_event_timetable_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>mobsters.mini_event_for_user.mini_event_id</code>.
	 */
	public final TableField<MiniEventForUserRecord, Integer> MINI_EVENT_ID = createField("mini_event_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>mobsters.mini_event_for_user.time_of_entry</code>.
	 */
	public final TableField<MiniEventForUserRecord, Timestamp> TIME_OF_ENTRY = createField("time_of_entry", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>mobsters.mini_event_for_user.user_lvl</code>. level of the user when he started mini_event
	 */
	public final TableField<MiniEventForUserRecord, Integer> USER_LVL = createField("user_lvl", org.jooq.impl.SQLDataType.INTEGER, this, "level of the user when he started mini_event");

	/**
	 * The column <code>mobsters.mini_event_for_user.tier_one_redeemed</code>.
	 */
	public final TableField<MiniEventForUserRecord, Boolean> TIER_ONE_REDEEMED = createField("tier_one_redeemed", org.jooq.impl.SQLDataType.BIT.defaulted(true), this, "");

	/**
	 * The column <code>mobsters.mini_event_for_user.tier_two_redeemed</code>.
	 */
	public final TableField<MiniEventForUserRecord, Boolean> TIER_TWO_REDEEMED = createField("tier_two_redeemed", org.jooq.impl.SQLDataType.BIT.defaulted(true), this, "");

	/**
	 * The column <code>mobsters.mini_event_for_user.tier_three_redeemed</code>.
	 */
	public final TableField<MiniEventForUserRecord, Boolean> TIER_THREE_REDEEMED = createField("tier_three_redeemed", org.jooq.impl.SQLDataType.BIT.defaulted(true), this, "");

	/**
	 * The column <code>mobsters.mini_event_for_user.tier_one_redeemed_time</code>.
	 */
	public final TableField<MiniEventForUserRecord, Timestamp> TIER_ONE_REDEEMED_TIME = createField("tier_one_redeemed_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

	/**
	 * The column <code>mobsters.mini_event_for_user.tier_two_redeemed_time</code>.
	 */
	public final TableField<MiniEventForUserRecord, Timestamp> TIER_TWO_REDEEMED_TIME = createField("tier_two_redeemed_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

	/**
	 * The column <code>mobsters.mini_event_for_user.tier_three_redeemed_time</code>.
	 */
	public final TableField<MiniEventForUserRecord, Timestamp> TIER_THREE_REDEEMED_TIME = createField("tier_three_redeemed_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

	/**
	 * Create a <code>mobsters.mini_event_for_user</code> table reference
	 */
	public MiniEventForUser() {
		this("mini_event_for_user", null);
	}

	/**
	 * Create an aliased <code>mobsters.mini_event_for_user</code> table reference
	 */
	public MiniEventForUser(String alias) {
		this(alias, MINI_EVENT_FOR_USER);
	}

	private MiniEventForUser(String alias, Table<MiniEventForUserRecord> aliased) {
		this(alias, aliased, null);
	}

	private MiniEventForUser(String alias, Table<MiniEventForUserRecord> aliased, Field<?>[] parameters) {
		super(alias, Mobsters.MOBSTERS, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<MiniEventForUserRecord> getPrimaryKey() {
		return Keys.KEY_MINI_EVENT_FOR_USER_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<MiniEventForUserRecord>> getKeys() {
		return Arrays.<UniqueKey<MiniEventForUserRecord>>asList(Keys.KEY_MINI_EVENT_FOR_USER_PRIMARY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public MiniEventForUser as(String alias) {
		return new MiniEventForUser(alias, this);
	}

	/**
	 * Rename this table
	 */
	public MiniEventForUser rename(String name) {
		return new MiniEventForUser(name, null);
	}
}
