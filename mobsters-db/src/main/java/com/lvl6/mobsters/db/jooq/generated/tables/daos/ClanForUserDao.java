/**
 * This class is generated by jOOQ
 */
package com.lvl6.mobsters.db.jooq.generated.tables.daos;


import com.lvl6.mobsters.db.jooq.generated.tables.ClanForUser;
import com.lvl6.mobsters.db.jooq.generated.tables.pojos.ClanForUserPojo;
import com.lvl6.mobsters.db.jooq.generated.tables.records.ClanForUserRecord;

import java.sql.Timestamp;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.Record2;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.1"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ClanForUserDao extends DAOImpl<ClanForUserRecord, ClanForUserPojo, Record2<String, String>> {

	/**
	 * Create a new ClanForUserDao without any configuration
	 */
	public ClanForUserDao() {
		super(ClanForUser.CLAN_FOR_USER, ClanForUserPojo.class);
	}

	/**
	 * Create a new ClanForUserDao with an attached configuration
	 */
	public ClanForUserDao(Configuration configuration) {
		super(ClanForUser.CLAN_FOR_USER, ClanForUserPojo.class, configuration);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	protected Record2<String, String> getId(ClanForUserPojo object) {
		return compositeKeyRecord(object.getUserId(), object.getClanId());
	}

	/**
	 * Fetch records that have <code>user_id IN (values)</code>
	 */
	public List<ClanForUserPojo> fetchByUserId(String... values) {
		return fetch(ClanForUser.CLAN_FOR_USER.USER_ID, values);
	}

	/**
	 * Fetch records that have <code>clan_id IN (values)</code>
	 */
	public List<ClanForUserPojo> fetchByClanId(String... values) {
		return fetch(ClanForUser.CLAN_FOR_USER.CLAN_ID, values);
	}

	/**
	 * Fetch records that have <code>status IN (values)</code>
	 */
	public List<ClanForUserPojo> fetchByStatus(String... values) {
		return fetch(ClanForUser.CLAN_FOR_USER.STATUS, values);
	}

	/**
	 * Fetch records that have <code>request_time IN (values)</code>
	 */
	public List<ClanForUserPojo> fetchByRequestTime(Timestamp... values) {
		return fetch(ClanForUser.CLAN_FOR_USER.REQUEST_TIME, values);
	}
}
