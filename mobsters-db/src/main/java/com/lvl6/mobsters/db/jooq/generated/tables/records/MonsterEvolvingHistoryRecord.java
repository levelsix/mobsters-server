/**
 * This class is generated by jOOQ
 */
package com.lvl6.mobsters.db.jooq.generated.tables.records;


import com.lvl6.mobsters.db.jooq.generated.tables.MonsterEvolvingHistory;
import com.lvl6.mobsters.db.jooq.generated.tables.interfaces.IMonsterEvolvingHistory;

import java.sql.Timestamp;

import javax.annotation.Generated;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record8;
import org.jooq.Row;
import org.jooq.Row8;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.1"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(name = "monster_evolving_history", schema = "mobsters")
public class MonsterEvolvingHistoryRecord extends UpdatableRecordImpl<MonsterEvolvingHistoryRecord> implements Record8<String, String, String, String, String, Timestamp, Timestamp, Timestamp>, IMonsterEvolvingHistory {

	private static final long serialVersionUID = 1396271938;

	/**
	 * Setter for <code>mobsters.monster_evolving_history.id</code>.
	 */
	@Override
	public MonsterEvolvingHistoryRecord setId(String value) {
		setValue(0, value);
		return this;
	}

	/**
	 * Getter for <code>mobsters.monster_evolving_history.id</code>.
	 */
	@Id
	@Column(name = "id", unique = true, nullable = false, length = 36)
	@NotNull
	@Size(max = 36)
	@Override
	public String getId() {
		return (String) getValue(0);
	}

	/**
	 * Setter for <code>mobsters.monster_evolving_history.user_id</code>.
	 */
	@Override
	public MonsterEvolvingHistoryRecord setUserId(String value) {
		setValue(1, value);
		return this;
	}

	/**
	 * Getter for <code>mobsters.monster_evolving_history.user_id</code>.
	 */
	@Column(name = "user_id", nullable = false, length = 36)
	@NotNull
	@Size(max = 36)
	@Override
	public String getUserId() {
		return (String) getValue(1);
	}

	/**
	 * Setter for <code>mobsters.monster_evolving_history.user_monster_id_one</code>.
	 */
	@Override
	public MonsterEvolvingHistoryRecord setUserMonsterIdOne(String value) {
		setValue(2, value);
		return this;
	}

	/**
	 * Getter for <code>mobsters.monster_evolving_history.user_monster_id_one</code>.
	 */
	@Column(name = "user_monster_id_one", nullable = false, length = 36)
	@NotNull
	@Size(max = 36)
	@Override
	public String getUserMonsterIdOne() {
		return (String) getValue(2);
	}

	/**
	 * Setter for <code>mobsters.monster_evolving_history.user_monster_id_two</code>.
	 */
	@Override
	public MonsterEvolvingHistoryRecord setUserMonsterIdTwo(String value) {
		setValue(3, value);
		return this;
	}

	/**
	 * Getter for <code>mobsters.monster_evolving_history.user_monster_id_two</code>.
	 */
	@Column(name = "user_monster_id_two", nullable = false, length = 36)
	@NotNull
	@Size(max = 36)
	@Override
	public String getUserMonsterIdTwo() {
		return (String) getValue(3);
	}

	/**
	 * Setter for <code>mobsters.monster_evolving_history.catalyst_user_monster_id</code>.
	 */
	@Override
	public MonsterEvolvingHistoryRecord setCatalystUserMonsterId(String value) {
		setValue(4, value);
		return this;
	}

	/**
	 * Getter for <code>mobsters.monster_evolving_history.catalyst_user_monster_id</code>.
	 */
	@Column(name = "catalyst_user_monster_id", nullable = false, length = 36)
	@NotNull
	@Size(max = 36)
	@Override
	public String getCatalystUserMonsterId() {
		return (String) getValue(4);
	}

	/**
	 * Setter for <code>mobsters.monster_evolving_history.start_time</code>.
	 */
	@Override
	public MonsterEvolvingHistoryRecord setStartTime(Timestamp value) {
		setValue(5, value);
		return this;
	}

	/**
	 * Getter for <code>mobsters.monster_evolving_history.start_time</code>.
	 */
	@Column(name = "start_time")
	@Override
	public Timestamp getStartTime() {
		return (Timestamp) getValue(5);
	}

	/**
	 * Setter for <code>mobsters.monster_evolving_history.time_of_entry</code>.
	 */
	@Override
	public MonsterEvolvingHistoryRecord setTimeOfEntry(Timestamp value) {
		setValue(6, value);
		return this;
	}

	/**
	 * Getter for <code>mobsters.monster_evolving_history.time_of_entry</code>.
	 */
	@Column(name = "time_of_entry")
	@Override
	public Timestamp getTimeOfEntry() {
		return (Timestamp) getValue(6);
	}

	/**
	 * Setter for <code>mobsters.monster_evolving_history.end_time</code>.
	 */
	@Override
	public MonsterEvolvingHistoryRecord setEndTime(Timestamp value) {
		setValue(7, value);
		return this;
	}

	/**
	 * Getter for <code>mobsters.monster_evolving_history.end_time</code>.
	 */
	@Column(name = "end_time")
	@Override
	public Timestamp getEndTime() {
		return (Timestamp) getValue(7);
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Record1<String> key() {
		return (Record1) super.key();
	}

	// -------------------------------------------------------------------------
	// Record8 type implementation
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row8<String, String, String, String, String, Timestamp, Timestamp, Timestamp> fieldsRow() {
		return (Row8) super.fieldsRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row8<String, String, String, String, String, Timestamp, Timestamp, Timestamp> valuesRow() {
		return (Row8) super.valuesRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field1() {
		return MonsterEvolvingHistory.MONSTER_EVOLVING_HISTORY.ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field2() {
		return MonsterEvolvingHistory.MONSTER_EVOLVING_HISTORY.USER_ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field3() {
		return MonsterEvolvingHistory.MONSTER_EVOLVING_HISTORY.USER_MONSTER_ID_ONE;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field4() {
		return MonsterEvolvingHistory.MONSTER_EVOLVING_HISTORY.USER_MONSTER_ID_TWO;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field5() {
		return MonsterEvolvingHistory.MONSTER_EVOLVING_HISTORY.CATALYST_USER_MONSTER_ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Timestamp> field6() {
		return MonsterEvolvingHistory.MONSTER_EVOLVING_HISTORY.START_TIME;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Timestamp> field7() {
		return MonsterEvolvingHistory.MONSTER_EVOLVING_HISTORY.TIME_OF_ENTRY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Timestamp> field8() {
		return MonsterEvolvingHistory.MONSTER_EVOLVING_HISTORY.END_TIME;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value1() {
		return getId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value2() {
		return getUserId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value3() {
		return getUserMonsterIdOne();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value4() {
		return getUserMonsterIdTwo();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value5() {
		return getCatalystUserMonsterId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Timestamp value6() {
		return getStartTime();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Timestamp value7() {
		return getTimeOfEntry();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Timestamp value8() {
		return getEndTime();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public MonsterEvolvingHistoryRecord value1(String value) {
		setId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public MonsterEvolvingHistoryRecord value2(String value) {
		setUserId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public MonsterEvolvingHistoryRecord value3(String value) {
		setUserMonsterIdOne(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public MonsterEvolvingHistoryRecord value4(String value) {
		setUserMonsterIdTwo(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public MonsterEvolvingHistoryRecord value5(String value) {
		setCatalystUserMonsterId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public MonsterEvolvingHistoryRecord value6(Timestamp value) {
		setStartTime(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public MonsterEvolvingHistoryRecord value7(Timestamp value) {
		setTimeOfEntry(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public MonsterEvolvingHistoryRecord value8(Timestamp value) {
		setEndTime(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public MonsterEvolvingHistoryRecord values(String value1, String value2, String value3, String value4, String value5, Timestamp value6, Timestamp value7, Timestamp value8) {
		value1(value1);
		value2(value2);
		value3(value3);
		value4(value4);
		value5(value5);
		value6(value6);
		value7(value7);
		value8(value8);
		return this;
	}

	// -------------------------------------------------------------------------
	// FROM and INTO
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void from(IMonsterEvolvingHistory from) {
		setId(from.getId());
		setUserId(from.getUserId());
		setUserMonsterIdOne(from.getUserMonsterIdOne());
		setUserMonsterIdTwo(from.getUserMonsterIdTwo());
		setCatalystUserMonsterId(from.getCatalystUserMonsterId());
		setStartTime(from.getStartTime());
		setTimeOfEntry(from.getTimeOfEntry());
		setEndTime(from.getEndTime());
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public <E extends IMonsterEvolvingHistory> E into(E into) {
		into.from(this);
		return into;
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached MonsterEvolvingHistoryRecord
	 */
	public MonsterEvolvingHistoryRecord() {
		super(MonsterEvolvingHistory.MONSTER_EVOLVING_HISTORY);
	}

	/**
	 * Create a detached, initialised MonsterEvolvingHistoryRecord
	 */
	public MonsterEvolvingHistoryRecord(String id, String userId, String userMonsterIdOne, String userMonsterIdTwo, String catalystUserMonsterId, Timestamp startTime, Timestamp timeOfEntry, Timestamp endTime) {
		super(MonsterEvolvingHistory.MONSTER_EVOLVING_HISTORY);

		setValue(0, id);
		setValue(1, userId);
		setValue(2, userMonsterIdOne);
		setValue(3, userMonsterIdTwo);
		setValue(4, catalystUserMonsterId);
		setValue(5, startTime);
		setValue(6, timeOfEntry);
		setValue(7, endTime);
	}
}
