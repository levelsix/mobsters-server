/**
 * This class is generated by jOOQ
 */
package com.lvl6.mobsters.db.jooq.generated.tables.records;


import com.lvl6.mobsters.db.jooq.generated.tables.BattleReplayForUser;
import com.lvl6.mobsters.db.jooq.generated.tables.interfaces.IBattleReplayForUser;

import java.sql.Timestamp;

import javax.annotation.Generated;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.1"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(name = "battle_replay_for_user", schema = "mobsters")
public class BattleReplayForUserRecord extends UpdatableRecordImpl<BattleReplayForUserRecord> implements Record4<String, String, byte[], Timestamp>, IBattleReplayForUser {

	private static final long serialVersionUID = 635539289;

	/**
	 * Setter for <code>mobsters.battle_replay_for_user.id</code>.
	 */
	@Override
	public BattleReplayForUserRecord setId(String value) {
		setValue(0, value);
		return this;
	}

	/**
	 * Getter for <code>mobsters.battle_replay_for_user.id</code>.
	 */
	@Id
	@Column(name = "id", unique = true, nullable = false, length = 36)
	@NotNull
	@Size(max = 36)
	@Override
	public String getId() {
		return (String) getValue(0);
	}

	/**
	 * Setter for <code>mobsters.battle_replay_for_user.creator_id</code>.
	 */
	@Override
	public BattleReplayForUserRecord setCreatorId(String value) {
		setValue(1, value);
		return this;
	}

	/**
	 * Getter for <code>mobsters.battle_replay_for_user.creator_id</code>.
	 */
	@Column(name = "creator_id", length = 36)
	@Size(max = 36)
	@Override
	public String getCreatorId() {
		return (String) getValue(1);
	}

	/**
	 * Setter for <code>mobsters.battle_replay_for_user.replay</code>.
	 */
	@Override
	public BattleReplayForUserRecord setReplay(byte[] value) {
		setValue(2, value);
		return this;
	}

	/**
	 * Getter for <code>mobsters.battle_replay_for_user.replay</code>.
	 */
	@Column(name = "replay", length = 16777215)
	@Override
	public byte[] getReplay() {
		return (byte[]) getValue(2);
	}

	/**
	 * Setter for <code>mobsters.battle_replay_for_user.create_time</code>.
	 */
	@Override
	public BattleReplayForUserRecord setCreateTime(Timestamp value) {
		setValue(3, value);
		return this;
	}

	/**
	 * Getter for <code>mobsters.battle_replay_for_user.create_time</code>.
	 */
	@Column(name = "create_time")
	@Override
	public Timestamp getCreateTime() {
		return (Timestamp) getValue(3);
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Record1<String> key() {
		return (Record1) super.key();
	}

	// -------------------------------------------------------------------------
	// Record4 type implementation
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row4<String, String, byte[], Timestamp> fieldsRow() {
		return (Row4) super.fieldsRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row4<String, String, byte[], Timestamp> valuesRow() {
		return (Row4) super.valuesRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field1() {
		return BattleReplayForUser.BATTLE_REPLAY_FOR_USER.ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field2() {
		return BattleReplayForUser.BATTLE_REPLAY_FOR_USER.CREATOR_ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<byte[]> field3() {
		return BattleReplayForUser.BATTLE_REPLAY_FOR_USER.REPLAY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Timestamp> field4() {
		return BattleReplayForUser.BATTLE_REPLAY_FOR_USER.CREATE_TIME;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value1() {
		return getId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value2() {
		return getCreatorId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public byte[] value3() {
		return getReplay();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Timestamp value4() {
		return getCreateTime();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public BattleReplayForUserRecord value1(String value) {
		setId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public BattleReplayForUserRecord value2(String value) {
		setCreatorId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public BattleReplayForUserRecord value3(byte[] value) {
		setReplay(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public BattleReplayForUserRecord value4(Timestamp value) {
		setCreateTime(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public BattleReplayForUserRecord values(String value1, String value2, byte[] value3, Timestamp value4) {
		value1(value1);
		value2(value2);
		value3(value3);
		value4(value4);
		return this;
	}

	// -------------------------------------------------------------------------
	// FROM and INTO
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void from(IBattleReplayForUser from) {
		setId(from.getId());
		setCreatorId(from.getCreatorId());
		setReplay(from.getReplay());
		setCreateTime(from.getCreateTime());
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public <E extends IBattleReplayForUser> E into(E into) {
		into.from(this);
		return into;
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached BattleReplayForUserRecord
	 */
	public BattleReplayForUserRecord() {
		super(BattleReplayForUser.BATTLE_REPLAY_FOR_USER);
	}

	/**
	 * Create a detached, initialised BattleReplayForUserRecord
	 */
	public BattleReplayForUserRecord(String id, String creatorId, byte[] replay, Timestamp createTime) {
		super(BattleReplayForUser.BATTLE_REPLAY_FOR_USER);

		setValue(0, id);
		setValue(1, creatorId);
		setValue(2, replay);
		setValue(3, createTime);
	}
}
