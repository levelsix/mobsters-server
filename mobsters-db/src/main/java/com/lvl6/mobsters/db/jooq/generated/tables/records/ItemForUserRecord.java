/**
 * This class is generated by jOOQ
 */
package com.lvl6.mobsters.db.jooq.generated.tables.records;


import com.lvl6.mobsters.db.jooq.generated.tables.ItemForUser;
import com.lvl6.mobsters.db.jooq.generated.tables.interfaces.IItemForUser;

import javax.annotation.Generated;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Record3;
import org.jooq.Row;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.1"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(name = "item_for_user", schema = "mobsters", uniqueConstraints = {
	@UniqueConstraint(columnNames = {"user_id", "item_id"})
})
public class ItemForUserRecord extends UpdatableRecordImpl<ItemForUserRecord> implements Record3<String, Integer, Integer>, IItemForUser {

	private static final long serialVersionUID = 314631059;

	/**
	 * Setter for <code>mobsters.item_for_user.user_id</code>.
	 */
	@Override
	public ItemForUserRecord setUserId(String value) {
		setValue(0, value);
		return this;
	}

	/**
	 * Getter for <code>mobsters.item_for_user.user_id</code>.
	 */
	@Column(name = "user_id", nullable = false, length = 36)
	@NotNull
	@Size(max = 36)
	@Override
	public String getUserId() {
		return (String) getValue(0);
	}

	/**
	 * Setter for <code>mobsters.item_for_user.item_id</code>.
	 */
	@Override
	public ItemForUserRecord setItemId(Integer value) {
		setValue(1, value);
		return this;
	}

	/**
	 * Getter for <code>mobsters.item_for_user.item_id</code>.
	 */
	@Column(name = "item_id", nullable = false, precision = 10)
	@NotNull
	@Override
	public Integer getItemId() {
		return (Integer) getValue(1);
	}

	/**
	 * Setter for <code>mobsters.item_for_user.quantity</code>.
	 */
	@Override
	public ItemForUserRecord setQuantity(Integer value) {
		setValue(2, value);
		return this;
	}

	/**
	 * Getter for <code>mobsters.item_for_user.quantity</code>.
	 */
	@Column(name = "quantity", precision = 10)
	@Override
	public Integer getQuantity() {
		return (Integer) getValue(2);
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Record2<String, Integer> key() {
		return (Record2) super.key();
	}

	// -------------------------------------------------------------------------
	// Record3 type implementation
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row3<String, Integer, Integer> fieldsRow() {
		return (Row3) super.fieldsRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row3<String, Integer, Integer> valuesRow() {
		return (Row3) super.valuesRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field1() {
		return ItemForUser.ITEM_FOR_USER.USER_ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field2() {
		return ItemForUser.ITEM_FOR_USER.ITEM_ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field3() {
		return ItemForUser.ITEM_FOR_USER.QUANTITY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value1() {
		return getUserId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value2() {
		return getItemId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value3() {
		return getQuantity();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ItemForUserRecord value1(String value) {
		setUserId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ItemForUserRecord value2(Integer value) {
		setItemId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ItemForUserRecord value3(Integer value) {
		setQuantity(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ItemForUserRecord values(String value1, Integer value2, Integer value3) {
		value1(value1);
		value2(value2);
		value3(value3);
		return this;
	}

	// -------------------------------------------------------------------------
	// FROM and INTO
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void from(IItemForUser from) {
		setUserId(from.getUserId());
		setItemId(from.getItemId());
		setQuantity(from.getQuantity());
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public <E extends IItemForUser> E into(E into) {
		into.from(this);
		return into;
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached ItemForUserRecord
	 */
	public ItemForUserRecord() {
		super(ItemForUser.ITEM_FOR_USER);
	}

	/**
	 * Create a detached, initialised ItemForUserRecord
	 */
	public ItemForUserRecord(String userId, Integer itemId, Integer quantity) {
		super(ItemForUser.ITEM_FOR_USER);

		setValue(0, userId);
		setValue(1, itemId);
		setValue(2, quantity);
	}
}
