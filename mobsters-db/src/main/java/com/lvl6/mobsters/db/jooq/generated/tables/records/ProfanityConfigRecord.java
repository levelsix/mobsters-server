/**
 * This class is generated by jOOQ
 */
package com.lvl6.mobsters.db.jooq.generated.tables.records;


import com.lvl6.mobsters.db.jooq.generated.tables.ProfanityConfig;
import com.lvl6.mobsters.db.jooq.generated.tables.interfaces.IProfanityConfig;

import javax.annotation.Generated;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Row;
import org.jooq.Row1;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.1"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(name = "profanity_config", schema = "mobsters")
public class ProfanityConfigRecord extends UpdatableRecordImpl<ProfanityConfigRecord> implements Record1<String>, IProfanityConfig {

	private static final long serialVersionUID = -652356743;

	/**
	 * Setter for <code>mobsters.profanity_config.term</code>.
	 */
	@Override
	public ProfanityConfigRecord setTerm(String value) {
		setValue(0, value);
		return this;
	}

	/**
	 * Getter for <code>mobsters.profanity_config.term</code>.
	 */
	@Id
	@Column(name = "term", unique = true, nullable = false, length = 30)
	@NotNull
	@Size(max = 30)
	@Override
	public String getTerm() {
		return (String) getValue(0);
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Record1<String> key() {
		return (Record1) super.key();
	}

	// -------------------------------------------------------------------------
	// Record1 type implementation
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row1<String> fieldsRow() {
		return (Row1) super.fieldsRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row1<String> valuesRow() {
		return (Row1) super.valuesRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field1() {
		return ProfanityConfig.PROFANITY_CONFIG.TERM;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value1() {
		return getTerm();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ProfanityConfigRecord value1(String value) {
		setTerm(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ProfanityConfigRecord values(String value1) {
		value1(value1);
		return this;
	}

	// -------------------------------------------------------------------------
	// FROM and INTO
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void from(IProfanityConfig from) {
		setTerm(from.getTerm());
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public <E extends IProfanityConfig> E into(E into) {
		into.from(this);
		return into;
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached ProfanityConfigRecord
	 */
	public ProfanityConfigRecord() {
		super(ProfanityConfig.PROFANITY_CONFIG);
	}

	/**
	 * Create a detached, initialised ProfanityConfigRecord
	 */
	public ProfanityConfigRecord(String term) {
		super(ProfanityConfig.PROFANITY_CONFIG);

		setValue(0, term);
	}
}
