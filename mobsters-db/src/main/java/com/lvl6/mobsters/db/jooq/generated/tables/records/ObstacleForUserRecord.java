/**
 * This class is generated by jOOQ
 */
package com.lvl6.mobsters.db.jooq.generated.tables.records;


import com.lvl6.mobsters.db.jooq.generated.tables.ObstacleForUser;
import com.lvl6.mobsters.db.jooq.generated.tables.interfaces.IObstacleForUser;

import java.sql.Timestamp;

import javax.annotation.Generated;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record7;
import org.jooq.Row;
import org.jooq.Row7;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.1"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(name = "obstacle_for_user", schema = "mobsters")
public class ObstacleForUserRecord extends UpdatableRecordImpl<ObstacleForUserRecord> implements Record7<String, String, Integer, Integer, Integer, Timestamp, String>, IObstacleForUser {

	private static final long serialVersionUID = 1211608002;

	/**
	 * Setter for <code>mobsters.obstacle_for_user.id</code>.
	 */
	@Override
	public ObstacleForUserRecord setId(String value) {
		setValue(0, value);
		return this;
	}

	/**
	 * Getter for <code>mobsters.obstacle_for_user.id</code>.
	 */
	@Id
	@Column(name = "id", unique = true, nullable = false, length = 36)
	@NotNull
	@Size(max = 36)
	@Override
	public String getId() {
		return (String) getValue(0);
	}

	/**
	 * Setter for <code>mobsters.obstacle_for_user.user_id</code>.
	 */
	@Override
	public ObstacleForUserRecord setUserId(String value) {
		setValue(1, value);
		return this;
	}

	/**
	 * Getter for <code>mobsters.obstacle_for_user.user_id</code>.
	 */
	@Column(name = "user_id", length = 36)
	@Size(max = 36)
	@Override
	public String getUserId() {
		return (String) getValue(1);
	}

	/**
	 * Setter for <code>mobsters.obstacle_for_user.obstacle_id</code>.
	 */
	@Override
	public ObstacleForUserRecord setObstacleId(Integer value) {
		setValue(2, value);
		return this;
	}

	/**
	 * Getter for <code>mobsters.obstacle_for_user.obstacle_id</code>.
	 */
	@Column(name = "obstacle_id", precision = 10)
	@Override
	public Integer getObstacleId() {
		return (Integer) getValue(2);
	}

	/**
	 * Setter for <code>mobsters.obstacle_for_user.xcoord</code>.
	 */
	@Override
	public ObstacleForUserRecord setXcoord(Integer value) {
		setValue(3, value);
		return this;
	}

	/**
	 * Getter for <code>mobsters.obstacle_for_user.xcoord</code>.
	 */
	@Column(name = "xcoord", precision = 10)
	@Override
	public Integer getXcoord() {
		return (Integer) getValue(3);
	}

	/**
	 * Setter for <code>mobsters.obstacle_for_user.ycoord</code>.
	 */
	@Override
	public ObstacleForUserRecord setYcoord(Integer value) {
		setValue(4, value);
		return this;
	}

	/**
	 * Getter for <code>mobsters.obstacle_for_user.ycoord</code>.
	 */
	@Column(name = "ycoord", precision = 10)
	@Override
	public Integer getYcoord() {
		return (Integer) getValue(4);
	}

	/**
	 * Setter for <code>mobsters.obstacle_for_user.removal_time</code>.
	 */
	@Override
	public ObstacleForUserRecord setRemovalTime(Timestamp value) {
		setValue(5, value);
		return this;
	}

	/**
	 * Getter for <code>mobsters.obstacle_for_user.removal_time</code>.
	 */
	@Column(name = "removal_time")
	@Override
	public Timestamp getRemovalTime() {
		return (Timestamp) getValue(5);
	}

	/**
	 * Setter for <code>mobsters.obstacle_for_user.orientation</code>.
	 */
	@Override
	public ObstacleForUserRecord setOrientation(String value) {
		setValue(6, value);
		return this;
	}

	/**
	 * Getter for <code>mobsters.obstacle_for_user.orientation</code>.
	 */
	@Column(name = "orientation", length = 45)
	@Size(max = 45)
	@Override
	public String getOrientation() {
		return (String) getValue(6);
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Record1<String> key() {
		return (Record1) super.key();
	}

	// -------------------------------------------------------------------------
	// Record7 type implementation
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row7<String, String, Integer, Integer, Integer, Timestamp, String> fieldsRow() {
		return (Row7) super.fieldsRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row7<String, String, Integer, Integer, Integer, Timestamp, String> valuesRow() {
		return (Row7) super.valuesRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field1() {
		return ObstacleForUser.OBSTACLE_FOR_USER.ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field2() {
		return ObstacleForUser.OBSTACLE_FOR_USER.USER_ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field3() {
		return ObstacleForUser.OBSTACLE_FOR_USER.OBSTACLE_ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field4() {
		return ObstacleForUser.OBSTACLE_FOR_USER.XCOORD;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field5() {
		return ObstacleForUser.OBSTACLE_FOR_USER.YCOORD;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Timestamp> field6() {
		return ObstacleForUser.OBSTACLE_FOR_USER.REMOVAL_TIME;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field7() {
		return ObstacleForUser.OBSTACLE_FOR_USER.ORIENTATION;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value1() {
		return getId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value2() {
		return getUserId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value3() {
		return getObstacleId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value4() {
		return getXcoord();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value5() {
		return getYcoord();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Timestamp value6() {
		return getRemovalTime();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value7() {
		return getOrientation();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ObstacleForUserRecord value1(String value) {
		setId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ObstacleForUserRecord value2(String value) {
		setUserId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ObstacleForUserRecord value3(Integer value) {
		setObstacleId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ObstacleForUserRecord value4(Integer value) {
		setXcoord(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ObstacleForUserRecord value5(Integer value) {
		setYcoord(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ObstacleForUserRecord value6(Timestamp value) {
		setRemovalTime(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ObstacleForUserRecord value7(String value) {
		setOrientation(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ObstacleForUserRecord values(String value1, String value2, Integer value3, Integer value4, Integer value5, Timestamp value6, String value7) {
		value1(value1);
		value2(value2);
		value3(value3);
		value4(value4);
		value5(value5);
		value6(value6);
		value7(value7);
		return this;
	}

	// -------------------------------------------------------------------------
	// FROM and INTO
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void from(IObstacleForUser from) {
		setId(from.getId());
		setUserId(from.getUserId());
		setObstacleId(from.getObstacleId());
		setXcoord(from.getXcoord());
		setYcoord(from.getYcoord());
		setRemovalTime(from.getRemovalTime());
		setOrientation(from.getOrientation());
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public <E extends IObstacleForUser> E into(E into) {
		into.from(this);
		return into;
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached ObstacleForUserRecord
	 */
	public ObstacleForUserRecord() {
		super(ObstacleForUser.OBSTACLE_FOR_USER);
	}

	/**
	 * Create a detached, initialised ObstacleForUserRecord
	 */
	public ObstacleForUserRecord(String id, String userId, Integer obstacleId, Integer xcoord, Integer ycoord, Timestamp removalTime, String orientation) {
		super(ObstacleForUser.OBSTACLE_FOR_USER);

		setValue(0, id);
		setValue(1, userId);
		setValue(2, obstacleId);
		setValue(3, xcoord);
		setValue(4, ycoord);
		setValue(5, removalTime);
		setValue(6, orientation);
	}
}
