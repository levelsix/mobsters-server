/**
 * This class is generated by jOOQ
 */
package com.lvl6.mobsters.db.jooq.generated.tables.pojos;


import com.lvl6.mobsters.db.jooq.generated.tables.interfaces.IMonsterEvolvingForUser;

import java.sql.Timestamp;

import javax.annotation.Generated;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.1"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(name = "monster_evolving_for_user", schema = "mobsters", uniqueConstraints = {
	@UniqueConstraint(columnNames = {"catalyst_user_monster_id", "user_monster_id_one", "user_monster_id_two"})
})
public class MonsterEvolvingForUserPojo implements IMonsterEvolvingForUser {

	private static final long serialVersionUID = 1584709603;

	private String    catalystUserMonsterId;
	private String    userMonsterIdOne;
	private String    userMonsterIdTwo;
	private String    userId;
	private Timestamp startTime;

	public MonsterEvolvingForUserPojo() {}

	public MonsterEvolvingForUserPojo(MonsterEvolvingForUserPojo value) {
		this.catalystUserMonsterId = value.catalystUserMonsterId;
		this.userMonsterIdOne = value.userMonsterIdOne;
		this.userMonsterIdTwo = value.userMonsterIdTwo;
		this.userId = value.userId;
		this.startTime = value.startTime;
	}

	public MonsterEvolvingForUserPojo(
		String    catalystUserMonsterId,
		String    userMonsterIdOne,
		String    userMonsterIdTwo,
		String    userId,
		Timestamp startTime
	) {
		this.catalystUserMonsterId = catalystUserMonsterId;
		this.userMonsterIdOne = userMonsterIdOne;
		this.userMonsterIdTwo = userMonsterIdTwo;
		this.userId = userId;
		this.startTime = startTime;
	}

	@Column(name = "catalyst_user_monster_id", unique = true, nullable = false, length = 36)
	@NotNull
	@Size(max = 36)
	@Override
	public String getCatalystUserMonsterId() {
		return this.catalystUserMonsterId;
	}

	@Override
	public MonsterEvolvingForUserPojo setCatalystUserMonsterId(String catalystUserMonsterId) {
		this.catalystUserMonsterId = catalystUserMonsterId;
		return this;
	}

	@Column(name = "user_monster_id_one", nullable = false, length = 36)
	@NotNull
	@Size(max = 36)
	@Override
	public String getUserMonsterIdOne() {
		return this.userMonsterIdOne;
	}

	@Override
	public MonsterEvolvingForUserPojo setUserMonsterIdOne(String userMonsterIdOne) {
		this.userMonsterIdOne = userMonsterIdOne;
		return this;
	}

	@Column(name = "user_monster_id_two", nullable = false, length = 36)
	@NotNull
	@Size(max = 36)
	@Override
	public String getUserMonsterIdTwo() {
		return this.userMonsterIdTwo;
	}

	@Override
	public MonsterEvolvingForUserPojo setUserMonsterIdTwo(String userMonsterIdTwo) {
		this.userMonsterIdTwo = userMonsterIdTwo;
		return this;
	}

	@Column(name = "user_id", length = 36)
	@Size(max = 36)
	@Override
	public String getUserId() {
		return this.userId;
	}

	@Override
	public MonsterEvolvingForUserPojo setUserId(String userId) {
		this.userId = userId;
		return this;
	}

	@Column(name = "start_time")
	@Override
	public Timestamp getStartTime() {
		return this.startTime;
	}

	@Override
	public MonsterEvolvingForUserPojo setStartTime(Timestamp startTime) {
		this.startTime = startTime;
		return this;
	}

	// -------------------------------------------------------------------------
	// FROM and INTO
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void from(IMonsterEvolvingForUser from) {
		setCatalystUserMonsterId(from.getCatalystUserMonsterId());
		setUserMonsterIdOne(from.getUserMonsterIdOne());
		setUserMonsterIdTwo(from.getUserMonsterIdTwo());
		setUserId(from.getUserId());
		setStartTime(from.getStartTime());
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public <E extends IMonsterEvolvingForUser> E into(E into) {
		into.from(this);
		return into;
	}
}
