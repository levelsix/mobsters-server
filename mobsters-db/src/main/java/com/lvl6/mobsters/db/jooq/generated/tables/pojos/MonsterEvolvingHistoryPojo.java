/**
 * This class is generated by jOOQ
 */
package com.lvl6.mobsters.db.jooq.generated.tables.pojos;


import com.lvl6.mobsters.db.jooq.generated.tables.interfaces.IMonsterEvolvingHistory;

import java.sql.Timestamp;

import javax.annotation.Generated;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.1"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(name = "monster_evolving_history", schema = "mobsters")
public class MonsterEvolvingHistoryPojo implements IMonsterEvolvingHistory {

	private static final long serialVersionUID = 1418779186;

	private String    id;
	private String    userId;
	private String    userMonsterIdOne;
	private String    userMonsterIdTwo;
	private String    catalystUserMonsterId;
	private Timestamp startTime;
	private Timestamp timeOfEntry;
	private Timestamp endTime;

	public MonsterEvolvingHistoryPojo() {}

	public MonsterEvolvingHistoryPojo(MonsterEvolvingHistoryPojo value) {
		this.id = value.id;
		this.userId = value.userId;
		this.userMonsterIdOne = value.userMonsterIdOne;
		this.userMonsterIdTwo = value.userMonsterIdTwo;
		this.catalystUserMonsterId = value.catalystUserMonsterId;
		this.startTime = value.startTime;
		this.timeOfEntry = value.timeOfEntry;
		this.endTime = value.endTime;
	}

	public MonsterEvolvingHistoryPojo(
		String    id,
		String    userId,
		String    userMonsterIdOne,
		String    userMonsterIdTwo,
		String    catalystUserMonsterId,
		Timestamp startTime,
		Timestamp timeOfEntry,
		Timestamp endTime
	) {
		this.id = id;
		this.userId = userId;
		this.userMonsterIdOne = userMonsterIdOne;
		this.userMonsterIdTwo = userMonsterIdTwo;
		this.catalystUserMonsterId = catalystUserMonsterId;
		this.startTime = startTime;
		this.timeOfEntry = timeOfEntry;
		this.endTime = endTime;
	}

	@Id
	@Column(name = "id", unique = true, nullable = false, length = 36)
	@NotNull
	@Size(max = 36)
	@Override
	public String getId() {
		return this.id;
	}

	@Override
	public MonsterEvolvingHistoryPojo setId(String id) {
		this.id = id;
		return this;
	}

	@Column(name = "user_id", nullable = false, length = 36)
	@NotNull
	@Size(max = 36)
	@Override
	public String getUserId() {
		return this.userId;
	}

	@Override
	public MonsterEvolvingHistoryPojo setUserId(String userId) {
		this.userId = userId;
		return this;
	}

	@Column(name = "user_monster_id_one", nullable = false, length = 36)
	@NotNull
	@Size(max = 36)
	@Override
	public String getUserMonsterIdOne() {
		return this.userMonsterIdOne;
	}

	@Override
	public MonsterEvolvingHistoryPojo setUserMonsterIdOne(String userMonsterIdOne) {
		this.userMonsterIdOne = userMonsterIdOne;
		return this;
	}

	@Column(name = "user_monster_id_two", nullable = false, length = 36)
	@NotNull
	@Size(max = 36)
	@Override
	public String getUserMonsterIdTwo() {
		return this.userMonsterIdTwo;
	}

	@Override
	public MonsterEvolvingHistoryPojo setUserMonsterIdTwo(String userMonsterIdTwo) {
		this.userMonsterIdTwo = userMonsterIdTwo;
		return this;
	}

	@Column(name = "catalyst_user_monster_id", nullable = false, length = 36)
	@NotNull
	@Size(max = 36)
	@Override
	public String getCatalystUserMonsterId() {
		return this.catalystUserMonsterId;
	}

	@Override
	public MonsterEvolvingHistoryPojo setCatalystUserMonsterId(String catalystUserMonsterId) {
		this.catalystUserMonsterId = catalystUserMonsterId;
		return this;
	}

	@Column(name = "start_time")
	@Override
	public Timestamp getStartTime() {
		return this.startTime;
	}

	@Override
	public MonsterEvolvingHistoryPojo setStartTime(Timestamp startTime) {
		this.startTime = startTime;
		return this;
	}

	@Column(name = "time_of_entry")
	@Override
	public Timestamp getTimeOfEntry() {
		return this.timeOfEntry;
	}

	@Override
	public MonsterEvolvingHistoryPojo setTimeOfEntry(Timestamp timeOfEntry) {
		this.timeOfEntry = timeOfEntry;
		return this;
	}

	@Column(name = "end_time")
	@Override
	public Timestamp getEndTime() {
		return this.endTime;
	}

	@Override
	public MonsterEvolvingHistoryPojo setEndTime(Timestamp endTime) {
		this.endTime = endTime;
		return this;
	}

	// -------------------------------------------------------------------------
	// FROM and INTO
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void from(IMonsterEvolvingHistory from) {
		setId(from.getId());
		setUserId(from.getUserId());
		setUserMonsterIdOne(from.getUserMonsterIdOne());
		setUserMonsterIdTwo(from.getUserMonsterIdTwo());
		setCatalystUserMonsterId(from.getCatalystUserMonsterId());
		setStartTime(from.getStartTime());
		setTimeOfEntry(from.getTimeOfEntry());
		setEndTime(from.getEndTime());
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public <E extends IMonsterEvolvingHistory> E into(E into) {
		into.from(this);
		return into;
	}


	public String toString() {
		com.lvl6.mobsters.db.jooq.generated.tables.records.MonsterEvolvingHistoryRecord poop = new com.lvl6.mobsters.db.jooq.generated.tables.records.MonsterEvolvingHistoryRecord();
		poop.from(this);
		return "MonsterEvolvingHistoryPojo[" + poop.valuesRow() + "]";
	}
}
