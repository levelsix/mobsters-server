/**
 * This class is generated by jOOQ
 */
package com.lvl6.mobsters.db.jooq.generated.tables.records;


import com.lvl6.mobsters.db.jooq.generated.tables.MiniEventForPlayerLvlConfig;
import com.lvl6.mobsters.db.jooq.generated.tables.interfaces.IMiniEventForPlayerLvlConfig;

import javax.annotation.Generated;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.validation.constraints.NotNull;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record7;
import org.jooq.Row;
import org.jooq.Row7;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.1"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(name = "mini_event_for_player_lvl_config", schema = "mobsters")
public class MiniEventForPlayerLvlConfigRecord extends UpdatableRecordImpl<MiniEventForPlayerLvlConfigRecord> implements Record7<Integer, Integer, Integer, Integer, Integer, Integer, Integer>, IMiniEventForPlayerLvlConfig {

	private static final long serialVersionUID = -1711672813;

	/**
	 * Setter for <code>mobsters.mini_event_for_player_lvl_config.id</code>.
	 */
	@Override
	public MiniEventForPlayerLvlConfigRecord setId(Integer value) {
		setValue(0, value);
		return this;
	}

	/**
	 * Getter for <code>mobsters.mini_event_for_player_lvl_config.id</code>.
	 */
	@Id
	@Column(name = "id", unique = true, nullable = false, precision = 10)
	@NotNull
	@Override
	public Integer getId() {
		return (Integer) getValue(0);
	}

	/**
	 * Setter for <code>mobsters.mini_event_for_player_lvl_config.mini_event_id</code>. refers to id in mini_event table
	 */
	@Override
	public MiniEventForPlayerLvlConfigRecord setMiniEventId(Integer value) {
		setValue(1, value);
		return this;
	}

	/**
	 * Getter for <code>mobsters.mini_event_for_player_lvl_config.mini_event_id</code>. refers to id in mini_event table
	 */
	@Column(name = "mini_event_id", precision = 10)
	@Override
	public Integer getMiniEventId() {
		return (Integer) getValue(1);
	}

	/**
	 * Setter for <code>mobsters.mini_event_for_player_lvl_config.player_lvl_min</code>. inclusive
	 */
	@Override
	public MiniEventForPlayerLvlConfigRecord setPlayerLvlMin(Integer value) {
		setValue(2, value);
		return this;
	}

	/**
	 * Getter for <code>mobsters.mini_event_for_player_lvl_config.player_lvl_min</code>. inclusive
	 */
	@Column(name = "player_lvl_min", precision = 10)
	@Override
	public Integer getPlayerLvlMin() {
		return (Integer) getValue(2);
	}

	/**
	 * Setter for <code>mobsters.mini_event_for_player_lvl_config.player_lvl_max</code>. inclusive
	 */
	@Override
	public MiniEventForPlayerLvlConfigRecord setPlayerLvlMax(Integer value) {
		setValue(3, value);
		return this;
	}

	/**
	 * Getter for <code>mobsters.mini_event_for_player_lvl_config.player_lvl_max</code>. inclusive
	 */
	@Column(name = "player_lvl_max", precision = 10)
	@Override
	public Integer getPlayerLvlMax() {
		return (Integer) getValue(3);
	}

	/**
	 * Setter for <code>mobsters.mini_event_for_player_lvl_config.tier_one_min_pts</code>. min points to be considered in tier one, inclusive
	 */
	@Override
	public MiniEventForPlayerLvlConfigRecord setTierOneMinPts(Integer value) {
		setValue(4, value);
		return this;
	}

	/**
	 * Getter for <code>mobsters.mini_event_for_player_lvl_config.tier_one_min_pts</code>. min points to be considered in tier one, inclusive
	 */
	@Column(name = "tier_one_min_pts", precision = 10)
	@Override
	public Integer getTierOneMinPts() {
		return (Integer) getValue(4);
	}

	/**
	 * Setter for <code>mobsters.mini_event_for_player_lvl_config.tier_two_min_pts</code>. min points to be considered in tier two, inclusive
	 */
	@Override
	public MiniEventForPlayerLvlConfigRecord setTierTwoMinPts(Integer value) {
		setValue(5, value);
		return this;
	}

	/**
	 * Getter for <code>mobsters.mini_event_for_player_lvl_config.tier_two_min_pts</code>. min points to be considered in tier two, inclusive
	 */
	@Column(name = "tier_two_min_pts", precision = 10)
	@Override
	public Integer getTierTwoMinPts() {
		return (Integer) getValue(5);
	}

	/**
	 * Setter for <code>mobsters.mini_event_for_player_lvl_config.tier_three_min_pts</code>. min points to be considered in tier three, inclusive
	 */
	@Override
	public MiniEventForPlayerLvlConfigRecord setTierThreeMinPts(Integer value) {
		setValue(6, value);
		return this;
	}

	/**
	 * Getter for <code>mobsters.mini_event_for_player_lvl_config.tier_three_min_pts</code>. min points to be considered in tier three, inclusive
	 */
	@Column(name = "tier_three_min_pts", precision = 10)
	@Override
	public Integer getTierThreeMinPts() {
		return (Integer) getValue(6);
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Record1<Integer> key() {
		return (Record1) super.key();
	}

	// -------------------------------------------------------------------------
	// Record7 type implementation
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row7<Integer, Integer, Integer, Integer, Integer, Integer, Integer> fieldsRow() {
		return (Row7) super.fieldsRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row7<Integer, Integer, Integer, Integer, Integer, Integer, Integer> valuesRow() {
		return (Row7) super.valuesRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field1() {
		return MiniEventForPlayerLvlConfig.MINI_EVENT_FOR_PLAYER_LVL_CONFIG.ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field2() {
		return MiniEventForPlayerLvlConfig.MINI_EVENT_FOR_PLAYER_LVL_CONFIG.MINI_EVENT_ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field3() {
		return MiniEventForPlayerLvlConfig.MINI_EVENT_FOR_PLAYER_LVL_CONFIG.PLAYER_LVL_MIN;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field4() {
		return MiniEventForPlayerLvlConfig.MINI_EVENT_FOR_PLAYER_LVL_CONFIG.PLAYER_LVL_MAX;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field5() {
		return MiniEventForPlayerLvlConfig.MINI_EVENT_FOR_PLAYER_LVL_CONFIG.TIER_ONE_MIN_PTS;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field6() {
		return MiniEventForPlayerLvlConfig.MINI_EVENT_FOR_PLAYER_LVL_CONFIG.TIER_TWO_MIN_PTS;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field7() {
		return MiniEventForPlayerLvlConfig.MINI_EVENT_FOR_PLAYER_LVL_CONFIG.TIER_THREE_MIN_PTS;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value1() {
		return getId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value2() {
		return getMiniEventId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value3() {
		return getPlayerLvlMin();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value4() {
		return getPlayerLvlMax();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value5() {
		return getTierOneMinPts();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value6() {
		return getTierTwoMinPts();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value7() {
		return getTierThreeMinPts();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public MiniEventForPlayerLvlConfigRecord value1(Integer value) {
		setId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public MiniEventForPlayerLvlConfigRecord value2(Integer value) {
		setMiniEventId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public MiniEventForPlayerLvlConfigRecord value3(Integer value) {
		setPlayerLvlMin(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public MiniEventForPlayerLvlConfigRecord value4(Integer value) {
		setPlayerLvlMax(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public MiniEventForPlayerLvlConfigRecord value5(Integer value) {
		setTierOneMinPts(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public MiniEventForPlayerLvlConfigRecord value6(Integer value) {
		setTierTwoMinPts(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public MiniEventForPlayerLvlConfigRecord value7(Integer value) {
		setTierThreeMinPts(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public MiniEventForPlayerLvlConfigRecord values(Integer value1, Integer value2, Integer value3, Integer value4, Integer value5, Integer value6, Integer value7) {
		value1(value1);
		value2(value2);
		value3(value3);
		value4(value4);
		value5(value5);
		value6(value6);
		value7(value7);
		return this;
	}

	// -------------------------------------------------------------------------
	// FROM and INTO
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void from(IMiniEventForPlayerLvlConfig from) {
		setId(from.getId());
		setMiniEventId(from.getMiniEventId());
		setPlayerLvlMin(from.getPlayerLvlMin());
		setPlayerLvlMax(from.getPlayerLvlMax());
		setTierOneMinPts(from.getTierOneMinPts());
		setTierTwoMinPts(from.getTierTwoMinPts());
		setTierThreeMinPts(from.getTierThreeMinPts());
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public <E extends IMiniEventForPlayerLvlConfig> E into(E into) {
		into.from(this);
		return into;
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached MiniEventForPlayerLvlConfigRecord
	 */
	public MiniEventForPlayerLvlConfigRecord() {
		super(MiniEventForPlayerLvlConfig.MINI_EVENT_FOR_PLAYER_LVL_CONFIG);
	}

	/**
	 * Create a detached, initialised MiniEventForPlayerLvlConfigRecord
	 */
	public MiniEventForPlayerLvlConfigRecord(Integer id, Integer miniEventId, Integer playerLvlMin, Integer playerLvlMax, Integer tierOneMinPts, Integer tierTwoMinPts, Integer tierThreeMinPts) {
		super(MiniEventForPlayerLvlConfig.MINI_EVENT_FOR_PLAYER_LVL_CONFIG);

		setValue(0, id);
		setValue(1, miniEventId);
		setValue(2, playerLvlMin);
		setValue(3, playerLvlMax);
		setValue(4, tierOneMinPts);
		setValue(5, tierTwoMinPts);
		setValue(6, tierThreeMinPts);
	}
}
