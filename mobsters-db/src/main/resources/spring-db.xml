<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:hz="http://www.hazelcast.com/schema/spring"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.hazelcast.com/schema/spring
        http://www.hazelcast.com/schema/spring/hazelcast-spring.xsd
        http://www.springframework.org/schema/tx 
     	http://www.springframework.org/schema/tx/spring-tx.xsd
		">

	<bean id="dynamoDBService" class="com.lvl6.server.dynamodb.DynamoDBService">
		<property name="tablePrefix" value="${dynamodb.table.prefix}" />
		<property name="isLocal" value="${dynamodb.isLocal}" />
	</bean>
	
	<tx:annotation-driven transaction-manager="transactionManager"/>

	<bean id="dataSource" class="com.jolbox.bonecp.BoneCPDataSource"
		destroy-method="close">
		<property name="driverClass" value="${jdbc.driverClassName}" />
		<property name="jdbcUrl">
			<value><![CDATA[${jdbc.url}]]></value>
		</property>
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="idleConnectionTestPeriodInMinutes" value="${jdbc.idleConnectionTestPeriodInMinutes}" />
		<property name="idleMaxAgeInMinutes" value="${jdbc.idleMaxAgeInMinutes}" />
		<property name="maxConnectionsPerPartition" value="${jdbc.maxConnectionsPerPartition}" />
		<property name="minConnectionsPerPartition" value="${jdbc.minConnectionsPerPartition}" />
		<property name="partitionCount" value="${jdbc.partitionCount}" />
		<property name="acquireIncrement" value="${jdbc.acquireIncrement}" />
		<property name="statementsCacheSize" value="${jdbc.statementsCacheSize}" />
		<property name="releaseHelperThreads" value="${jdbc.releaseHelperThreads}" />
	</bean>

	<bean id="dbConnection" class="com.lvl6.utils.DBConnection" scope="singleton"
		depends-on="dataSource">
		<property name="dataSource" ref="dataSource" />
	</bean>


	<bean id="insertUtils" class="com.lvl6.utils.utilmethods.InsertUtils" />
	<bean id="updateUtils" class="com.lvl6.utils.utilmethods.UpdateUtils" />
	<bean id="deleteUtils" class="com.lvl6.utils.utilmethods.DeleteUtils" />

	<bean id="applicationUtils" class="com.lvl6.utils.ApplicationUtils" />

	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- jooq -->

    <!-- Configure jOOQ's ConnectionProvider to use Spring's TransactionAwareDataSourceProxy,
         which can dynamically discover the transaction context -->
    <bean id="transactionAwareDataSource"
        class="org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy">
        <constructor-arg ref="dataSource" />
    </bean>

    <bean class="org.jooq.impl.DataSourceConnectionProvider" name="connectionProvider">
        <constructor-arg ref="transactionAwareDataSource" />
    </bean>

    <!-- Configure the DSL object, optionally overriding jOOQ Exceptions with Spring Exceptions -->
    <bean id="dsl" class="org.jooq.impl.DefaultDSLContext">
        <constructor-arg ref="config" />
    </bean>
    
    <!-- <bean id="exceptionTranslator" class="org.jooq.example.spring.exception.ExceptionTranslator" /> -->
    
    <!-- Invoking an internal, package-private constructor for the example
         Implement your own Configuration for more reliable behaviour -->
    <bean class="org.jooq.impl.DefaultConfiguration" name="config">
        <property name="SQLDialect">
        	<value type="org.jooq.SQLDialect">MYSQL</value>
        </property>
        <property name="connectionProvider" ref="connectionProvider" />
    </bean>
    
    <bean class="org.jooq.impl.DefaultDSLContext" id="dslContext">
       <constructor-arg index="0" ref="config" />
    </bean>

    <bean class="com.lvl6.mobsters.db.jooq.generated.tables.daos.CustomTranslationsDao" id="customTranslationsDao">
        <constructor-arg index="0" ref="config" />
    </bean>
    <bean class="com.lvl6.mobsters.db.jooq.generated.tables.daos.GiftForTangoUserDao" id="giftForTangoUserDao">
        <constructor-arg index="0" ref="config" />
    </bean>
    <bean class="com.lvl6.mobsters.db.jooq.generated.tables.daos.PvpLeagueForUserDao" id="PvpLeagueForUserDao">
        <constructor-arg index="0" ref="config" />
    </bean>
    <bean class="com.lvl6.mobsters.db.jooq.generated.tables.daos.UserCurrencyHistoryDao" id="UserCurrencyHistoryDao">
       <constructor-arg index="0" ref="config" />
    </bean>
<!--     <bean class="com.lvl6.mobsters.db.jooq.generated.tables.daos.StructureForUserDao" id="structureForUserDao"> -->
<!--         <constructor-arg index="0" ref="config" /> -->
<!--     </bean> -->

    <!-- static data -->
    <bean class="com.lvl6.mobsters.db.jooq.generated.tables.daos.CustomMenuConfigDao" id="customMenuConfigDao">
       <constructor-arg index="0" ref="config" />
    </bean>
    <bean class="com.lvl6.mobsters.db.jooq.generated.tables.daos.GiftConfigDao" id="giftConfigDao">
        <constructor-arg index="0" ref="config" />
    </bean>
    <bean class="com.lvl6.mobsters.db.jooq.generated.tables.daos.GiftRewardConfigDao" id="giftRewardConfigDao">
        <constructor-arg index="0" ref="config" />
    </bean>
    <bean class="com.lvl6.mobsters.db.jooq.generated.tables.daos.MiniEventConfigDao" id="miniEventConfigDao">
        <constructor-arg index="0" ref="config" />
    </bean>
    <bean class="com.lvl6.mobsters.db.jooq.generated.tables.daos.MiniEventTimetableConfigDao" id="miniEventTimetableConfigDao">
        <constructor-arg index="0" ref="config" />
    </bean>
    <bean class="com.lvl6.mobsters.db.jooq.generated.tables.daos.SecretGiftConfigDao" id="secretGiftConfigDao">
        <constructor-arg index="0" ref="config" />
    </bean>
        <bean class="com.lvl6.mobsters.db.jooq.generated.tables.daos.SalesScheduleConfigDao" id="salesScheduleConfigDao">
        <constructor-arg index="0" ref="config" />
    </bean>
    
</beans>