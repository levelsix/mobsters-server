//ALL REQUEST PROTOS SHOULD INCLUDE A MinimumUserProto AS optional that represents which client sent it/triggered it 
//DO NO START PROPERTY METHODS WITH THE WORDS NEW OR COPY

import "Battle.proto";
import "User.proto";

package com.lvl6.proto;

option java_outer_classname = "EventPvpProto";
//DO NOT USE ID AS THE NAME OF A PROPERTY IN ANY PROTO



// A real or a fake player will be returned by this event.
// SOME BACKGROUND: 
// All people that can be attacked will be offline people. The opposite is not true though.
// All people that can be attacked will not have an active shield.
message QueueUpRequestProto {
	optional MinimumUserProto attacker = 1;
	optional int32 attackerElo = 2;

	/* an EventUser.proto UpdateUserCurrencyEvent will be used instead of this stuff
	//if user needs, say, five more cash, then user can spend gems to replace
	//said five cash. (positive number, server will convert it to negative)
	optional int32 gemsSpent = 3;
	
	//copy pasted from somewhere else, trying to be consistent, don't forsee being positive
	//positive means refund, negative means charge user
	optional sint32 cashChange = 4;
	*/
	
	//these users should not be considered 
	repeated int32 seenUserIds = 5;
	optional int64 clientTime = 6;

}

message QueueUpResponseProto {
	optional MinimumUserProto attacker = 1;
	repeated PvpProto defenderInfoList = 2;
	optional QueueUpStatus status = 3;

	enum QueueUpStatus {
		SUCCESS = 1;
		FAIL_NOT_ENOUGH_CASH = 2;
		FAIL_OTHER = 3; //REAL OR FAKE USERS WOULD BE RETURNED, SO THE FAIL WOULD NOT 
						//BE FOR LACK OF A VICTIM TO ATTACK
		FAIL_NOT_ENOUGH_GEMS = 4;
		
	}
}

//------------------------------------------------------------------------------------------
// Whenever an offline user comes in (StartupRequest) this user will be removed from the
//	potentialPvpUsers collection.	
// Whenever someone logs out, the user will be placed into the collection if he qualifies
//	to be attacked.

message BeginPvpBattleRequestProto {
	optional MinimumUserProto sender = 1;
	optional int32 senderElo = 2;
	optional int64 attackStartTime = 3;
	
	//this is the enemy that the user wants to fight
	optional PvpProto enemy = 4;
}

message BeginPvpBattleResponseProto {
	optional MinimumUserProto sender = 1;
	optional BeginPvpBattleStatus status = 2;
	
	enum BeginPvpBattleStatus {
		SUCCESS = 1;
		FAIL_ENEMY_UNAVAILABLE = 2;
		FAIL_OTHER = 3;
	}
}
