/**
 * This class is generated by jOOQ
 */
package com.lvl6.mobsters.db.jooq.generated.tables.records;


import com.lvl6.mobsters.db.jooq.generated.tables.MiniEventTimetableConfig;
import com.lvl6.mobsters.db.jooq.generated.tables.interfaces.IMiniEventTimetableConfig;

import java.sql.Timestamp;

import javax.annotation.Generated;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.validation.constraints.NotNull;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.1"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(name = "mini_event_timetable_config", schema = "mobsters")
public class MiniEventTimetableConfigRecord extends UpdatableRecordImpl<MiniEventTimetableConfigRecord> implements Record4<Integer, Integer, Timestamp, Timestamp>, IMiniEventTimetableConfig {

	private static final long serialVersionUID = 1372999614;

	/**
	 * Setter for <code>mobsters.mini_event_timetable_config.id</code>.
	 */
	@Override
	public MiniEventTimetableConfigRecord setId(Integer value) {
		setValue(0, value);
		return this;
	}

	/**
	 * Getter for <code>mobsters.mini_event_timetable_config.id</code>.
	 */
	@Id
	@Column(name = "id", unique = true, nullable = false, precision = 10)
	@NotNull
	@Override
	public Integer getId() {
		return (Integer) getValue(0);
	}

	/**
	 * Setter for <code>mobsters.mini_event_timetable_config.mini_event_id</code>.
	 */
	@Override
	public MiniEventTimetableConfigRecord setMiniEventId(Integer value) {
		setValue(1, value);
		return this;
	}

	/**
	 * Getter for <code>mobsters.mini_event_timetable_config.mini_event_id</code>.
	 */
	@Column(name = "mini_event_id", precision = 10)
	@Override
	public Integer getMiniEventId() {
		return (Integer) getValue(1);
	}

	/**
	 * Setter for <code>mobsters.mini_event_timetable_config.start_time</code>.
	 */
	@Override
	public MiniEventTimetableConfigRecord setStartTime(Timestamp value) {
		setValue(2, value);
		return this;
	}

	/**
	 * Getter for <code>mobsters.mini_event_timetable_config.start_time</code>.
	 */
	@Column(name = "start_time")
	@Override
	public Timestamp getStartTime() {
		return (Timestamp) getValue(2);
	}

	/**
	 * Setter for <code>mobsters.mini_event_timetable_config.end_time</code>.
	 */
	@Override
	public MiniEventTimetableConfigRecord setEndTime(Timestamp value) {
		setValue(3, value);
		return this;
	}

	/**
	 * Getter for <code>mobsters.mini_event_timetable_config.end_time</code>.
	 */
	@Column(name = "end_time")
	@Override
	public Timestamp getEndTime() {
		return (Timestamp) getValue(3);
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Record1<Integer> key() {
		return (Record1) super.key();
	}

	// -------------------------------------------------------------------------
	// Record4 type implementation
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row4<Integer, Integer, Timestamp, Timestamp> fieldsRow() {
		return (Row4) super.fieldsRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row4<Integer, Integer, Timestamp, Timestamp> valuesRow() {
		return (Row4) super.valuesRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field1() {
		return MiniEventTimetableConfig.MINI_EVENT_TIMETABLE_CONFIG.ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field2() {
		return MiniEventTimetableConfig.MINI_EVENT_TIMETABLE_CONFIG.MINI_EVENT_ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Timestamp> field3() {
		return MiniEventTimetableConfig.MINI_EVENT_TIMETABLE_CONFIG.START_TIME;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Timestamp> field4() {
		return MiniEventTimetableConfig.MINI_EVENT_TIMETABLE_CONFIG.END_TIME;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value1() {
		return getId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value2() {
		return getMiniEventId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Timestamp value3() {
		return getStartTime();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Timestamp value4() {
		return getEndTime();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public MiniEventTimetableConfigRecord value1(Integer value) {
		setId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public MiniEventTimetableConfigRecord value2(Integer value) {
		setMiniEventId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public MiniEventTimetableConfigRecord value3(Timestamp value) {
		setStartTime(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public MiniEventTimetableConfigRecord value4(Timestamp value) {
		setEndTime(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public MiniEventTimetableConfigRecord values(Integer value1, Integer value2, Timestamp value3, Timestamp value4) {
		value1(value1);
		value2(value2);
		value3(value3);
		value4(value4);
		return this;
	}

	// -------------------------------------------------------------------------
	// FROM and INTO
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void from(IMiniEventTimetableConfig from) {
		setId(from.getId());
		setMiniEventId(from.getMiniEventId());
		setStartTime(from.getStartTime());
		setEndTime(from.getEndTime());
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public <E extends IMiniEventTimetableConfig> E into(E into) {
		into.from(this);
		return into;
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached MiniEventTimetableConfigRecord
	 */
	public MiniEventTimetableConfigRecord() {
		super(MiniEventTimetableConfig.MINI_EVENT_TIMETABLE_CONFIG);
	}

	/**
	 * Create a detached, initialised MiniEventTimetableConfigRecord
	 */
	public MiniEventTimetableConfigRecord(Integer id, Integer miniEventId, Timestamp startTime, Timestamp endTime) {
		super(MiniEventTimetableConfig.MINI_EVENT_TIMETABLE_CONFIG);

		setValue(0, id);
		setValue(1, miniEventId);
		setValue(2, startTime);
		setValue(3, endTime);
	}
}
