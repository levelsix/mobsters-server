/**
 * This class is generated by jOOQ
 */
package com.lvl6.mobsters.db.jooq.generated.tables;


import com.lvl6.mobsters.db.jooq.generated.Keys;
import com.lvl6.mobsters.db.jooq.generated.Mobsters;
import com.lvl6.mobsters.db.jooq.generated.tables.records.TaskForUserOngoingRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.1"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TaskForUserOngoing extends TableImpl<TaskForUserOngoingRecord> {

	private static final long serialVersionUID = -731843225;

	/**
	 * The reference instance of <code>mobsters.task_for_user_ongoing</code>
	 */
	public static final TaskForUserOngoing TASK_FOR_USER_ONGOING = new TaskForUserOngoing();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<TaskForUserOngoingRecord> getRecordType() {
		return TaskForUserOngoingRecord.class;
	}

	/**
	 * The column <code>mobsters.task_for_user_ongoing.id</code>.
	 */
	public final TableField<TaskForUserOngoingRecord, String> ID = createField("id", org.jooq.impl.SQLDataType.CHAR.length(36).nullable(false), this, "");

	/**
	 * The column <code>mobsters.task_for_user_ongoing.user_id</code>.
	 */
	public final TableField<TaskForUserOngoingRecord, String> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.CHAR.length(36).nullable(false), this, "");

	/**
	 * The column <code>mobsters.task_for_user_ongoing.task_id</code>.
	 */
	public final TableField<TaskForUserOngoingRecord, Integer> TASK_ID = createField("task_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>mobsters.task_for_user_ongoing.exp_gained</code>. Experience gained from all the stages, if the user beats the dungeon.
	 */
	public final TableField<TaskForUserOngoingRecord, Integer> EXP_GAINED = createField("exp_gained", org.jooq.impl.SQLDataType.INTEGER, this, "Experience gained from all the stages, if the user beats the dungeon.");

	/**
	 * The column <code>mobsters.task_for_user_ongoing.cash_gained</code>. Cash gained from all the stages, if the user beats the dungeon.
	 */
	public final TableField<TaskForUserOngoingRecord, Integer> CASH_GAINED = createField("cash_gained", org.jooq.impl.SQLDataType.INTEGER, this, "Cash gained from all the stages, if the user beats the dungeon.");

	/**
	 * The column <code>mobsters.task_for_user_ongoing.oil_gained</code>.
	 */
	public final TableField<TaskForUserOngoingRecord, Integer> OIL_GAINED = createField("oil_gained", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>mobsters.task_for_user_ongoing.num_revives</code>. Keeps track of how many times the user died and chose to revive-and-continue the current stage in the dungeon.
	 */
	public final TableField<TaskForUserOngoingRecord, Integer> NUM_REVIVES = createField("num_revives", org.jooq.impl.SQLDataType.INTEGER, this, "Keeps track of how many times the user died and chose to revive-and-continue the current stage in the dungeon.");

	/**
	 * The column <code>mobsters.task_for_user_ongoing.start_time</code>.
	 */
	public final TableField<TaskForUserOngoingRecord, Timestamp> START_TIME = createField("start_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

	/**
	 * The column <code>mobsters.task_for_user_ongoing.task_stage_id</code>.
	 */
	public final TableField<TaskForUserOngoingRecord, Integer> TASK_STAGE_ID = createField("task_stage_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * Create a <code>mobsters.task_for_user_ongoing</code> table reference
	 */
	public TaskForUserOngoing() {
		this("task_for_user_ongoing", null);
	}

	/**
	 * Create an aliased <code>mobsters.task_for_user_ongoing</code> table reference
	 */
	public TaskForUserOngoing(String alias) {
		this(alias, TASK_FOR_USER_ONGOING);
	}

	private TaskForUserOngoing(String alias, Table<TaskForUserOngoingRecord> aliased) {
		this(alias, aliased, null);
	}

	private TaskForUserOngoing(String alias, Table<TaskForUserOngoingRecord> aliased, Field<?>[] parameters) {
		super(alias, Mobsters.MOBSTERS, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<TaskForUserOngoingRecord> getPrimaryKey() {
		return Keys.KEY_TASK_FOR_USER_ONGOING_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<TaskForUserOngoingRecord>> getKeys() {
		return Arrays.<UniqueKey<TaskForUserOngoingRecord>>asList(Keys.KEY_TASK_FOR_USER_ONGOING_PRIMARY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public TaskForUserOngoing as(String alias) {
		return new TaskForUserOngoing(alias, this);
	}

	/**
	 * Rename this table
	 */
	public TaskForUserOngoing rename(String name) {
		return new TaskForUserOngoing(name, null);
	}
}
