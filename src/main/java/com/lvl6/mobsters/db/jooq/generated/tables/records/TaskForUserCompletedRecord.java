/**
 * This class is generated by jOOQ
 */
package com.lvl6.mobsters.db.jooq.generated.tables.records;


import com.lvl6.mobsters.db.jooq.generated.tables.TaskForUserCompleted;
import com.lvl6.mobsters.db.jooq.generated.tables.interfaces.ITaskForUserCompleted;

import java.sql.Timestamp;

import javax.annotation.Generated;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Record5;
import org.jooq.Row;
import org.jooq.Row5;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.1"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(name = "task_for_user_completed", schema = "mobsters", uniqueConstraints = {
	@UniqueConstraint(columnNames = {"user_id", "task_id"})
})
public class TaskForUserCompletedRecord extends UpdatableRecordImpl<TaskForUserCompletedRecord> implements Record5<String, Integer, Timestamp, Integer, Integer>, ITaskForUserCompleted {

	private static final long serialVersionUID = -1878564145;

	/**
	 * Setter for <code>mobsters.task_for_user_completed.user_id</code>.
	 */
	@Override
	public TaskForUserCompletedRecord setUserId(String value) {
		setValue(0, value);
		return this;
	}

	/**
	 * Getter for <code>mobsters.task_for_user_completed.user_id</code>.
	 */
	@Column(name = "user_id", nullable = false, length = 36)
	@NotNull
	@Size(max = 36)
	@Override
	public String getUserId() {
		return (String) getValue(0);
	}

	/**
	 * Setter for <code>mobsters.task_for_user_completed.task_id</code>.
	 */
	@Override
	public TaskForUserCompletedRecord setTaskId(Integer value) {
		setValue(1, value);
		return this;
	}

	/**
	 * Getter for <code>mobsters.task_for_user_completed.task_id</code>.
	 */
	@Column(name = "task_id", nullable = false, precision = 10)
	@NotNull
	@Override
	public Integer getTaskId() {
		return (Integer) getValue(1);
	}

	/**
	 * Setter for <code>mobsters.task_for_user_completed.time_of_entry</code>.
	 */
	@Override
	public TaskForUserCompletedRecord setTimeOfEntry(Timestamp value) {
		setValue(2, value);
		return this;
	}

	/**
	 * Getter for <code>mobsters.task_for_user_completed.time_of_entry</code>.
	 */
	@Column(name = "time_of_entry")
	@Override
	public Timestamp getTimeOfEntry() {
		return (Timestamp) getValue(2);
	}

	/**
	 * Setter for <code>mobsters.task_for_user_completed.unclaimed_cash</code>.
	 */
	@Override
	public TaskForUserCompletedRecord setUnclaimedCash(Integer value) {
		setValue(3, value);
		return this;
	}

	/**
	 * Getter for <code>mobsters.task_for_user_completed.unclaimed_cash</code>.
	 */
	@Column(name = "unclaimed_cash", precision = 10)
	@Override
	public Integer getUnclaimedCash() {
		return (Integer) getValue(3);
	}

	/**
	 * Setter for <code>mobsters.task_for_user_completed.unclaimed_oil</code>.
	 */
	@Override
	public TaskForUserCompletedRecord setUnclaimedOil(Integer value) {
		setValue(4, value);
		return this;
	}

	/**
	 * Getter for <code>mobsters.task_for_user_completed.unclaimed_oil</code>.
	 */
	@Column(name = "unclaimed_oil", precision = 10)
	@Override
	public Integer getUnclaimedOil() {
		return (Integer) getValue(4);
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Record2<String, Integer> key() {
		return (Record2) super.key();
	}

	// -------------------------------------------------------------------------
	// Record5 type implementation
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row5<String, Integer, Timestamp, Integer, Integer> fieldsRow() {
		return (Row5) super.fieldsRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row5<String, Integer, Timestamp, Integer, Integer> valuesRow() {
		return (Row5) super.valuesRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field1() {
		return TaskForUserCompleted.TASK_FOR_USER_COMPLETED.USER_ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field2() {
		return TaskForUserCompleted.TASK_FOR_USER_COMPLETED.TASK_ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Timestamp> field3() {
		return TaskForUserCompleted.TASK_FOR_USER_COMPLETED.TIME_OF_ENTRY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field4() {
		return TaskForUserCompleted.TASK_FOR_USER_COMPLETED.UNCLAIMED_CASH;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field5() {
		return TaskForUserCompleted.TASK_FOR_USER_COMPLETED.UNCLAIMED_OIL;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value1() {
		return getUserId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value2() {
		return getTaskId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Timestamp value3() {
		return getTimeOfEntry();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value4() {
		return getUnclaimedCash();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value5() {
		return getUnclaimedOil();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public TaskForUserCompletedRecord value1(String value) {
		setUserId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public TaskForUserCompletedRecord value2(Integer value) {
		setTaskId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public TaskForUserCompletedRecord value3(Timestamp value) {
		setTimeOfEntry(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public TaskForUserCompletedRecord value4(Integer value) {
		setUnclaimedCash(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public TaskForUserCompletedRecord value5(Integer value) {
		setUnclaimedOil(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public TaskForUserCompletedRecord values(String value1, Integer value2, Timestamp value3, Integer value4, Integer value5) {
		value1(value1);
		value2(value2);
		value3(value3);
		value4(value4);
		value5(value5);
		return this;
	}

	// -------------------------------------------------------------------------
	// FROM and INTO
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void from(ITaskForUserCompleted from) {
		setUserId(from.getUserId());
		setTaskId(from.getTaskId());
		setTimeOfEntry(from.getTimeOfEntry());
		setUnclaimedCash(from.getUnclaimedCash());
		setUnclaimedOil(from.getUnclaimedOil());
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public <E extends ITaskForUserCompleted> E into(E into) {
		into.from(this);
		return into;
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached TaskForUserCompletedRecord
	 */
	public TaskForUserCompletedRecord() {
		super(TaskForUserCompleted.TASK_FOR_USER_COMPLETED);
	}

	/**
	 * Create a detached, initialised TaskForUserCompletedRecord
	 */
	public TaskForUserCompletedRecord(String userId, Integer taskId, Timestamp timeOfEntry, Integer unclaimedCash, Integer unclaimedOil) {
		super(TaskForUserCompleted.TASK_FOR_USER_COMPLETED);

		setValue(0, userId);
		setValue(1, taskId);
		setValue(2, timeOfEntry);
		setValue(3, unclaimedCash);
		setValue(4, unclaimedOil);
	}
}
