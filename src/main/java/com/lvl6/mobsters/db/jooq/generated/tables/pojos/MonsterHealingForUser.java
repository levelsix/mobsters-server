/**
 * This class is generated by jOOQ
 */
package com.lvl6.mobsters.db.jooq.generated.tables.pojos;


import com.lvl6.mobsters.db.jooq.generated.tables.interfaces.IMonsterHealingForUser;

import java.sql.Timestamp;

import javax.annotation.Generated;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.1"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(name = "monster_healing_for_user", schema = "mobsters", uniqueConstraints = {
	@UniqueConstraint(columnNames = {"user_id", "monster_for_user_id"})
})
public class MonsterHealingForUser implements IMonsterHealingForUser {

	private static final long serialVersionUID = 377681999;

	private String    userId;
	private String    monsterForUserId;
	private Timestamp queuedTime;
	private Double    healthProgress;
	private UInteger  priority;
	private Double    elapsedSeconds;
	private String    userStructHospitalId;

	public MonsterHealingForUser() {}

	public MonsterHealingForUser(MonsterHealingForUser value) {
		this.userId = value.userId;
		this.monsterForUserId = value.monsterForUserId;
		this.queuedTime = value.queuedTime;
		this.healthProgress = value.healthProgress;
		this.priority = value.priority;
		this.elapsedSeconds = value.elapsedSeconds;
		this.userStructHospitalId = value.userStructHospitalId;
	}

	public MonsterHealingForUser(
		String    userId,
		String    monsterForUserId,
		Timestamp queuedTime,
		Double    healthProgress,
		UInteger  priority,
		Double    elapsedSeconds,
		String    userStructHospitalId
	) {
		this.userId = userId;
		this.monsterForUserId = monsterForUserId;
		this.queuedTime = queuedTime;
		this.healthProgress = healthProgress;
		this.priority = priority;
		this.elapsedSeconds = elapsedSeconds;
		this.userStructHospitalId = userStructHospitalId;
	}

	@Column(name = "user_id", nullable = false, length = 36)
	@NotNull
	@Size(max = 36)
	@Override
	public String getUserId() {
		return this.userId;
	}

	@Override
	public MonsterHealingForUser setUserId(String userId) {
		this.userId = userId;
		return this;
	}

	@Column(name = "monster_for_user_id", nullable = false, length = 36)
	@NotNull
	@Size(max = 36)
	@Override
	public String getMonsterForUserId() {
		return this.monsterForUserId;
	}

	@Override
	public MonsterHealingForUser setMonsterForUserId(String monsterForUserId) {
		this.monsterForUserId = monsterForUserId;
		return this;
	}

	@Column(name = "queued_time")
	@Override
	public Timestamp getQueuedTime() {
		return this.queuedTime;
	}

	@Override
	public MonsterHealingForUser setQueuedTime(Timestamp queuedTime) {
		this.queuedTime = queuedTime;
		return this;
	}

	@Column(name = "health_progress", precision = 12)
	@Override
	public Double getHealthProgress() {
		return this.healthProgress;
	}

	@Override
	public MonsterHealingForUser setHealthProgress(Double healthProgress) {
		this.healthProgress = healthProgress;
		return this;
	}

	@Column(name = "priority", precision = 10)
	@Override
	public UInteger getPriority() {
		return this.priority;
	}

	@Override
	public MonsterHealingForUser setPriority(UInteger priority) {
		this.priority = priority;
		return this;
	}

	@Column(name = "elapsed_seconds", precision = 12)
	@Override
	public Double getElapsedSeconds() {
		return this.elapsedSeconds;
	}

	@Override
	public MonsterHealingForUser setElapsedSeconds(Double elapsedSeconds) {
		this.elapsedSeconds = elapsedSeconds;
		return this;
	}

	@Column(name = "user_struct_hospital_id", length = 36)
	@Size(max = 36)
	@Override
	public String getUserStructHospitalId() {
		return this.userStructHospitalId;
	}

	@Override
	public MonsterHealingForUser setUserStructHospitalId(String userStructHospitalId) {
		this.userStructHospitalId = userStructHospitalId;
		return this;
	}

	// -------------------------------------------------------------------------
	// FROM and INTO
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void from(IMonsterHealingForUser from) {
		setUserId(from.getUserId());
		setMonsterForUserId(from.getMonsterForUserId());
		setQueuedTime(from.getQueuedTime());
		setHealthProgress(from.getHealthProgress());
		setPriority(from.getPriority());
		setElapsedSeconds(from.getElapsedSeconds());
		setUserStructHospitalId(from.getUserStructHospitalId());
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public <E extends IMonsterHealingForUser> E into(E into) {
		into.from(this);
		return into;
	}
}
