/**
 * This class is generated by jOOQ
 */
package com.lvl6.mobsters.db.jooq.generated.tables;


import com.lvl6.mobsters.db.jooq.generated.Keys;
import com.lvl6.mobsters.db.jooq.generated.Mobsters;
import com.lvl6.mobsters.db.jooq.generated.tables.records.UserCurrencyHistoryRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.1"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserCurrencyHistory extends TableImpl<UserCurrencyHistoryRecord> {

<<<<<<< HEAD
	private static final long serialVersionUID = 1526330646;
=======
	private static final long serialVersionUID = 1238514026;
>>>>>>> cleaning up shit

	/**
	 * The reference instance of <code>mobsters.user_currency_history</code>
	 */
	public static final UserCurrencyHistory USER_CURRENCY_HISTORY = new UserCurrencyHistory();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<UserCurrencyHistoryRecord> getRecordType() {
		return UserCurrencyHistoryRecord.class;
	}

	/**
	 * The column <code>mobsters.user_currency_history.id</code>.
	 */
	public final TableField<UserCurrencyHistoryRecord, String> ID = createField("id", org.jooq.impl.SQLDataType.CHAR.length(36).nullable(false), this, "");

	/**
	 * The column <code>mobsters.user_currency_history.user_id</code>.
	 */
	public final TableField<UserCurrencyHistoryRecord, String> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.CHAR.length(36), this, "");

	/**
	 * The column <code>mobsters.user_currency_history.date</code>.
	 */
	public final TableField<UserCurrencyHistoryRecord, Timestamp> DATE = createField("date", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

	/**
	 * The column <code>mobsters.user_currency_history.resource_type</code>.
	 */
	public final TableField<UserCurrencyHistoryRecord, String> RESOURCE_TYPE = createField("resource_type", org.jooq.impl.SQLDataType.VARCHAR.length(100), this, "");

	/**
	 * The column <code>mobsters.user_currency_history.currency_change</code>.
	 */
	public final TableField<UserCurrencyHistoryRecord, Integer> CURRENCY_CHANGE = createField("currency_change", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>mobsters.user_currency_history.currency_before_change</code>.
	 */
	public final TableField<UserCurrencyHistoryRecord, Integer> CURRENCY_BEFORE_CHANGE = createField("currency_before_change", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>mobsters.user_currency_history.currency_after_change</code>.
	 */
	public final TableField<UserCurrencyHistoryRecord, Integer> CURRENCY_AFTER_CHANGE = createField("currency_after_change", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>mobsters.user_currency_history.reason_for_change</code>.
	 */
	public final TableField<UserCurrencyHistoryRecord, String> REASON_FOR_CHANGE = createField("reason_for_change", org.jooq.impl.SQLDataType.VARCHAR.length(95), this, "");

	/**
	 * The column <code>mobsters.user_currency_history.details</code>.
	 */
	public final TableField<UserCurrencyHistoryRecord, String> DETAILS = createField("details", org.jooq.impl.SQLDataType.CLOB, this, "");

	/**
	 * Create a <code>mobsters.user_currency_history</code> table reference
	 */
	public UserCurrencyHistory() {
		this("user_currency_history", null);
	}

	/**
	 * Create an aliased <code>mobsters.user_currency_history</code> table reference
	 */
	public UserCurrencyHistory(String alias) {
		this(alias, USER_CURRENCY_HISTORY);
	}

	private UserCurrencyHistory(String alias, Table<UserCurrencyHistoryRecord> aliased) {
		this(alias, aliased, null);
	}

	private UserCurrencyHistory(String alias, Table<UserCurrencyHistoryRecord> aliased, Field<?>[] parameters) {
		super(alias, Mobsters.MOBSTERS, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<UserCurrencyHistoryRecord> getPrimaryKey() {
		return Keys.KEY_USER_CURRENCY_HISTORY_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<UserCurrencyHistoryRecord>> getKeys() {
		return Arrays.<UniqueKey<UserCurrencyHistoryRecord>>asList(Keys.KEY_USER_CURRENCY_HISTORY_PRIMARY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UserCurrencyHistory as(String alias) {
		return new UserCurrencyHistory(alias, this);
	}

	/**
	 * Rename this table
	 */
	public UserCurrencyHistory rename(String name) {
		return new UserCurrencyHistory(name, null);
	}
}
