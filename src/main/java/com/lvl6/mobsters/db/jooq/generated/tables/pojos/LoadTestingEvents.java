/**
 * This class is generated by jOOQ
 */
package com.lvl6.mobsters.db.jooq.generated.tables.pojos;


import com.lvl6.mobsters.db.jooq.generated.tables.interfaces.ILoadTestingEvents;

import java.sql.Timestamp;

import javax.annotation.Generated;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.1"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(name = "load_testing_events", schema = "mobsters")
public class LoadTestingEvents implements ILoadTestingEvents {

	private static final long serialVersionUID = 1521206900;

	private UInteger  id;
	private String    userId;
	private Timestamp logTime;
	private UInteger  eventType;
	private byte[]    eventBytes;

	public LoadTestingEvents() {}

	public LoadTestingEvents(LoadTestingEvents value) {
		this.id = value.id;
		this.userId = value.userId;
		this.logTime = value.logTime;
		this.eventType = value.eventType;
		this.eventBytes = value.eventBytes;
	}

	public LoadTestingEvents(
		UInteger  id,
		String    userId,
		Timestamp logTime,
		UInteger  eventType,
		byte[]    eventBytes
	) {
		this.id = id;
		this.userId = userId;
		this.logTime = logTime;
		this.eventType = eventType;
		this.eventBytes = eventBytes;
	}

	@Id
	@Column(name = "id", unique = true, nullable = false, precision = 10)
	@NotNull
	@Override
	public UInteger getId() {
		return this.id;
	}

	@Override
	public LoadTestingEvents setId(UInteger id) {
		this.id = id;
		return this;
	}

	@Column(name = "user_id", nullable = false, length = 36)
	@NotNull
	@Size(max = 36)
	@Override
	public String getUserId() {
		return this.userId;
	}

	@Override
	public LoadTestingEvents setUserId(String userId) {
		this.userId = userId;
		return this;
	}

	@Column(name = "log_time", nullable = false)
	@NotNull
	@Override
	public Timestamp getLogTime() {
		return this.logTime;
	}

	@Override
	public LoadTestingEvents setLogTime(Timestamp logTime) {
		this.logTime = logTime;
		return this;
	}

	@Column(name = "event_type", nullable = false, precision = 10)
	@NotNull
	@Override
	public UInteger getEventType() {
		return this.eventType;
	}

	@Override
	public LoadTestingEvents setEventType(UInteger eventType) {
		this.eventType = eventType;
		return this;
	}

	@Column(name = "event_bytes", nullable = false, length = 65535)
	@NotNull
	@Override
	public byte[] getEventBytes() {
		return this.eventBytes;
	}

	@Override
	public LoadTestingEvents setEventBytes(byte[] eventBytes) {
		this.eventBytes = eventBytes;
		return this;
	}

	// -------------------------------------------------------------------------
	// FROM and INTO
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void from(ILoadTestingEvents from) {
		setId(from.getId());
		setUserId(from.getUserId());
		setLogTime(from.getLogTime());
		setEventType(from.getEventType());
		setEventBytes(from.getEventBytes());
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public <E extends ILoadTestingEvents> E into(E into) {
		into.from(this);
		return into;
	}
}
