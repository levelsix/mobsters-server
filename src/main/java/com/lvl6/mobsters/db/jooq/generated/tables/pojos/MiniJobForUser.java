/**
 * This class is generated by jOOQ
 */
package com.lvl6.mobsters.db.jooq.generated.tables.pojos;


import com.lvl6.mobsters.db.jooq.generated.tables.interfaces.IMiniJobForUser;

import java.sql.Timestamp;

import javax.annotation.Generated;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.1"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(name = "mini_job_for_user", schema = "mobsters", uniqueConstraints = {
	@UniqueConstraint(columnNames = {"id", "user_id"})
})
public class MiniJobForUser implements IMiniJobForUser {

	private static final long serialVersionUID = 1725249784;

	private String    id;
	private String    userId;
	private Integer   miniJobId;
	private UInteger  baseDmgReceived;
	private Integer   durationMinutes;
	private Timestamp timeStarted;
	private String    userMonsterIds;
	private Timestamp timeCompleted;
	private Integer   durationSeconds;

	public MiniJobForUser() {}

	public MiniJobForUser(MiniJobForUser value) {
		this.id = value.id;
		this.userId = value.userId;
		this.miniJobId = value.miniJobId;
		this.baseDmgReceived = value.baseDmgReceived;
		this.durationMinutes = value.durationMinutes;
		this.timeStarted = value.timeStarted;
		this.userMonsterIds = value.userMonsterIds;
		this.timeCompleted = value.timeCompleted;
		this.durationSeconds = value.durationSeconds;
	}

	public MiniJobForUser(
		String    id,
		String    userId,
		Integer   miniJobId,
		UInteger  baseDmgReceived,
		Integer   durationMinutes,
		Timestamp timeStarted,
		String    userMonsterIds,
		Timestamp timeCompleted,
		Integer   durationSeconds
	) {
		this.id = id;
		this.userId = userId;
		this.miniJobId = miniJobId;
		this.baseDmgReceived = baseDmgReceived;
		this.durationMinutes = durationMinutes;
		this.timeStarted = timeStarted;
		this.userMonsterIds = userMonsterIds;
		this.timeCompleted = timeCompleted;
		this.durationSeconds = durationSeconds;
	}

	@Column(name = "id", nullable = false, length = 36)
	@NotNull
	@Size(max = 36)
	@Override
	public String getId() {
		return this.id;
	}

	@Override
	public MiniJobForUser setId(String id) {
		this.id = id;
		return this;
	}

	@Column(name = "user_id", nullable = false, length = 36)
	@NotNull
	@Size(max = 36)
	@Override
	public String getUserId() {
		return this.userId;
	}

	@Override
	public MiniJobForUser setUserId(String userId) {
		this.userId = userId;
		return this;
	}

	@Column(name = "mini_job_id", precision = 10)
	@Override
	public Integer getMiniJobId() {
		return this.miniJobId;
	}

	@Override
	public MiniJobForUser setMiniJobId(Integer miniJobId) {
		this.miniJobId = miniJobId;
		return this;
	}

	@Column(name = "base_dmg_received", precision = 10)
	@Override
	public UInteger getBaseDmgReceived() {
		return this.baseDmgReceived;
	}

	@Override
	public MiniJobForUser setBaseDmgReceived(UInteger baseDmgReceived) {
		this.baseDmgReceived = baseDmgReceived;
		return this;
	}

	@Column(name = "duration_minutes", precision = 10)
	@Override
	public Integer getDurationMinutes() {
		return this.durationMinutes;
	}

	@Override
	public MiniJobForUser setDurationMinutes(Integer durationMinutes) {
		this.durationMinutes = durationMinutes;
		return this;
	}

	@Column(name = "time_started")
	@Override
	public Timestamp getTimeStarted() {
		return this.timeStarted;
	}

	@Override
	public MiniJobForUser setTimeStarted(Timestamp timeStarted) {
		this.timeStarted = timeStarted;
		return this;
	}

	@Column(name = "user_monster_ids", length = 511)
	@Size(max = 511)
	@Override
	public String getUserMonsterIds() {
		return this.userMonsterIds;
	}

	@Override
	public MiniJobForUser setUserMonsterIds(String userMonsterIds) {
		this.userMonsterIds = userMonsterIds;
		return this;
	}

	@Column(name = "time_completed")
	@Override
	public Timestamp getTimeCompleted() {
		return this.timeCompleted;
	}

	@Override
	public MiniJobForUser setTimeCompleted(Timestamp timeCompleted) {
		this.timeCompleted = timeCompleted;
		return this;
	}

	@Column(name = "duration_seconds", precision = 10)
	@Override
	public Integer getDurationSeconds() {
		return this.durationSeconds;
	}

	@Override
	public MiniJobForUser setDurationSeconds(Integer durationSeconds) {
		this.durationSeconds = durationSeconds;
		return this;
	}

	// -------------------------------------------------------------------------
	// FROM and INTO
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void from(IMiniJobForUser from) {
		setId(from.getId());
		setUserId(from.getUserId());
		setMiniJobId(from.getMiniJobId());
		setBaseDmgReceived(from.getBaseDmgReceived());
		setDurationMinutes(from.getDurationMinutes());
		setTimeStarted(from.getTimeStarted());
		setUserMonsterIds(from.getUserMonsterIds());
		setTimeCompleted(from.getTimeCompleted());
		setDurationSeconds(from.getDurationSeconds());
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public <E extends IMiniJobForUser> E into(E into) {
		into.from(this);
		return into;
	}
}
