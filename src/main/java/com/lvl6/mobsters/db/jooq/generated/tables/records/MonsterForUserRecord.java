/**
 * This class is generated by jOOQ
 */
package com.lvl6.mobsters.db.jooq.generated.tables.records;


import com.lvl6.mobsters.db.jooq.generated.tables.MonsterForUser;
import com.lvl6.mobsters.db.jooq.generated.tables.interfaces.IMonsterForUser;

import java.sql.Timestamp;

import javax.annotation.Generated;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record15;
import org.jooq.Row;
import org.jooq.Row15;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.UByte;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.1"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(name = "monster_for_user", schema = "mobsters")
public class MonsterForUserRecord extends UpdatableRecordImpl<MonsterForUserRecord> implements Record15<String, String, UInteger, UInteger, UByte, Integer, UByte, Boolean, Timestamp, UByte, String, Boolean, Boolean, Integer, Integer>, IMonsterForUser {

	private static final long serialVersionUID = 1734758601;

	/**
	 * Setter for <code>mobsters.monster_for_user.id</code>.
	 */
	@Override
	public MonsterForUserRecord setId(String value) {
		setValue(0, value);
		return this;
	}

	/**
	 * Getter for <code>mobsters.monster_for_user.id</code>.
	 */
	@Id
	@Column(name = "id", unique = true, nullable = false, length = 36)
	@NotNull
	@Size(max = 36)
	@Override
	public String getId() {
		return (String) getValue(0);
	}

	/**
	 * Setter for <code>mobsters.monster_for_user.user_id</code>.
	 */
	@Override
	public MonsterForUserRecord setUserId(String value) {
		setValue(1, value);
		return this;
	}

	/**
	 * Getter for <code>mobsters.monster_for_user.user_id</code>.
	 */
	@Column(name = "user_id", length = 36)
	@Size(max = 36)
	@Override
	public String getUserId() {
		return (String) getValue(1);
	}

	/**
	 * Setter for <code>mobsters.monster_for_user.monster_id</code>.
	 */
	@Override
	public MonsterForUserRecord setMonsterId(UInteger value) {
		setValue(2, value);
		return this;
	}

	/**
	 * Getter for <code>mobsters.monster_for_user.monster_id</code>.
	 */
	@Column(name = "monster_id", precision = 10)
	@Override
	public UInteger getMonsterId() {
		return (UInteger) getValue(2);
	}

	/**
	 * Setter for <code>mobsters.monster_for_user.current_experience</code>.
	 */
	@Override
	public MonsterForUserRecord setCurrentExperience(UInteger value) {
		setValue(3, value);
		return this;
	}

	/**
	 * Getter for <code>mobsters.monster_for_user.current_experience</code>.
	 */
	@Column(name = "current_experience", precision = 10)
	@Override
	public UInteger getCurrentExperience() {
		return (UInteger) getValue(3);
	}

	/**
	 * Setter for <code>mobsters.monster_for_user.current_level</code>.
	 */
	@Override
	public MonsterForUserRecord setCurrentLevel(UByte value) {
		setValue(4, value);
		return this;
	}

	/**
	 * Getter for <code>mobsters.monster_for_user.current_level</code>.
	 */
	@Column(name = "current_level", precision = 3)
	@Override
	public UByte getCurrentLevel() {
		return (UByte) getValue(4);
	}

	/**
	 * Setter for <code>mobsters.monster_for_user.current_health</code>.
	 */
	@Override
	public MonsterForUserRecord setCurrentHealth(Integer value) {
		setValue(5, value);
		return this;
	}

	/**
	 * Getter for <code>mobsters.monster_for_user.current_health</code>.
	 */
	@Column(name = "current_health", precision = 10)
	@Override
	public Integer getCurrentHealth() {
		return (Integer) getValue(5);
	}

	/**
	 * Setter for <code>mobsters.monster_for_user.num_pieces</code>.
	 */
	@Override
	public MonsterForUserRecord setNumPieces(UByte value) {
		setValue(6, value);
		return this;
	}

	/**
	 * Getter for <code>mobsters.monster_for_user.num_pieces</code>.
	 */
	@Column(name = "num_pieces", precision = 3)
	@Override
	public UByte getNumPieces() {
		return (UByte) getValue(6);
	}

	/**
	 * Setter for <code>mobsters.monster_for_user.is_complete</code>.
	 */
	@Override
	public MonsterForUserRecord setIsComplete(Boolean value) {
		setValue(7, value);
		return this;
	}

	/**
	 * Getter for <code>mobsters.monster_for_user.is_complete</code>.
	 */
	@Column(name = "is_complete", precision = 1)
	@Override
	public Boolean getIsComplete() {
		return (Boolean) getValue(7);
	}

	/**
	 * Setter for <code>mobsters.monster_for_user.combine_start_time</code>.
	 */
	@Override
	public MonsterForUserRecord setCombineStartTime(Timestamp value) {
		setValue(8, value);
		return this;
	}

	/**
	 * Getter for <code>mobsters.monster_for_user.combine_start_time</code>.
	 */
	@Column(name = "combine_start_time")
	@Override
	public Timestamp getCombineStartTime() {
		return (Timestamp) getValue(8);
	}

	/**
	 * Setter for <code>mobsters.monster_for_user.team_slot_num</code>.
	 */
	@Override
	public MonsterForUserRecord setTeamSlotNum(UByte value) {
		setValue(9, value);
		return this;
	}

	/**
	 * Getter for <code>mobsters.monster_for_user.team_slot_num</code>.
	 */
	@Column(name = "team_slot_num", precision = 3)
	@Override
	public UByte getTeamSlotNum() {
		return (UByte) getValue(9);
	}

	/**
	 * Setter for <code>mobsters.monster_for_user.source_of_pieces</code>.
	 */
	@Override
	public MonsterForUserRecord setSourceOfPieces(String value) {
		setValue(10, value);
		return this;
	}

	/**
	 * Getter for <code>mobsters.monster_for_user.source_of_pieces</code>.
	 */
	@Column(name = "source_of_pieces", length = 65535)
	@Size(max = 65535)
	@Override
	public String getSourceOfPieces() {
		return (String) getValue(10);
	}

	/**
	 * Setter for <code>mobsters.monster_for_user.has_all_pieces</code>.
	 */
	@Override
	public MonsterForUserRecord setHasAllPieces(Boolean value) {
		setValue(11, value);
		return this;
	}

	/**
	 * Getter for <code>mobsters.monster_for_user.has_all_pieces</code>.
	 */
	@Column(name = "has_all_pieces", precision = 1)
	@Override
	public Boolean getHasAllPieces() {
		return (Boolean) getValue(11);
	}

	/**
	 * Setter for <code>mobsters.monster_for_user.restricted</code>.
	 */
	@Override
	public MonsterForUserRecord setRestricted(Boolean value) {
		setValue(12, value);
		return this;
	}

	/**
	 * Getter for <code>mobsters.monster_for_user.restricted</code>.
	 */
	@Column(name = "restricted", precision = 1)
	@Override
	public Boolean getRestricted() {
		return (Boolean) getValue(12);
	}

	/**
	 * Setter for <code>mobsters.monster_for_user.offensive_skill_id</code>.
	 */
	@Override
	public MonsterForUserRecord setOffensiveSkillId(Integer value) {
		setValue(13, value);
		return this;
	}

	/**
	 * Getter for <code>mobsters.monster_for_user.offensive_skill_id</code>.
	 */
	@Column(name = "offensive_skill_id", precision = 10)
	@Override
	public Integer getOffensiveSkillId() {
		return (Integer) getValue(13);
	}

	/**
	 * Setter for <code>mobsters.monster_for_user.defensive_skill_id</code>.
	 */
	@Override
	public MonsterForUserRecord setDefensiveSkillId(Integer value) {
		setValue(14, value);
		return this;
	}

	/**
	 * Getter for <code>mobsters.monster_for_user.defensive_skill_id</code>.
	 */
	@Column(name = "defensive_skill_id", precision = 10)
	@Override
	public Integer getDefensiveSkillId() {
		return (Integer) getValue(14);
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Record1<String> key() {
		return (Record1) super.key();
	}

	// -------------------------------------------------------------------------
	// Record15 type implementation
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row15<String, String, UInteger, UInteger, UByte, Integer, UByte, Boolean, Timestamp, UByte, String, Boolean, Boolean, Integer, Integer> fieldsRow() {
		return (Row15) super.fieldsRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row15<String, String, UInteger, UInteger, UByte, Integer, UByte, Boolean, Timestamp, UByte, String, Boolean, Boolean, Integer, Integer> valuesRow() {
		return (Row15) super.valuesRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field1() {
		return MonsterForUser.MONSTER_FOR_USER.ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field2() {
		return MonsterForUser.MONSTER_FOR_USER.USER_ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<UInteger> field3() {
		return MonsterForUser.MONSTER_FOR_USER.MONSTER_ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<UInteger> field4() {
		return MonsterForUser.MONSTER_FOR_USER.CURRENT_EXPERIENCE;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<UByte> field5() {
		return MonsterForUser.MONSTER_FOR_USER.CURRENT_LEVEL;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field6() {
		return MonsterForUser.MONSTER_FOR_USER.CURRENT_HEALTH;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<UByte> field7() {
		return MonsterForUser.MONSTER_FOR_USER.NUM_PIECES;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Boolean> field8() {
		return MonsterForUser.MONSTER_FOR_USER.IS_COMPLETE;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Timestamp> field9() {
		return MonsterForUser.MONSTER_FOR_USER.COMBINE_START_TIME;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<UByte> field10() {
		return MonsterForUser.MONSTER_FOR_USER.TEAM_SLOT_NUM;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field11() {
		return MonsterForUser.MONSTER_FOR_USER.SOURCE_OF_PIECES;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Boolean> field12() {
		return MonsterForUser.MONSTER_FOR_USER.HAS_ALL_PIECES;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Boolean> field13() {
		return MonsterForUser.MONSTER_FOR_USER.RESTRICTED;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field14() {
		return MonsterForUser.MONSTER_FOR_USER.OFFENSIVE_SKILL_ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field15() {
		return MonsterForUser.MONSTER_FOR_USER.DEFENSIVE_SKILL_ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value1() {
		return getId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value2() {
		return getUserId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UInteger value3() {
		return getMonsterId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UInteger value4() {
		return getCurrentExperience();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UByte value5() {
		return getCurrentLevel();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value6() {
		return getCurrentHealth();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UByte value7() {
		return getNumPieces();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Boolean value8() {
		return getIsComplete();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Timestamp value9() {
		return getCombineStartTime();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UByte value10() {
		return getTeamSlotNum();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value11() {
		return getSourceOfPieces();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Boolean value12() {
		return getHasAllPieces();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Boolean value13() {
		return getRestricted();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value14() {
		return getOffensiveSkillId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value15() {
		return getDefensiveSkillId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public MonsterForUserRecord value1(String value) {
		setId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public MonsterForUserRecord value2(String value) {
		setUserId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public MonsterForUserRecord value3(UInteger value) {
		setMonsterId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public MonsterForUserRecord value4(UInteger value) {
		setCurrentExperience(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public MonsterForUserRecord value5(UByte value) {
		setCurrentLevel(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public MonsterForUserRecord value6(Integer value) {
		setCurrentHealth(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public MonsterForUserRecord value7(UByte value) {
		setNumPieces(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public MonsterForUserRecord value8(Boolean value) {
		setIsComplete(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public MonsterForUserRecord value9(Timestamp value) {
		setCombineStartTime(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public MonsterForUserRecord value10(UByte value) {
		setTeamSlotNum(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public MonsterForUserRecord value11(String value) {
		setSourceOfPieces(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public MonsterForUserRecord value12(Boolean value) {
		setHasAllPieces(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public MonsterForUserRecord value13(Boolean value) {
		setRestricted(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public MonsterForUserRecord value14(Integer value) {
		setOffensiveSkillId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public MonsterForUserRecord value15(Integer value) {
		setDefensiveSkillId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public MonsterForUserRecord values(String value1, String value2, UInteger value3, UInteger value4, UByte value5, Integer value6, UByte value7, Boolean value8, Timestamp value9, UByte value10, String value11, Boolean value12, Boolean value13, Integer value14, Integer value15) {
		value1(value1);
		value2(value2);
		value3(value3);
		value4(value4);
		value5(value5);
		value6(value6);
		value7(value7);
		value8(value8);
		value9(value9);
		value10(value10);
		value11(value11);
		value12(value12);
		value13(value13);
		value14(value14);
		value15(value15);
		return this;
	}

	// -------------------------------------------------------------------------
	// FROM and INTO
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void from(IMonsterForUser from) {
		setId(from.getId());
		setUserId(from.getUserId());
		setMonsterId(from.getMonsterId());
		setCurrentExperience(from.getCurrentExperience());
		setCurrentLevel(from.getCurrentLevel());
		setCurrentHealth(from.getCurrentHealth());
		setNumPieces(from.getNumPieces());
		setIsComplete(from.getIsComplete());
		setCombineStartTime(from.getCombineStartTime());
		setTeamSlotNum(from.getTeamSlotNum());
		setSourceOfPieces(from.getSourceOfPieces());
		setHasAllPieces(from.getHasAllPieces());
		setRestricted(from.getRestricted());
		setOffensiveSkillId(from.getOffensiveSkillId());
		setDefensiveSkillId(from.getDefensiveSkillId());
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public <E extends IMonsterForUser> E into(E into) {
		into.from(this);
		return into;
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached MonsterForUserRecord
	 */
	public MonsterForUserRecord() {
		super(MonsterForUser.MONSTER_FOR_USER);
	}

	/**
	 * Create a detached, initialised MonsterForUserRecord
	 */
	public MonsterForUserRecord(String id, String userId, UInteger monsterId, UInteger currentExperience, UByte currentLevel, Integer currentHealth, UByte numPieces, Boolean isComplete, Timestamp combineStartTime, UByte teamSlotNum, String sourceOfPieces, Boolean hasAllPieces, Boolean restricted, Integer offensiveSkillId, Integer defensiveSkillId) {
		super(MonsterForUser.MONSTER_FOR_USER);

		setValue(0, id);
		setValue(1, userId);
		setValue(2, monsterId);
		setValue(3, currentExperience);
		setValue(4, currentLevel);
		setValue(5, currentHealth);
		setValue(6, numPieces);
		setValue(7, isComplete);
		setValue(8, combineStartTime);
		setValue(9, teamSlotNum);
		setValue(10, sourceOfPieces);
		setValue(11, hasAllPieces);
		setValue(12, restricted);
		setValue(13, offensiveSkillId);
		setValue(14, defensiveSkillId);
	}
}
