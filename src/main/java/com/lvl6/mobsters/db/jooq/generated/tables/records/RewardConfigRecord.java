/**
 * This class is generated by jOOQ
 */
package com.lvl6.mobsters.db.jooq.generated.tables.records;


import com.lvl6.mobsters.db.jooq.generated.tables.RewardConfig;
import com.lvl6.mobsters.db.jooq.generated.tables.interfaces.IRewardConfig;

import javax.annotation.Generated;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.1"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(name = "reward_config", schema = "mobsters")
public class RewardConfigRecord extends UpdatableRecordImpl<RewardConfigRecord> implements Record4<Integer, Integer, String, Integer>, IRewardConfig {

	private static final long serialVersionUID = 742136251;

	/**
	 * Setter for <code>mobsters.reward_config.id</code>.
	 */
	@Override
	public RewardConfigRecord setId(Integer value) {
		setValue(0, value);
		return this;
	}

	/**
	 * Getter for <code>mobsters.reward_config.id</code>.
	 */
	@Id
	@Column(name = "id", unique = true, nullable = false, precision = 10)
	@NotNull
	@Override
	public Integer getId() {
		return (Integer) getValue(0);
	}

	/**
	 * Setter for <code>mobsters.reward_config.static_data_id</code>. refers to a row in some db table
	 */
	@Override
	public RewardConfigRecord setStaticDataId(Integer value) {
		setValue(1, value);
		return this;
	}

	/**
	 * Getter for <code>mobsters.reward_config.static_data_id</code>. refers to a row in some db table
	 */
	@Column(name = "static_data_id", precision = 10)
	@Override
	public Integer getStaticDataId() {
		return (Integer) getValue(1);
	}

	/**
	 * Setter for <code>mobsters.reward_config.type</code>. (refers to db table?)
	 */
	@Override
	public RewardConfigRecord setType(String value) {
		setValue(2, value);
		return this;
	}

	/**
	 * Getter for <code>mobsters.reward_config.type</code>. (refers to db table?)
	 */
	@Column(name = "type", length = 55)
	@Size(max = 55)
	@Override
	public String getType() {
		return (String) getValue(2);
	}

	/**
	 * Setter for <code>mobsters.reward_config.amt</code>. amount

	//NOTE: if RewardType is MONSTER, then amt is repurposed to:
	//amt = 0 means only one piece is given
	//amt > 0 means one monster with a lvl equal to 'amt' is given 
	 */
	@Override
	public RewardConfigRecord setAmt(Integer value) {
		setValue(3, value);
		return this;
	}

	/**
	 * Getter for <code>mobsters.reward_config.amt</code>. amount

	//NOTE: if RewardType is MONSTER, then amt is repurposed to:
	//amt = 0 means only one piece is given
	//amt > 0 means one monster with a lvl equal to 'amt' is given 
	 */
	@Column(name = "amt", precision = 10)
	@Override
	public Integer getAmt() {
		return (Integer) getValue(3);
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Record1<Integer> key() {
		return (Record1) super.key();
	}

	// -------------------------------------------------------------------------
	// Record4 type implementation
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row4<Integer, Integer, String, Integer> fieldsRow() {
		return (Row4) super.fieldsRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row4<Integer, Integer, String, Integer> valuesRow() {
		return (Row4) super.valuesRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field1() {
		return RewardConfig.REWARD_CONFIG.ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field2() {
		return RewardConfig.REWARD_CONFIG.STATIC_DATA_ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field3() {
		return RewardConfig.REWARD_CONFIG.TYPE;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field4() {
		return RewardConfig.REWARD_CONFIG.AMT;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value1() {
		return getId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value2() {
		return getStaticDataId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value3() {
		return getType();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value4() {
		return getAmt();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public RewardConfigRecord value1(Integer value) {
		setId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public RewardConfigRecord value2(Integer value) {
		setStaticDataId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public RewardConfigRecord value3(String value) {
		setType(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public RewardConfigRecord value4(Integer value) {
		setAmt(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public RewardConfigRecord values(Integer value1, Integer value2, String value3, Integer value4) {
		value1(value1);
		value2(value2);
		value3(value3);
		value4(value4);
		return this;
	}

	// -------------------------------------------------------------------------
	// FROM and INTO
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void from(IRewardConfig from) {
		setId(from.getId());
		setStaticDataId(from.getStaticDataId());
		setType(from.getType());
		setAmt(from.getAmt());
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public <E extends IRewardConfig> E into(E into) {
		into.from(this);
		return into;
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached RewardConfigRecord
	 */
	public RewardConfigRecord() {
		super(RewardConfig.REWARD_CONFIG);
	}

	/**
	 * Create a detached, initialised RewardConfigRecord
	 */
	public RewardConfigRecord(Integer id, Integer staticDataId, String type, Integer amt) {
		super(RewardConfig.REWARD_CONFIG);

		setValue(0, id);
		setValue(1, staticDataId);
		setValue(2, type);
		setValue(3, amt);
	}
}
