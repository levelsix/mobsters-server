/**
 * This class is generated by jOOQ
 */
package com.lvl6.mobsters.db.jooq.generated.tables.records;


import com.lvl6.mobsters.db.jooq.generated.tables.TournamentEventForUser;
import com.lvl6.mobsters.db.jooq.generated.tables.interfaces.ITournamentEventForUser;

import javax.annotation.Generated;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Record5;
import org.jooq.Row;
import org.jooq.Row5;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.1"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(name = "tournament_event_for_user", schema = "mobsters", uniqueConstraints = {
	@UniqueConstraint(columnNames = {"tournament_event_id", "user_id"})
})
public class TournamentEventForUserRecord extends UpdatableRecordImpl<TournamentEventForUserRecord> implements Record5<Integer, String, Integer, Integer, Integer>, ITournamentEventForUser {

	private static final long serialVersionUID = -691385323;

	/**
	 * Setter for <code>mobsters.tournament_event_for_user.tournament_event_id</code>.
	 */
	@Override
	public TournamentEventForUserRecord setTournamentEventId(Integer value) {
		setValue(0, value);
		return this;
	}

	/**
	 * Getter for <code>mobsters.tournament_event_for_user.tournament_event_id</code>.
	 */
	@Column(name = "tournament_event_id", nullable = false, precision = 10)
	@NotNull
	@Override
	public Integer getTournamentEventId() {
		return (Integer) getValue(0);
	}

	/**
	 * Setter for <code>mobsters.tournament_event_for_user.user_id</code>.
	 */
	@Override
	public TournamentEventForUserRecord setUserId(String value) {
		setValue(1, value);
		return this;
	}

	/**
	 * Getter for <code>mobsters.tournament_event_for_user.user_id</code>.
	 */
	@Column(name = "user_id", nullable = false, length = 36)
	@NotNull
	@Size(max = 36)
	@Override
	public String getUserId() {
		return (String) getValue(1);
	}

	/**
	 * Setter for <code>mobsters.tournament_event_for_user.battles_won</code>.
	 */
	@Override
	public TournamentEventForUserRecord setBattlesWon(Integer value) {
		setValue(2, value);
		return this;
	}

	/**
	 * Getter for <code>mobsters.tournament_event_for_user.battles_won</code>.
	 */
	@Column(name = "battles_won", precision = 10)
	@Override
	public Integer getBattlesWon() {
		return (Integer) getValue(2);
	}

	/**
	 * Setter for <code>mobsters.tournament_event_for_user.battles_lost</code>.
	 */
	@Override
	public TournamentEventForUserRecord setBattlesLost(Integer value) {
		setValue(3, value);
		return this;
	}

	/**
	 * Getter for <code>mobsters.tournament_event_for_user.battles_lost</code>.
	 */
	@Column(name = "battles_lost", precision = 10)
	@Override
	public Integer getBattlesLost() {
		return (Integer) getValue(3);
	}

	/**
	 * Setter for <code>mobsters.tournament_event_for_user.battles_fled</code>.
	 */
	@Override
	public TournamentEventForUserRecord setBattlesFled(Integer value) {
		setValue(4, value);
		return this;
	}

	/**
	 * Getter for <code>mobsters.tournament_event_for_user.battles_fled</code>.
	 */
	@Column(name = "battles_fled", precision = 10)
	@Override
	public Integer getBattlesFled() {
		return (Integer) getValue(4);
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Record2<Integer, String> key() {
		return (Record2) super.key();
	}

	// -------------------------------------------------------------------------
	// Record5 type implementation
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row5<Integer, String, Integer, Integer, Integer> fieldsRow() {
		return (Row5) super.fieldsRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row5<Integer, String, Integer, Integer, Integer> valuesRow() {
		return (Row5) super.valuesRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field1() {
		return TournamentEventForUser.TOURNAMENT_EVENT_FOR_USER.TOURNAMENT_EVENT_ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field2() {
		return TournamentEventForUser.TOURNAMENT_EVENT_FOR_USER.USER_ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field3() {
		return TournamentEventForUser.TOURNAMENT_EVENT_FOR_USER.BATTLES_WON;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field4() {
		return TournamentEventForUser.TOURNAMENT_EVENT_FOR_USER.BATTLES_LOST;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field5() {
		return TournamentEventForUser.TOURNAMENT_EVENT_FOR_USER.BATTLES_FLED;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value1() {
		return getTournamentEventId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value2() {
		return getUserId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value3() {
		return getBattlesWon();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value4() {
		return getBattlesLost();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value5() {
		return getBattlesFled();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public TournamentEventForUserRecord value1(Integer value) {
		setTournamentEventId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public TournamentEventForUserRecord value2(String value) {
		setUserId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public TournamentEventForUserRecord value3(Integer value) {
		setBattlesWon(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public TournamentEventForUserRecord value4(Integer value) {
		setBattlesLost(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public TournamentEventForUserRecord value5(Integer value) {
		setBattlesFled(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public TournamentEventForUserRecord values(Integer value1, String value2, Integer value3, Integer value4, Integer value5) {
		value1(value1);
		value2(value2);
		value3(value3);
		value4(value4);
		value5(value5);
		return this;
	}

	// -------------------------------------------------------------------------
	// FROM and INTO
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void from(ITournamentEventForUser from) {
		setTournamentEventId(from.getTournamentEventId());
		setUserId(from.getUserId());
		setBattlesWon(from.getBattlesWon());
		setBattlesLost(from.getBattlesLost());
		setBattlesFled(from.getBattlesFled());
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public <E extends ITournamentEventForUser> E into(E into) {
		into.from(this);
		return into;
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached TournamentEventForUserRecord
	 */
	public TournamentEventForUserRecord() {
		super(TournamentEventForUser.TOURNAMENT_EVENT_FOR_USER);
	}

	/**
	 * Create a detached, initialised TournamentEventForUserRecord
	 */
	public TournamentEventForUserRecord(Integer tournamentEventId, String userId, Integer battlesWon, Integer battlesLost, Integer battlesFled) {
		super(TournamentEventForUser.TOURNAMENT_EVENT_FOR_USER);

		setValue(0, tournamentEventId);
		setValue(1, userId);
		setValue(2, battlesWon);
		setValue(3, battlesLost);
		setValue(4, battlesFled);
	}
}
