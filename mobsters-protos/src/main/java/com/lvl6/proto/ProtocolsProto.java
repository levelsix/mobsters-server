// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocols.proto

package com.lvl6.proto;

public final class ProtocolsProto {
  private ProtocolsProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  /**
   * Protobuf enum {@code com.lvl6.proto.EventProtocolRequest}
   */
  public enum EventProtocolRequest
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>C_STARTUP_EVENT = 1;</code>
     */
    C_STARTUP_EVENT(0, 1),
    /**
     * <code>C_IN_APP_PURCHASE_EVENT = 2;</code>
     */
    C_IN_APP_PURCHASE_EVENT(1, 2),
    /**
     * <code>C_PURCHASE_NORM_STRUCTURE_EVENT = 3;</code>
     */
    C_PURCHASE_NORM_STRUCTURE_EVENT(2, 3),
    /**
     * <code>C_MOVE_OR_ROTATE_NORM_STRUCTURE_EVENT = 4;</code>
     */
    C_MOVE_OR_ROTATE_NORM_STRUCTURE_EVENT(3, 4),
    /**
     * <code>C_SET_FACEBOOK_ID_EVENT = 5;</code>
     */
    C_SET_FACEBOOK_ID_EVENT(4, 5),
    /**
     * <code>C_UPGRADE_NORM_STRUCTURE_EVENT = 6;</code>
     */
    C_UPGRADE_NORM_STRUCTURE_EVENT(5, 6),
    /**
     * <code>C_RETRIEVE_CURRENCY_FROM_NORM_STRUCTURE_EVENT = 7;</code>
     */
    C_RETRIEVE_CURRENCY_FROM_NORM_STRUCTURE_EVENT(6, 7),
    /**
     * <code>C_FINISH_NORM_STRUCT_WAITTIME_WITH_DIAMONDS_EVENT = 8;</code>
     */
    C_FINISH_NORM_STRUCT_WAITTIME_WITH_DIAMONDS_EVENT(7, 8),
    /**
     * <code>C_NORM_STRUCT_WAIT_COMPLETE_EVENT = 9;</code>
     */
    C_NORM_STRUCT_WAIT_COMPLETE_EVENT(8, 9),
    /**
     * <code>C_LOAD_PLAYER_CITY_EVENT = 10;</code>
     */
    C_LOAD_PLAYER_CITY_EVENT(9, 10),
    /**
     * <code>C_EXCHANGE_GEMS_FOR_RESOURCES_EVENT = 11;</code>
     */
    C_EXCHANGE_GEMS_FOR_RESOURCES_EVENT(10, 11),
    /**
     * <code>C_QUEST_ACCEPT_EVENT = 12;</code>
     */
    C_QUEST_ACCEPT_EVENT(11, 12),
    /**
     * <code>C_QUEST_PROGRESS_EVENT = 13;</code>
     */
    C_QUEST_PROGRESS_EVENT(12, 13),
    /**
     * <code>C_QUEST_REDEEM_EVENT = 14;</code>
     */
    C_QUEST_REDEEM_EVENT(13, 14),
    /**
     * <code>C_PURCHASE_CITY_EXPANSION_EVENT = 15;</code>
     */
    C_PURCHASE_CITY_EXPANSION_EVENT(14, 15),
    /**
     * <code>C_EXPANSION_WAIT_COMPLETE_EVENT = 16;</code>
     */
    C_EXPANSION_WAIT_COMPLETE_EVENT(15, 16),
    /**
     * <code>C_LEVEL_UP_EVENT = 17;</code>
     */
    C_LEVEL_UP_EVENT(16, 17),
    /**
     * <code>C_ENABLE_APNS_EVENT = 18;</code>
     */
    C_ENABLE_APNS_EVENT(17, 18),
    /**
     * <code>C_USER_CREATE_EVENT = 19;</code>
     */
    C_USER_CREATE_EVENT(18, 19),
    /**
     * <code>C_LOAD_CITY_EVENT = 20;</code>
     */
    C_LOAD_CITY_EVENT(19, 20),
    /**
     * <code>C_RETRIEVE_USERS_FOR_USER_IDS_EVENT = 21;</code>
     */
    C_RETRIEVE_USERS_FOR_USER_IDS_EVENT(20, 21),
    /**
     * <code>C_EARN_FREE_DIAMONDS_EVENT = 22;</code>
     */
    C_EARN_FREE_DIAMONDS_EVENT(21, 22),
    /**
     * <code>C_SEND_GROUP_CHAT_EVENT = 23;</code>
     */
    C_SEND_GROUP_CHAT_EVENT(22, 23),
    /**
     * <code>C_CREATE_CLAN_EVENT = 24;</code>
     */
    C_CREATE_CLAN_EVENT(23, 24),
    /**
     * <code>C_LEAVE_CLAN_EVENT = 25;</code>
     */
    C_LEAVE_CLAN_EVENT(24, 25),
    /**
     * <code>C_REQUEST_JOIN_CLAN_EVENT = 26;</code>
     */
    C_REQUEST_JOIN_CLAN_EVENT(25, 26),
    /**
     * <code>C_RETRACT_REQUEST_JOIN_CLAN_EVENT = 27;</code>
     */
    C_RETRACT_REQUEST_JOIN_CLAN_EVENT(26, 27),
    /**
     * <code>C_APPROVE_OR_REJECT_REQUEST_TO_JOIN_CLAN_EVENT = 28;</code>
     */
    C_APPROVE_OR_REJECT_REQUEST_TO_JOIN_CLAN_EVENT(27, 28),
    /**
     * <code>C_TRANSFER_CLAN_OWNERSHIP = 29;</code>
     */
    C_TRANSFER_CLAN_OWNERSHIP(28, 29),
    /**
     * <code>C_RETRIEVE_CLAN_INFO_EVENT = 30;</code>
     */
    C_RETRIEVE_CLAN_INFO_EVENT(29, 30),
    /**
     * <code>C_CHANGE_CLAN_SETTINGS_EVENT = 31;</code>
     *
     * <pre>
     *C_CHANGE_CLAN_DESCRIPTION_EVENT = 31;
     * </pre>
     */
    C_CHANGE_CLAN_SETTINGS_EVENT(30, 31),
    /**
     * <code>C_BOOT_PLAYER_FROM_CLAN_EVENT = 32;</code>
     */
    C_BOOT_PLAYER_FROM_CLAN_EVENT(31, 32),
    /**
     * <code>C_PICK_LOCK_BOX_EVENT = 33;</code>
     */
    C_PICK_LOCK_BOX_EVENT(32, 33),
    /**
     * <code>C_RETRIEVE_TOURNAMENT_RANKINGS_EVENT = 34;</code>
     */
    C_RETRIEVE_TOURNAMENT_RANKINGS_EVENT(33, 34),
    /**
     * <code>C_SUBMIT_MONSTER_ENHANCEMENT_EVENT = 35;</code>
     */
    C_SUBMIT_MONSTER_ENHANCEMENT_EVENT(34, 35),
    /**
     * <code>C_EVOLVE_MONSTER_EVENT = 36;</code>
     */
    C_EVOLVE_MONSTER_EVENT(35, 36),
    /**
     * <code>C_PURCHASE_BOOSTER_PACK_EVENT = 37;</code>
     */
    C_PURCHASE_BOOSTER_PACK_EVENT(36, 37),
    /**
     * <code>C_EVOLUTION_FINISHED_EVENT = 38;</code>
     */
    C_EVOLUTION_FINISHED_EVENT(37, 38),
    /**
     * <code>C_ACHIEVEMENT_PROGRESS_EVENT = 39;</code>
     *
     * <pre>
     *C_CHANGE_CLAN_JOIN_TYPE_EVENT = 39;
     * </pre>
     */
    C_ACHIEVEMENT_PROGRESS_EVENT(38, 39),
    /**
     * <code>C_PRIVATE_CHAT_POST_EVENT = 40;</code>
     */
    C_PRIVATE_CHAT_POST_EVENT(39, 40),
    /**
     * <code>C_RETRIEVE_PRIVATE_CHAT_POST_EVENT = 41;</code>
     */
    C_RETRIEVE_PRIVATE_CHAT_POST_EVENT(40, 41),
    /**
     * <code>C_REDEEM_USER_LOCK_BOX_ITEMS_EVENT = 42;</code>
     */
    C_REDEEM_USER_LOCK_BOX_ITEMS_EVENT(41, 42),
    /**
     * <code>C_BEGIN_DUNGEON_EVENT = 43;</code>
     */
    C_BEGIN_DUNGEON_EVENT(42, 43),
    /**
     * <code>C_END_DUNGEON_EVENT = 44;</code>
     */
    C_END_DUNGEON_EVENT(43, 44),
    /**
     * <code>C_REVIVE_IN_DUNGEON_EVENT = 45;</code>
     */
    C_REVIVE_IN_DUNGEON_EVENT(44, 45),
    /**
     * <code>C_QUEUE_UP_EVENT = 46;</code>
     */
    C_QUEUE_UP_EVENT(45, 46),
    /**
     * <code>C_UPDATE_MONSTER_HEALTH_EVENT = 47;</code>
     */
    C_UPDATE_MONSTER_HEALTH_EVENT(46, 47),
    /**
     * <code>C_HEAL_MONSTER_EVENT = 48;</code>
     */
    C_HEAL_MONSTER_EVENT(47, 48),
    /**
     * <code>C_ACHIEVEMENT_REDEEM_EVENT = 49;</code>
     *
     * <pre>
     *C_HEAL_MONSTER_WAIT_TIME_COMPLETE_EVENT = 49;
     * </pre>
     */
    C_ACHIEVEMENT_REDEEM_EVENT(48, 49),
    /**
     * <code>C_ADD_MONSTER_TO_BATTLE_TEAM_EVENT = 50;</code>
     */
    C_ADD_MONSTER_TO_BATTLE_TEAM_EVENT(49, 50),
    /**
     * <code>C_REMOVE_MONSTER_FROM_BATTLE_TEAM_EVENT = 51;</code>
     */
    C_REMOVE_MONSTER_FROM_BATTLE_TEAM_EVENT(50, 51),
    /**
     * <code>C_INCREASE_MONSTER_INVENTORY_SLOT_EVENT = 52;</code>
     */
    C_INCREASE_MONSTER_INVENTORY_SLOT_EVENT(51, 52),
    /**
     * <code>C_ENHANCEMENT_WAIT_TIME_COMPLETE_EVENT = 53;</code>
     */
    C_ENHANCEMENT_WAIT_TIME_COMPLETE_EVENT(52, 53),
    /**
     * <code>C_COMBINE_USER_MONSTER_PIECES_EVENT = 54;</code>
     */
    C_COMBINE_USER_MONSTER_PIECES_EVENT(53, 54),
    /**
     * <code>C_SELL_USER_MONSTER_EVENT = 55;</code>
     */
    C_SELL_USER_MONSTER_EVENT(54, 55),
    /**
     * <code>C_INVITE_FB_FRIENDS_FOR_SLOTS_EVENT = 56;</code>
     */
    C_INVITE_FB_FRIENDS_FOR_SLOTS_EVENT(55, 56),
    /**
     * <code>C_ACCEPT_AND_REJECT_FB_INVITE_FOR_SLOTS_EVENT = 57;</code>
     */
    C_ACCEPT_AND_REJECT_FB_INVITE_FOR_SLOTS_EVENT(56, 57),
    /**
     * <code>C_UPDATE_USER_CURRENCY_EVENT = 59;</code>
     */
    C_UPDATE_USER_CURRENCY_EVENT(57, 59),
    /**
     * <code>C_BEGIN_PVP_BATTLE_EVENT = 60;</code>
     */
    C_BEGIN_PVP_BATTLE_EVENT(58, 60),
    /**
     * <code>C_END_PVP_BATTLE_EVENT = 61;</code>
     */
    C_END_PVP_BATTLE_EVENT(59, 61),
    /**
     * <code>C_BEGIN_CLAN_RAID_EVENT = 62;</code>
     */
    C_BEGIN_CLAN_RAID_EVENT(60, 62),
    /**
     * <code>C_ATTACK_CLAN_RAID_MONSTER_EVENT = 63;</code>
     */
    C_ATTACK_CLAN_RAID_MONSTER_EVENT(61, 63),
    /**
     * <code>C_RECORD_CLAN_RAID_STATS_EVENT = 64;</code>
     */
    C_RECORD_CLAN_RAID_STATS_EVENT(62, 64),
    /**
     * <code>C_PROMOTE_DEMOTE_CLAN_MEMBER_EVENT = 65;</code>
     */
    C_PROMOTE_DEMOTE_CLAN_MEMBER_EVENT(63, 65),
    /**
     * <code>C_SET_GAME_CENTER_ID_EVENT = 66;</code>
     */
    C_SET_GAME_CENTER_ID_EVENT(64, 66),
    /**
     * <code>C_SPAWN_OBSTACLE_EVENT = 67;</code>
     */
    C_SPAWN_OBSTACLE_EVENT(65, 67),
    /**
     * <code>C_BEGIN_OBSTACLE_REMOVAL_EVENT = 68;</code>
     */
    C_BEGIN_OBSTACLE_REMOVAL_EVENT(66, 68),
    /**
     * <code>C_OBSTACLE_REMOVAL_COMPLETE_EVENT = 69;</code>
     */
    C_OBSTACLE_REMOVAL_COMPLETE_EVENT(67, 69),
    /**
     * <code>C_SPAWN_MINI_JOB_EVENT = 70;</code>
     */
    C_SPAWN_MINI_JOB_EVENT(68, 70),
    /**
     * <code>C_BEGIN_MINI_JOB_EVENT = 71;</code>
     */
    C_BEGIN_MINI_JOB_EVENT(69, 71),
    /**
     * <code>C_COMPLETE_MINI_JOB_EVENT = 72;</code>
     */
    C_COMPLETE_MINI_JOB_EVENT(70, 72),
    /**
     * <code>C_REDEEM_MINI_JOB_EVENT = 73;</code>
     */
    C_REDEEM_MINI_JOB_EVENT(71, 73),
    /**
     * <code>C_SET_AVATAR_MONSTER_EVENT = 74;</code>
     */
    C_SET_AVATAR_MONSTER_EVENT(72, 74),
    /**
     * <code>C_RESTRICT_USER_MONSTER_EVENT = 75;</code>
     */
    C_RESTRICT_USER_MONSTER_EVENT(73, 75),
    /**
     * <code>C_UNRESTRICT_USER_MONSTER_EVENT = 76;</code>
     */
    C_UNRESTRICT_USER_MONSTER_EVENT(74, 76),
    /**
     * <code>C_ENHANCE_MONSTER_EVENT = 77;</code>
     */
    C_ENHANCE_MONSTER_EVENT(75, 77),
    /**
     * <code>C_TRADE_ITEM_FOR_BOOSTER_EVENT = 78;</code>
     */
    C_TRADE_ITEM_FOR_BOOSTER_EVENT(76, 78),
    /**
     * <code>C_SOLICIT_CLAN_HELP_EVENT = 79;</code>
     */
    C_SOLICIT_CLAN_HELP_EVENT(77, 79),
    /**
     * <code>C_GIVE_CLAN_HELP_EVENT = 80;</code>
     */
    C_GIVE_CLAN_HELP_EVENT(78, 80),
    /**
     * <code>C_END_CLAN_HELP_EVENT = 81;</code>
     */
    C_END_CLAN_HELP_EVENT(79, 81),
    /**
     * <code>C_INVITE_TO_CLAN_EVENT = 82;</code>
     */
    C_INVITE_TO_CLAN_EVENT(80, 82),
    /**
     * <code>C_ACCEPT_OR_REJECT_CLAN_INVITE_EVENT = 83;</code>
     */
    C_ACCEPT_OR_REJECT_CLAN_INVITE_EVENT(81, 83),
    /**
     * <code>C_COLLECT_MONSTER_ENHANCEMENT_EVENT = 84;</code>
     */
    C_COLLECT_MONSTER_ENHANCEMENT_EVENT(82, 84),
    /**
     * <code>C_TRADE_ITEM_FOR_SPEED_UPS_EVENT = 85;</code>
     */
    C_TRADE_ITEM_FOR_SPEED_UPS_EVENT(83, 85),
    /**
     * <code>C_REMOVE_USER_ITEM_USED_EVENT = 86;</code>
     */
    C_REMOVE_USER_ITEM_USED_EVENT(84, 86),
    /**
     * <code>C_TRADE_ITEM_FOR_RESOURCES_EVENT = 87;</code>
     */
    C_TRADE_ITEM_FOR_RESOURCES_EVENT(85, 87),
    /**
     * <code>C_REDEEM_SECRET_GIFT_EVENT = 88;</code>
     */
    C_REDEEM_SECRET_GIFT_EVENT(86, 88),
    /**
     * <code>C_SET_DEFENDING_MSG_EVENT = 89;</code>
     */
    C_SET_DEFENDING_MSG_EVENT(87, 89),
    /**
     * <code>C_BEGIN_CLAN_AVENGING_EVENT = 90;</code>
     */
    C_BEGIN_CLAN_AVENGING_EVENT(88, 90),
    /**
     * <code>C_END_CLAN_AVENGING_EVENT = 91;</code>
     */
    C_END_CLAN_AVENGING_EVENT(89, 91),
    /**
     * <code>C_AVENGE_CLAN_MATE_EVENT = 92;</code>
     */
    C_AVENGE_CLAN_MATE_EVENT(90, 92),
    /**
     * <code>C_UPDATE_CLIENT_TASK_STATE_EVENT = 93;</code>
     */
    C_UPDATE_CLIENT_TASK_STATE_EVENT(91, 93),
    /**
     * <code>C_SOLICIT_TEAM_DONATION_EVENT = 94;</code>
     */
    C_SOLICIT_TEAM_DONATION_EVENT(92, 94),
    /**
     * <code>C_FULFILL_TEAM_DONATION_SOLICITATION_EVENT = 95;</code>
     */
    C_FULFILL_TEAM_DONATION_SOLICITATION_EVENT(93, 95),
    /**
     * <code>C_VOID_TEAM_DONATION_SOLICITATION_EVENT = 96;</code>
     */
    C_VOID_TEAM_DONATION_SOLICITATION_EVENT(94, 96),
    /**
     * <code>C_RETRIEVE_USER_MONSTER_TEAM_EVENT = 97;</code>
     */
    C_RETRIEVE_USER_MONSTER_TEAM_EVENT(95, 97),
    /**
     * <code>C_DESTROY_MONEY_TREE_STRUCTURE_EVENT = 98;</code>
     */
    C_DESTROY_MONEY_TREE_STRUCTURE_EVENT(96, 98),
    /**
     * <code>C_LOGOUT_EVENT = 101;</code>
     *
     * <pre>
     *STOP AT 99, SKIP TO 200
     * </pre>
     */
    C_LOGOUT_EVENT(97, 101),
    /**
     * <code>C_DEV_EVENT = 200;</code>
     */
    C_DEV_EVENT(98, 200),
    /**
     * <code>C_PERFORM_RESEARCH_EVENT = 201;</code>
     */
    C_PERFORM_RESEARCH_EVENT(99, 201),
    /**
     * <code>C_FINISH_PERFORMING_RESEARCH_EVENT = 202;</code>
     */
    C_FINISH_PERFORMING_RESEARCH_EVENT(100, 202),
    /**
     * <code>C_CUSTOMIZE_PVP_BOARD_OBSTACLE_EVENT = 203;</code>
     */
    C_CUSTOMIZE_PVP_BOARD_OBSTACLE_EVENT(101, 203),
    /**
     * <code>C_CREATE_BATTLE_ITEM_EVENT = 204;</code>
     */
    C_CREATE_BATTLE_ITEM_EVENT(102, 204),
    /**
     * <code>C_DISCARD_BATTLE_ITEM_EVENT = 205;</code>
     */
    C_DISCARD_BATTLE_ITEM_EVENT(103, 205),
    /**
     * <code>C_COMPLETE_BATTLE_ITEM_EVENT = 206;</code>
     */
    C_COMPLETE_BATTLE_ITEM_EVENT(104, 206),
    /**
     * <code>C_REDEEM_MINI_EVENT_REWARD_EVENT = 207;</code>
     */
    C_REDEEM_MINI_EVENT_REWARD_EVENT(105, 207),
    /**
     * <code>C_RETRIEVE_MINI_EVENT_EVENT = 208;</code>
     */
    C_RETRIEVE_MINI_EVENT_EVENT(106, 208),
    /**
     * <code>C_UPDATE_MINI_EVENT_EVENT = 209;</code>
     */
    C_UPDATE_MINI_EVENT_EVENT(107, 209),
    /**
     * <code>C_TRANSLATE_SELECT_MESSAGES_EVENT = 210;</code>
     */
    C_TRANSLATE_SELECT_MESSAGES_EVENT(108, 210),
    /**
     * <code>C_UPDATE_USER_STRENGTH_EVENT = 211;</code>
     */
    C_UPDATE_USER_STRENGTH_EVENT(109, 211),
    /**
     * <code>C_REFRESH_MINI_JOB_EVENT = 212;</code>
     */
    C_REFRESH_MINI_JOB_EVENT(110, 212),
    /**
     * <code>C_SET_TANGO_ID_EVENT = 213;</code>
     */
    C_SET_TANGO_ID_EVENT(111, 213),
    /**
     * <code>C_SEND_TANGO_GIFT_EVENT = 214;</code>
     */
    C_SEND_TANGO_GIFT_EVENT(112, 214),
    /**
     * <code>C_DELETE_GIFT_EVENT = 215;</code>
     */
    C_DELETE_GIFT_EVENT(113, 215),
    /**
     * <code>C_COLLECT_GIFT_EVENT = 216;</code>
     */
    C_COLLECT_GIFT_EVENT(114, 216),
    /**
     * <code>C_RETRIEVE_BATTLE_REPLAY_EVENT = 217;</code>
     */
    C_RETRIEVE_BATTLE_REPLAY_EVENT(115, 217),
    /**
     * <code>C_RETRIEVE_STRENGTH_LEADER_BOARD_EVENT = 503;</code>
     *
     * <pre>
     *C_COLLECT_CLAN_GIFTS_EVENT = 500;
     *C_DELETE_CLAN_GIFTS_EVENT = 501;
     *C_RECEIVED_CLAN_GIFTS_EVENT = 502;
     * </pre>
     */
    C_RETRIEVE_STRENGTH_LEADER_BOARD_EVENT(116, 503),
    /**
     * <code>C_PURCHASE_ITEMS_WITH_GEMS_EVENT = 504;</code>
     */
    C_PURCHASE_ITEMS_WITH_GEMS_EVENT(117, 504),
    /**
     * <code>C_RECONNECT_EVENT = 505;</code>
     */
    C_RECONNECT_EVENT(118, 505),
    /**
     * <code>C_RETRIEVE_MINI_EVENT_LEADER_BOARD_EVENT = 506;</code>
     */
    C_RETRIEVE_MINI_EVENT_LEADER_BOARD_EVENT(119, 506),
    ;

    /**
     * <code>C_STARTUP_EVENT = 1;</code>
     */
    public static final int C_STARTUP_EVENT_VALUE = 1;
    /**
     * <code>C_IN_APP_PURCHASE_EVENT = 2;</code>
     */
    public static final int C_IN_APP_PURCHASE_EVENT_VALUE = 2;
    /**
     * <code>C_PURCHASE_NORM_STRUCTURE_EVENT = 3;</code>
     */
    public static final int C_PURCHASE_NORM_STRUCTURE_EVENT_VALUE = 3;
    /**
     * <code>C_MOVE_OR_ROTATE_NORM_STRUCTURE_EVENT = 4;</code>
     */
    public static final int C_MOVE_OR_ROTATE_NORM_STRUCTURE_EVENT_VALUE = 4;
    /**
     * <code>C_SET_FACEBOOK_ID_EVENT = 5;</code>
     */
    public static final int C_SET_FACEBOOK_ID_EVENT_VALUE = 5;
    /**
     * <code>C_UPGRADE_NORM_STRUCTURE_EVENT = 6;</code>
     */
    public static final int C_UPGRADE_NORM_STRUCTURE_EVENT_VALUE = 6;
    /**
     * <code>C_RETRIEVE_CURRENCY_FROM_NORM_STRUCTURE_EVENT = 7;</code>
     */
    public static final int C_RETRIEVE_CURRENCY_FROM_NORM_STRUCTURE_EVENT_VALUE = 7;
    /**
     * <code>C_FINISH_NORM_STRUCT_WAITTIME_WITH_DIAMONDS_EVENT = 8;</code>
     */
    public static final int C_FINISH_NORM_STRUCT_WAITTIME_WITH_DIAMONDS_EVENT_VALUE = 8;
    /**
     * <code>C_NORM_STRUCT_WAIT_COMPLETE_EVENT = 9;</code>
     */
    public static final int C_NORM_STRUCT_WAIT_COMPLETE_EVENT_VALUE = 9;
    /**
     * <code>C_LOAD_PLAYER_CITY_EVENT = 10;</code>
     */
    public static final int C_LOAD_PLAYER_CITY_EVENT_VALUE = 10;
    /**
     * <code>C_EXCHANGE_GEMS_FOR_RESOURCES_EVENT = 11;</code>
     */
    public static final int C_EXCHANGE_GEMS_FOR_RESOURCES_EVENT_VALUE = 11;
    /**
     * <code>C_QUEST_ACCEPT_EVENT = 12;</code>
     */
    public static final int C_QUEST_ACCEPT_EVENT_VALUE = 12;
    /**
     * <code>C_QUEST_PROGRESS_EVENT = 13;</code>
     */
    public static final int C_QUEST_PROGRESS_EVENT_VALUE = 13;
    /**
     * <code>C_QUEST_REDEEM_EVENT = 14;</code>
     */
    public static final int C_QUEST_REDEEM_EVENT_VALUE = 14;
    /**
     * <code>C_PURCHASE_CITY_EXPANSION_EVENT = 15;</code>
     */
    public static final int C_PURCHASE_CITY_EXPANSION_EVENT_VALUE = 15;
    /**
     * <code>C_EXPANSION_WAIT_COMPLETE_EVENT = 16;</code>
     */
    public static final int C_EXPANSION_WAIT_COMPLETE_EVENT_VALUE = 16;
    /**
     * <code>C_LEVEL_UP_EVENT = 17;</code>
     */
    public static final int C_LEVEL_UP_EVENT_VALUE = 17;
    /**
     * <code>C_ENABLE_APNS_EVENT = 18;</code>
     */
    public static final int C_ENABLE_APNS_EVENT_VALUE = 18;
    /**
     * <code>C_USER_CREATE_EVENT = 19;</code>
     */
    public static final int C_USER_CREATE_EVENT_VALUE = 19;
    /**
     * <code>C_LOAD_CITY_EVENT = 20;</code>
     */
    public static final int C_LOAD_CITY_EVENT_VALUE = 20;
    /**
     * <code>C_RETRIEVE_USERS_FOR_USER_IDS_EVENT = 21;</code>
     */
    public static final int C_RETRIEVE_USERS_FOR_USER_IDS_EVENT_VALUE = 21;
    /**
     * <code>C_EARN_FREE_DIAMONDS_EVENT = 22;</code>
     */
    public static final int C_EARN_FREE_DIAMONDS_EVENT_VALUE = 22;
    /**
     * <code>C_SEND_GROUP_CHAT_EVENT = 23;</code>
     */
    public static final int C_SEND_GROUP_CHAT_EVENT_VALUE = 23;
    /**
     * <code>C_CREATE_CLAN_EVENT = 24;</code>
     */
    public static final int C_CREATE_CLAN_EVENT_VALUE = 24;
    /**
     * <code>C_LEAVE_CLAN_EVENT = 25;</code>
     */
    public static final int C_LEAVE_CLAN_EVENT_VALUE = 25;
    /**
     * <code>C_REQUEST_JOIN_CLAN_EVENT = 26;</code>
     */
    public static final int C_REQUEST_JOIN_CLAN_EVENT_VALUE = 26;
    /**
     * <code>C_RETRACT_REQUEST_JOIN_CLAN_EVENT = 27;</code>
     */
    public static final int C_RETRACT_REQUEST_JOIN_CLAN_EVENT_VALUE = 27;
    /**
     * <code>C_APPROVE_OR_REJECT_REQUEST_TO_JOIN_CLAN_EVENT = 28;</code>
     */
    public static final int C_APPROVE_OR_REJECT_REQUEST_TO_JOIN_CLAN_EVENT_VALUE = 28;
    /**
     * <code>C_TRANSFER_CLAN_OWNERSHIP = 29;</code>
     */
    public static final int C_TRANSFER_CLAN_OWNERSHIP_VALUE = 29;
    /**
     * <code>C_RETRIEVE_CLAN_INFO_EVENT = 30;</code>
     */
    public static final int C_RETRIEVE_CLAN_INFO_EVENT_VALUE = 30;
    /**
     * <code>C_CHANGE_CLAN_SETTINGS_EVENT = 31;</code>
     *
     * <pre>
     *C_CHANGE_CLAN_DESCRIPTION_EVENT = 31;
     * </pre>
     */
    public static final int C_CHANGE_CLAN_SETTINGS_EVENT_VALUE = 31;
    /**
     * <code>C_BOOT_PLAYER_FROM_CLAN_EVENT = 32;</code>
     */
    public static final int C_BOOT_PLAYER_FROM_CLAN_EVENT_VALUE = 32;
    /**
     * <code>C_PICK_LOCK_BOX_EVENT = 33;</code>
     */
    public static final int C_PICK_LOCK_BOX_EVENT_VALUE = 33;
    /**
     * <code>C_RETRIEVE_TOURNAMENT_RANKINGS_EVENT = 34;</code>
     */
    public static final int C_RETRIEVE_TOURNAMENT_RANKINGS_EVENT_VALUE = 34;
    /**
     * <code>C_SUBMIT_MONSTER_ENHANCEMENT_EVENT = 35;</code>
     */
    public static final int C_SUBMIT_MONSTER_ENHANCEMENT_EVENT_VALUE = 35;
    /**
     * <code>C_EVOLVE_MONSTER_EVENT = 36;</code>
     */
    public static final int C_EVOLVE_MONSTER_EVENT_VALUE = 36;
    /**
     * <code>C_PURCHASE_BOOSTER_PACK_EVENT = 37;</code>
     */
    public static final int C_PURCHASE_BOOSTER_PACK_EVENT_VALUE = 37;
    /**
     * <code>C_EVOLUTION_FINISHED_EVENT = 38;</code>
     */
    public static final int C_EVOLUTION_FINISHED_EVENT_VALUE = 38;
    /**
     * <code>C_ACHIEVEMENT_PROGRESS_EVENT = 39;</code>
     *
     * <pre>
     *C_CHANGE_CLAN_JOIN_TYPE_EVENT = 39;
     * </pre>
     */
    public static final int C_ACHIEVEMENT_PROGRESS_EVENT_VALUE = 39;
    /**
     * <code>C_PRIVATE_CHAT_POST_EVENT = 40;</code>
     */
    public static final int C_PRIVATE_CHAT_POST_EVENT_VALUE = 40;
    /**
     * <code>C_RETRIEVE_PRIVATE_CHAT_POST_EVENT = 41;</code>
     */
    public static final int C_RETRIEVE_PRIVATE_CHAT_POST_EVENT_VALUE = 41;
    /**
     * <code>C_REDEEM_USER_LOCK_BOX_ITEMS_EVENT = 42;</code>
     */
    public static final int C_REDEEM_USER_LOCK_BOX_ITEMS_EVENT_VALUE = 42;
    /**
     * <code>C_BEGIN_DUNGEON_EVENT = 43;</code>
     */
    public static final int C_BEGIN_DUNGEON_EVENT_VALUE = 43;
    /**
     * <code>C_END_DUNGEON_EVENT = 44;</code>
     */
    public static final int C_END_DUNGEON_EVENT_VALUE = 44;
    /**
     * <code>C_REVIVE_IN_DUNGEON_EVENT = 45;</code>
     */
    public static final int C_REVIVE_IN_DUNGEON_EVENT_VALUE = 45;
    /**
     * <code>C_QUEUE_UP_EVENT = 46;</code>
     */
    public static final int C_QUEUE_UP_EVENT_VALUE = 46;
    /**
     * <code>C_UPDATE_MONSTER_HEALTH_EVENT = 47;</code>
     */
    public static final int C_UPDATE_MONSTER_HEALTH_EVENT_VALUE = 47;
    /**
     * <code>C_HEAL_MONSTER_EVENT = 48;</code>
     */
    public static final int C_HEAL_MONSTER_EVENT_VALUE = 48;
    /**
     * <code>C_ACHIEVEMENT_REDEEM_EVENT = 49;</code>
     *
     * <pre>
     *C_HEAL_MONSTER_WAIT_TIME_COMPLETE_EVENT = 49;
     * </pre>
     */
    public static final int C_ACHIEVEMENT_REDEEM_EVENT_VALUE = 49;
    /**
     * <code>C_ADD_MONSTER_TO_BATTLE_TEAM_EVENT = 50;</code>
     */
    public static final int C_ADD_MONSTER_TO_BATTLE_TEAM_EVENT_VALUE = 50;
    /**
     * <code>C_REMOVE_MONSTER_FROM_BATTLE_TEAM_EVENT = 51;</code>
     */
    public static final int C_REMOVE_MONSTER_FROM_BATTLE_TEAM_EVENT_VALUE = 51;
    /**
     * <code>C_INCREASE_MONSTER_INVENTORY_SLOT_EVENT = 52;</code>
     */
    public static final int C_INCREASE_MONSTER_INVENTORY_SLOT_EVENT_VALUE = 52;
    /**
     * <code>C_ENHANCEMENT_WAIT_TIME_COMPLETE_EVENT = 53;</code>
     */
    public static final int C_ENHANCEMENT_WAIT_TIME_COMPLETE_EVENT_VALUE = 53;
    /**
     * <code>C_COMBINE_USER_MONSTER_PIECES_EVENT = 54;</code>
     */
    public static final int C_COMBINE_USER_MONSTER_PIECES_EVENT_VALUE = 54;
    /**
     * <code>C_SELL_USER_MONSTER_EVENT = 55;</code>
     */
    public static final int C_SELL_USER_MONSTER_EVENT_VALUE = 55;
    /**
     * <code>C_INVITE_FB_FRIENDS_FOR_SLOTS_EVENT = 56;</code>
     */
    public static final int C_INVITE_FB_FRIENDS_FOR_SLOTS_EVENT_VALUE = 56;
    /**
     * <code>C_ACCEPT_AND_REJECT_FB_INVITE_FOR_SLOTS_EVENT = 57;</code>
     */
    public static final int C_ACCEPT_AND_REJECT_FB_INVITE_FOR_SLOTS_EVENT_VALUE = 57;
    /**
     * <code>C_UPDATE_USER_CURRENCY_EVENT = 59;</code>
     */
    public static final int C_UPDATE_USER_CURRENCY_EVENT_VALUE = 59;
    /**
     * <code>C_BEGIN_PVP_BATTLE_EVENT = 60;</code>
     */
    public static final int C_BEGIN_PVP_BATTLE_EVENT_VALUE = 60;
    /**
     * <code>C_END_PVP_BATTLE_EVENT = 61;</code>
     */
    public static final int C_END_PVP_BATTLE_EVENT_VALUE = 61;
    /**
     * <code>C_BEGIN_CLAN_RAID_EVENT = 62;</code>
     */
    public static final int C_BEGIN_CLAN_RAID_EVENT_VALUE = 62;
    /**
     * <code>C_ATTACK_CLAN_RAID_MONSTER_EVENT = 63;</code>
     */
    public static final int C_ATTACK_CLAN_RAID_MONSTER_EVENT_VALUE = 63;
    /**
     * <code>C_RECORD_CLAN_RAID_STATS_EVENT = 64;</code>
     */
    public static final int C_RECORD_CLAN_RAID_STATS_EVENT_VALUE = 64;
    /**
     * <code>C_PROMOTE_DEMOTE_CLAN_MEMBER_EVENT = 65;</code>
     */
    public static final int C_PROMOTE_DEMOTE_CLAN_MEMBER_EVENT_VALUE = 65;
    /**
     * <code>C_SET_GAME_CENTER_ID_EVENT = 66;</code>
     */
    public static final int C_SET_GAME_CENTER_ID_EVENT_VALUE = 66;
    /**
     * <code>C_SPAWN_OBSTACLE_EVENT = 67;</code>
     */
    public static final int C_SPAWN_OBSTACLE_EVENT_VALUE = 67;
    /**
     * <code>C_BEGIN_OBSTACLE_REMOVAL_EVENT = 68;</code>
     */
    public static final int C_BEGIN_OBSTACLE_REMOVAL_EVENT_VALUE = 68;
    /**
     * <code>C_OBSTACLE_REMOVAL_COMPLETE_EVENT = 69;</code>
     */
    public static final int C_OBSTACLE_REMOVAL_COMPLETE_EVENT_VALUE = 69;
    /**
     * <code>C_SPAWN_MINI_JOB_EVENT = 70;</code>
     */
    public static final int C_SPAWN_MINI_JOB_EVENT_VALUE = 70;
    /**
     * <code>C_BEGIN_MINI_JOB_EVENT = 71;</code>
     */
    public static final int C_BEGIN_MINI_JOB_EVENT_VALUE = 71;
    /**
     * <code>C_COMPLETE_MINI_JOB_EVENT = 72;</code>
     */
    public static final int C_COMPLETE_MINI_JOB_EVENT_VALUE = 72;
    /**
     * <code>C_REDEEM_MINI_JOB_EVENT = 73;</code>
     */
    public static final int C_REDEEM_MINI_JOB_EVENT_VALUE = 73;
    /**
     * <code>C_SET_AVATAR_MONSTER_EVENT = 74;</code>
     */
    public static final int C_SET_AVATAR_MONSTER_EVENT_VALUE = 74;
    /**
     * <code>C_RESTRICT_USER_MONSTER_EVENT = 75;</code>
     */
    public static final int C_RESTRICT_USER_MONSTER_EVENT_VALUE = 75;
    /**
     * <code>C_UNRESTRICT_USER_MONSTER_EVENT = 76;</code>
     */
    public static final int C_UNRESTRICT_USER_MONSTER_EVENT_VALUE = 76;
    /**
     * <code>C_ENHANCE_MONSTER_EVENT = 77;</code>
     */
    public static final int C_ENHANCE_MONSTER_EVENT_VALUE = 77;
    /**
     * <code>C_TRADE_ITEM_FOR_BOOSTER_EVENT = 78;</code>
     */
    public static final int C_TRADE_ITEM_FOR_BOOSTER_EVENT_VALUE = 78;
    /**
     * <code>C_SOLICIT_CLAN_HELP_EVENT = 79;</code>
     */
    public static final int C_SOLICIT_CLAN_HELP_EVENT_VALUE = 79;
    /**
     * <code>C_GIVE_CLAN_HELP_EVENT = 80;</code>
     */
    public static final int C_GIVE_CLAN_HELP_EVENT_VALUE = 80;
    /**
     * <code>C_END_CLAN_HELP_EVENT = 81;</code>
     */
    public static final int C_END_CLAN_HELP_EVENT_VALUE = 81;
    /**
     * <code>C_INVITE_TO_CLAN_EVENT = 82;</code>
     */
    public static final int C_INVITE_TO_CLAN_EVENT_VALUE = 82;
    /**
     * <code>C_ACCEPT_OR_REJECT_CLAN_INVITE_EVENT = 83;</code>
     */
    public static final int C_ACCEPT_OR_REJECT_CLAN_INVITE_EVENT_VALUE = 83;
    /**
     * <code>C_COLLECT_MONSTER_ENHANCEMENT_EVENT = 84;</code>
     */
    public static final int C_COLLECT_MONSTER_ENHANCEMENT_EVENT_VALUE = 84;
    /**
     * <code>C_TRADE_ITEM_FOR_SPEED_UPS_EVENT = 85;</code>
     */
    public static final int C_TRADE_ITEM_FOR_SPEED_UPS_EVENT_VALUE = 85;
    /**
     * <code>C_REMOVE_USER_ITEM_USED_EVENT = 86;</code>
     */
    public static final int C_REMOVE_USER_ITEM_USED_EVENT_VALUE = 86;
    /**
     * <code>C_TRADE_ITEM_FOR_RESOURCES_EVENT = 87;</code>
     */
    public static final int C_TRADE_ITEM_FOR_RESOURCES_EVENT_VALUE = 87;
    /**
     * <code>C_REDEEM_SECRET_GIFT_EVENT = 88;</code>
     */
    public static final int C_REDEEM_SECRET_GIFT_EVENT_VALUE = 88;
    /**
     * <code>C_SET_DEFENDING_MSG_EVENT = 89;</code>
     */
    public static final int C_SET_DEFENDING_MSG_EVENT_VALUE = 89;
    /**
     * <code>C_BEGIN_CLAN_AVENGING_EVENT = 90;</code>
     */
    public static final int C_BEGIN_CLAN_AVENGING_EVENT_VALUE = 90;
    /**
     * <code>C_END_CLAN_AVENGING_EVENT = 91;</code>
     */
    public static final int C_END_CLAN_AVENGING_EVENT_VALUE = 91;
    /**
     * <code>C_AVENGE_CLAN_MATE_EVENT = 92;</code>
     */
    public static final int C_AVENGE_CLAN_MATE_EVENT_VALUE = 92;
    /**
     * <code>C_UPDATE_CLIENT_TASK_STATE_EVENT = 93;</code>
     */
    public static final int C_UPDATE_CLIENT_TASK_STATE_EVENT_VALUE = 93;
    /**
     * <code>C_SOLICIT_TEAM_DONATION_EVENT = 94;</code>
     */
    public static final int C_SOLICIT_TEAM_DONATION_EVENT_VALUE = 94;
    /**
     * <code>C_FULFILL_TEAM_DONATION_SOLICITATION_EVENT = 95;</code>
     */
    public static final int C_FULFILL_TEAM_DONATION_SOLICITATION_EVENT_VALUE = 95;
    /**
     * <code>C_VOID_TEAM_DONATION_SOLICITATION_EVENT = 96;</code>
     */
    public static final int C_VOID_TEAM_DONATION_SOLICITATION_EVENT_VALUE = 96;
    /**
     * <code>C_RETRIEVE_USER_MONSTER_TEAM_EVENT = 97;</code>
     */
    public static final int C_RETRIEVE_USER_MONSTER_TEAM_EVENT_VALUE = 97;
    /**
     * <code>C_DESTROY_MONEY_TREE_STRUCTURE_EVENT = 98;</code>
     */
    public static final int C_DESTROY_MONEY_TREE_STRUCTURE_EVENT_VALUE = 98;
    /**
     * <code>C_LOGOUT_EVENT = 101;</code>
     *
     * <pre>
     *STOP AT 99, SKIP TO 200
     * </pre>
     */
    public static final int C_LOGOUT_EVENT_VALUE = 101;
    /**
     * <code>C_DEV_EVENT = 200;</code>
     */
    public static final int C_DEV_EVENT_VALUE = 200;
    /**
     * <code>C_PERFORM_RESEARCH_EVENT = 201;</code>
     */
    public static final int C_PERFORM_RESEARCH_EVENT_VALUE = 201;
    /**
     * <code>C_FINISH_PERFORMING_RESEARCH_EVENT = 202;</code>
     */
    public static final int C_FINISH_PERFORMING_RESEARCH_EVENT_VALUE = 202;
    /**
     * <code>C_CUSTOMIZE_PVP_BOARD_OBSTACLE_EVENT = 203;</code>
     */
    public static final int C_CUSTOMIZE_PVP_BOARD_OBSTACLE_EVENT_VALUE = 203;
    /**
     * <code>C_CREATE_BATTLE_ITEM_EVENT = 204;</code>
     */
    public static final int C_CREATE_BATTLE_ITEM_EVENT_VALUE = 204;
    /**
     * <code>C_DISCARD_BATTLE_ITEM_EVENT = 205;</code>
     */
    public static final int C_DISCARD_BATTLE_ITEM_EVENT_VALUE = 205;
    /**
     * <code>C_COMPLETE_BATTLE_ITEM_EVENT = 206;</code>
     */
    public static final int C_COMPLETE_BATTLE_ITEM_EVENT_VALUE = 206;
    /**
     * <code>C_REDEEM_MINI_EVENT_REWARD_EVENT = 207;</code>
     */
    public static final int C_REDEEM_MINI_EVENT_REWARD_EVENT_VALUE = 207;
    /**
     * <code>C_RETRIEVE_MINI_EVENT_EVENT = 208;</code>
     */
    public static final int C_RETRIEVE_MINI_EVENT_EVENT_VALUE = 208;
    /**
     * <code>C_UPDATE_MINI_EVENT_EVENT = 209;</code>
     */
    public static final int C_UPDATE_MINI_EVENT_EVENT_VALUE = 209;
    /**
     * <code>C_TRANSLATE_SELECT_MESSAGES_EVENT = 210;</code>
     */
    public static final int C_TRANSLATE_SELECT_MESSAGES_EVENT_VALUE = 210;
    /**
     * <code>C_UPDATE_USER_STRENGTH_EVENT = 211;</code>
     */
    public static final int C_UPDATE_USER_STRENGTH_EVENT_VALUE = 211;
    /**
     * <code>C_REFRESH_MINI_JOB_EVENT = 212;</code>
     */
    public static final int C_REFRESH_MINI_JOB_EVENT_VALUE = 212;
    /**
     * <code>C_SET_TANGO_ID_EVENT = 213;</code>
     */
    public static final int C_SET_TANGO_ID_EVENT_VALUE = 213;
    /**
     * <code>C_SEND_TANGO_GIFT_EVENT = 214;</code>
     */
    public static final int C_SEND_TANGO_GIFT_EVENT_VALUE = 214;
    /**
     * <code>C_DELETE_GIFT_EVENT = 215;</code>
     */
    public static final int C_DELETE_GIFT_EVENT_VALUE = 215;
    /**
     * <code>C_COLLECT_GIFT_EVENT = 216;</code>
     */
    public static final int C_COLLECT_GIFT_EVENT_VALUE = 216;
    /**
     * <code>C_RETRIEVE_BATTLE_REPLAY_EVENT = 217;</code>
     */
    public static final int C_RETRIEVE_BATTLE_REPLAY_EVENT_VALUE = 217;
    /**
     * <code>C_RETRIEVE_STRENGTH_LEADER_BOARD_EVENT = 503;</code>
     *
     * <pre>
     *C_COLLECT_CLAN_GIFTS_EVENT = 500;
     *C_DELETE_CLAN_GIFTS_EVENT = 501;
     *C_RECEIVED_CLAN_GIFTS_EVENT = 502;
     * </pre>
     */
    public static final int C_RETRIEVE_STRENGTH_LEADER_BOARD_EVENT_VALUE = 503;
    /**
     * <code>C_PURCHASE_ITEMS_WITH_GEMS_EVENT = 504;</code>
     */
    public static final int C_PURCHASE_ITEMS_WITH_GEMS_EVENT_VALUE = 504;
    /**
     * <code>C_RECONNECT_EVENT = 505;</code>
     */
    public static final int C_RECONNECT_EVENT_VALUE = 505;
    /**
     * <code>C_RETRIEVE_MINI_EVENT_LEADER_BOARD_EVENT = 506;</code>
     */
    public static final int C_RETRIEVE_MINI_EVENT_LEADER_BOARD_EVENT_VALUE = 506;


    public final int getNumber() { return value; }

    public static EventProtocolRequest valueOf(int value) {
      switch (value) {
        case 1: return C_STARTUP_EVENT;
        case 2: return C_IN_APP_PURCHASE_EVENT;
        case 3: return C_PURCHASE_NORM_STRUCTURE_EVENT;
        case 4: return C_MOVE_OR_ROTATE_NORM_STRUCTURE_EVENT;
        case 5: return C_SET_FACEBOOK_ID_EVENT;
        case 6: return C_UPGRADE_NORM_STRUCTURE_EVENT;
        case 7: return C_RETRIEVE_CURRENCY_FROM_NORM_STRUCTURE_EVENT;
        case 8: return C_FINISH_NORM_STRUCT_WAITTIME_WITH_DIAMONDS_EVENT;
        case 9: return C_NORM_STRUCT_WAIT_COMPLETE_EVENT;
        case 10: return C_LOAD_PLAYER_CITY_EVENT;
        case 11: return C_EXCHANGE_GEMS_FOR_RESOURCES_EVENT;
        case 12: return C_QUEST_ACCEPT_EVENT;
        case 13: return C_QUEST_PROGRESS_EVENT;
        case 14: return C_QUEST_REDEEM_EVENT;
        case 15: return C_PURCHASE_CITY_EXPANSION_EVENT;
        case 16: return C_EXPANSION_WAIT_COMPLETE_EVENT;
        case 17: return C_LEVEL_UP_EVENT;
        case 18: return C_ENABLE_APNS_EVENT;
        case 19: return C_USER_CREATE_EVENT;
        case 20: return C_LOAD_CITY_EVENT;
        case 21: return C_RETRIEVE_USERS_FOR_USER_IDS_EVENT;
        case 22: return C_EARN_FREE_DIAMONDS_EVENT;
        case 23: return C_SEND_GROUP_CHAT_EVENT;
        case 24: return C_CREATE_CLAN_EVENT;
        case 25: return C_LEAVE_CLAN_EVENT;
        case 26: return C_REQUEST_JOIN_CLAN_EVENT;
        case 27: return C_RETRACT_REQUEST_JOIN_CLAN_EVENT;
        case 28: return C_APPROVE_OR_REJECT_REQUEST_TO_JOIN_CLAN_EVENT;
        case 29: return C_TRANSFER_CLAN_OWNERSHIP;
        case 30: return C_RETRIEVE_CLAN_INFO_EVENT;
        case 31: return C_CHANGE_CLAN_SETTINGS_EVENT;
        case 32: return C_BOOT_PLAYER_FROM_CLAN_EVENT;
        case 33: return C_PICK_LOCK_BOX_EVENT;
        case 34: return C_RETRIEVE_TOURNAMENT_RANKINGS_EVENT;
        case 35: return C_SUBMIT_MONSTER_ENHANCEMENT_EVENT;
        case 36: return C_EVOLVE_MONSTER_EVENT;
        case 37: return C_PURCHASE_BOOSTER_PACK_EVENT;
        case 38: return C_EVOLUTION_FINISHED_EVENT;
        case 39: return C_ACHIEVEMENT_PROGRESS_EVENT;
        case 40: return C_PRIVATE_CHAT_POST_EVENT;
        case 41: return C_RETRIEVE_PRIVATE_CHAT_POST_EVENT;
        case 42: return C_REDEEM_USER_LOCK_BOX_ITEMS_EVENT;
        case 43: return C_BEGIN_DUNGEON_EVENT;
        case 44: return C_END_DUNGEON_EVENT;
        case 45: return C_REVIVE_IN_DUNGEON_EVENT;
        case 46: return C_QUEUE_UP_EVENT;
        case 47: return C_UPDATE_MONSTER_HEALTH_EVENT;
        case 48: return C_HEAL_MONSTER_EVENT;
        case 49: return C_ACHIEVEMENT_REDEEM_EVENT;
        case 50: return C_ADD_MONSTER_TO_BATTLE_TEAM_EVENT;
        case 51: return C_REMOVE_MONSTER_FROM_BATTLE_TEAM_EVENT;
        case 52: return C_INCREASE_MONSTER_INVENTORY_SLOT_EVENT;
        case 53: return C_ENHANCEMENT_WAIT_TIME_COMPLETE_EVENT;
        case 54: return C_COMBINE_USER_MONSTER_PIECES_EVENT;
        case 55: return C_SELL_USER_MONSTER_EVENT;
        case 56: return C_INVITE_FB_FRIENDS_FOR_SLOTS_EVENT;
        case 57: return C_ACCEPT_AND_REJECT_FB_INVITE_FOR_SLOTS_EVENT;
        case 59: return C_UPDATE_USER_CURRENCY_EVENT;
        case 60: return C_BEGIN_PVP_BATTLE_EVENT;
        case 61: return C_END_PVP_BATTLE_EVENT;
        case 62: return C_BEGIN_CLAN_RAID_EVENT;
        case 63: return C_ATTACK_CLAN_RAID_MONSTER_EVENT;
        case 64: return C_RECORD_CLAN_RAID_STATS_EVENT;
        case 65: return C_PROMOTE_DEMOTE_CLAN_MEMBER_EVENT;
        case 66: return C_SET_GAME_CENTER_ID_EVENT;
        case 67: return C_SPAWN_OBSTACLE_EVENT;
        case 68: return C_BEGIN_OBSTACLE_REMOVAL_EVENT;
        case 69: return C_OBSTACLE_REMOVAL_COMPLETE_EVENT;
        case 70: return C_SPAWN_MINI_JOB_EVENT;
        case 71: return C_BEGIN_MINI_JOB_EVENT;
        case 72: return C_COMPLETE_MINI_JOB_EVENT;
        case 73: return C_REDEEM_MINI_JOB_EVENT;
        case 74: return C_SET_AVATAR_MONSTER_EVENT;
        case 75: return C_RESTRICT_USER_MONSTER_EVENT;
        case 76: return C_UNRESTRICT_USER_MONSTER_EVENT;
        case 77: return C_ENHANCE_MONSTER_EVENT;
        case 78: return C_TRADE_ITEM_FOR_BOOSTER_EVENT;
        case 79: return C_SOLICIT_CLAN_HELP_EVENT;
        case 80: return C_GIVE_CLAN_HELP_EVENT;
        case 81: return C_END_CLAN_HELP_EVENT;
        case 82: return C_INVITE_TO_CLAN_EVENT;
        case 83: return C_ACCEPT_OR_REJECT_CLAN_INVITE_EVENT;
        case 84: return C_COLLECT_MONSTER_ENHANCEMENT_EVENT;
        case 85: return C_TRADE_ITEM_FOR_SPEED_UPS_EVENT;
        case 86: return C_REMOVE_USER_ITEM_USED_EVENT;
        case 87: return C_TRADE_ITEM_FOR_RESOURCES_EVENT;
        case 88: return C_REDEEM_SECRET_GIFT_EVENT;
        case 89: return C_SET_DEFENDING_MSG_EVENT;
        case 90: return C_BEGIN_CLAN_AVENGING_EVENT;
        case 91: return C_END_CLAN_AVENGING_EVENT;
        case 92: return C_AVENGE_CLAN_MATE_EVENT;
        case 93: return C_UPDATE_CLIENT_TASK_STATE_EVENT;
        case 94: return C_SOLICIT_TEAM_DONATION_EVENT;
        case 95: return C_FULFILL_TEAM_DONATION_SOLICITATION_EVENT;
        case 96: return C_VOID_TEAM_DONATION_SOLICITATION_EVENT;
        case 97: return C_RETRIEVE_USER_MONSTER_TEAM_EVENT;
        case 98: return C_DESTROY_MONEY_TREE_STRUCTURE_EVENT;
        case 101: return C_LOGOUT_EVENT;
        case 200: return C_DEV_EVENT;
        case 201: return C_PERFORM_RESEARCH_EVENT;
        case 202: return C_FINISH_PERFORMING_RESEARCH_EVENT;
        case 203: return C_CUSTOMIZE_PVP_BOARD_OBSTACLE_EVENT;
        case 204: return C_CREATE_BATTLE_ITEM_EVENT;
        case 205: return C_DISCARD_BATTLE_ITEM_EVENT;
        case 206: return C_COMPLETE_BATTLE_ITEM_EVENT;
        case 207: return C_REDEEM_MINI_EVENT_REWARD_EVENT;
        case 208: return C_RETRIEVE_MINI_EVENT_EVENT;
        case 209: return C_UPDATE_MINI_EVENT_EVENT;
        case 210: return C_TRANSLATE_SELECT_MESSAGES_EVENT;
        case 211: return C_UPDATE_USER_STRENGTH_EVENT;
        case 212: return C_REFRESH_MINI_JOB_EVENT;
        case 213: return C_SET_TANGO_ID_EVENT;
        case 214: return C_SEND_TANGO_GIFT_EVENT;
        case 215: return C_DELETE_GIFT_EVENT;
        case 216: return C_COLLECT_GIFT_EVENT;
        case 217: return C_RETRIEVE_BATTLE_REPLAY_EVENT;
        case 503: return C_RETRIEVE_STRENGTH_LEADER_BOARD_EVENT;
        case 504: return C_PURCHASE_ITEMS_WITH_GEMS_EVENT;
        case 505: return C_RECONNECT_EVENT;
        case 506: return C_RETRIEVE_MINI_EVENT_LEADER_BOARD_EVENT;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<EventProtocolRequest>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<EventProtocolRequest>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<EventProtocolRequest>() {
            public EventProtocolRequest findValueByNumber(int number) {
              return EventProtocolRequest.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.lvl6.proto.ProtocolsProto.getDescriptor().getEnumTypes().get(0);
    }

    private static final EventProtocolRequest[] VALUES = values();

    public static EventProtocolRequest valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private EventProtocolRequest(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:com.lvl6.proto.EventProtocolRequest)
  }

  /**
   * Protobuf enum {@code com.lvl6.proto.EventProtocolResponse}
   */
  public enum EventProtocolResponse
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>S_STARTUP_EVENT = 1;</code>
     */
    S_STARTUP_EVENT(0, 1),
    /**
     * <code>S_IN_APP_PURCHASE_EVENT = 2;</code>
     */
    S_IN_APP_PURCHASE_EVENT(1, 2),
    /**
     * <code>S_PURCHASE_NORM_STRUCTURE_EVENT = 3;</code>
     */
    S_PURCHASE_NORM_STRUCTURE_EVENT(2, 3),
    /**
     * <code>S_MOVE_OR_ROTATE_NORM_STRUCTURE_EVENT = 4;</code>
     */
    S_MOVE_OR_ROTATE_NORM_STRUCTURE_EVENT(3, 4),
    /**
     * <code>S_SET_FACEBOOK_ID_EVENT = 5;</code>
     */
    S_SET_FACEBOOK_ID_EVENT(4, 5),
    /**
     * <code>S_UPGRADE_NORM_STRUCTURE_EVENT = 6;</code>
     */
    S_UPGRADE_NORM_STRUCTURE_EVENT(5, 6),
    /**
     * <code>S_RETRIEVE_CURRENCY_FROM_NORM_STRUCTURE_EVENT = 7;</code>
     */
    S_RETRIEVE_CURRENCY_FROM_NORM_STRUCTURE_EVENT(6, 7),
    /**
     * <code>S_FINISH_NORM_STRUCT_WAITTIME_WITH_DIAMONDS_EVENT = 8;</code>
     */
    S_FINISH_NORM_STRUCT_WAITTIME_WITH_DIAMONDS_EVENT(7, 8),
    /**
     * <code>S_NORM_STRUCT_WAIT_COMPLETE_EVENT = 9;</code>
     */
    S_NORM_STRUCT_WAIT_COMPLETE_EVENT(8, 9),
    /**
     * <code>S_LOAD_PLAYER_CITY_EVENT = 10;</code>
     */
    S_LOAD_PLAYER_CITY_EVENT(9, 10),
    /**
     * <code>S_EXCHANGE_GEMS_FOR_RESOURCES_EVENT = 11;</code>
     */
    S_EXCHANGE_GEMS_FOR_RESOURCES_EVENT(10, 11),
    /**
     * <code>S_QUEST_ACCEPT_EVENT = 12;</code>
     */
    S_QUEST_ACCEPT_EVENT(11, 12),
    /**
     * <code>S_QUEST_PROGRESS_EVENT = 13;</code>
     */
    S_QUEST_PROGRESS_EVENT(12, 13),
    /**
     * <code>S_QUEST_REDEEM_EVENT = 14;</code>
     */
    S_QUEST_REDEEM_EVENT(13, 14),
    /**
     * <code>S_PURCHASE_CITY_EXPANSION_EVENT = 15;</code>
     */
    S_PURCHASE_CITY_EXPANSION_EVENT(14, 15),
    /**
     * <code>S_EXPANSION_WAIT_COMPLETE_EVENT = 16;</code>
     */
    S_EXPANSION_WAIT_COMPLETE_EVENT(15, 16),
    /**
     * <code>S_LEVEL_UP_EVENT = 17;</code>
     */
    S_LEVEL_UP_EVENT(16, 17),
    /**
     * <code>S_ENABLE_APNS_EVENT = 18;</code>
     */
    S_ENABLE_APNS_EVENT(17, 18),
    /**
     * <code>S_USER_CREATE_EVENT = 19;</code>
     */
    S_USER_CREATE_EVENT(18, 19),
    /**
     * <code>S_LOAD_CITY_EVENT = 20;</code>
     */
    S_LOAD_CITY_EVENT(19, 20),
    /**
     * <code>S_RETRIEVE_USERS_FOR_USER_IDS_EVENT = 21;</code>
     */
    S_RETRIEVE_USERS_FOR_USER_IDS_EVENT(20, 21),
    /**
     * <code>S_EARN_FREE_DIAMONDS_EVENT = 22;</code>
     */
    S_EARN_FREE_DIAMONDS_EVENT(21, 22),
    /**
     * <code>S_SEND_GROUP_CHAT_EVENT = 23;</code>
     */
    S_SEND_GROUP_CHAT_EVENT(22, 23),
    /**
     * <code>S_CREATE_CLAN_EVENT = 24;</code>
     */
    S_CREATE_CLAN_EVENT(23, 24),
    /**
     * <code>S_LEAVE_CLAN_EVENT = 25;</code>
     */
    S_LEAVE_CLAN_EVENT(24, 25),
    /**
     * <code>S_REQUEST_JOIN_CLAN_EVENT = 26;</code>
     */
    S_REQUEST_JOIN_CLAN_EVENT(25, 26),
    /**
     * <code>S_RETRACT_REQUEST_JOIN_CLAN_EVENT = 27;</code>
     */
    S_RETRACT_REQUEST_JOIN_CLAN_EVENT(26, 27),
    /**
     * <code>S_APPROVE_OR_REJECT_REQUEST_TO_JOIN_CLAN_EVENT = 28;</code>
     */
    S_APPROVE_OR_REJECT_REQUEST_TO_JOIN_CLAN_EVENT(27, 28),
    /**
     * <code>S_TRANSFER_CLAN_OWNERSHIP = 29;</code>
     */
    S_TRANSFER_CLAN_OWNERSHIP(28, 29),
    /**
     * <code>S_RETRIEVE_CLAN_INFO_EVENT = 30;</code>
     */
    S_RETRIEVE_CLAN_INFO_EVENT(29, 30),
    /**
     * <code>S_CHANGE_CLAN_SETTINGS_EVENT = 31;</code>
     *
     * <pre>
     *S_CHANGE_CLAN_DESCRIPTION_EVENT = 31;
     * </pre>
     */
    S_CHANGE_CLAN_SETTINGS_EVENT(30, 31),
    /**
     * <code>S_BOOT_PLAYER_FROM_CLAN_EVENT = 32;</code>
     */
    S_BOOT_PLAYER_FROM_CLAN_EVENT(31, 32),
    /**
     * <code>S_PICK_LOCK_BOX_EVENT = 33;</code>
     */
    S_PICK_LOCK_BOX_EVENT(32, 33),
    /**
     * <code>S_RETRIEVE_TOURNAMENT_RANKINGS_EVENT = 34;</code>
     */
    S_RETRIEVE_TOURNAMENT_RANKINGS_EVENT(33, 34),
    /**
     * <code>S_SUBMIT_MONSTER_ENHANCEMENT_EVENT = 35;</code>
     */
    S_SUBMIT_MONSTER_ENHANCEMENT_EVENT(34, 35),
    /**
     * <code>S_EVOLVE_MONSTER_EVENT = 36;</code>
     */
    S_EVOLVE_MONSTER_EVENT(35, 36),
    /**
     * <code>S_PURCHASE_BOOSTER_PACK_EVENT = 37;</code>
     */
    S_PURCHASE_BOOSTER_PACK_EVENT(36, 37),
    /**
     * <code>S_EVOLUTION_FINISHED_EVENT = 38;</code>
     */
    S_EVOLUTION_FINISHED_EVENT(37, 38),
    /**
     * <code>S_ACHIEVEMENT_PROGRESS_EVENT = 39;</code>
     *
     * <pre>
     *S_CHANGE_CLAN_JOIN_TYPE_EVENT = 39;
     * </pre>
     */
    S_ACHIEVEMENT_PROGRESS_EVENT(38, 39),
    /**
     * <code>S_PRIVATE_CHAT_POST_EVENT = 40;</code>
     */
    S_PRIVATE_CHAT_POST_EVENT(39, 40),
    /**
     * <code>S_RETRIEVE_PRIVATE_CHAT_POST_EVENT = 41;</code>
     */
    S_RETRIEVE_PRIVATE_CHAT_POST_EVENT(40, 41),
    /**
     * <code>S_REDEEM_USER_LOCK_BOX_ITEMS_EVENT = 42;</code>
     */
    S_REDEEM_USER_LOCK_BOX_ITEMS_EVENT(41, 42),
    /**
     * <code>S_BEGIN_DUNGEON_EVENT = 43;</code>
     */
    S_BEGIN_DUNGEON_EVENT(42, 43),
    /**
     * <code>S_END_DUNGEON_EVENT = 44;</code>
     */
    S_END_DUNGEON_EVENT(43, 44),
    /**
     * <code>S_REVIVE_IN_DUNGEON_EVENT = 45;</code>
     */
    S_REVIVE_IN_DUNGEON_EVENT(44, 45),
    /**
     * <code>S_QUEUE_UP_EVENT = 46;</code>
     */
    S_QUEUE_UP_EVENT(45, 46),
    /**
     * <code>S_UPDATE_MONSTER_HEALTH_EVENT = 47;</code>
     */
    S_UPDATE_MONSTER_HEALTH_EVENT(46, 47),
    /**
     * <code>S_HEAL_MONSTER_EVENT = 48;</code>
     */
    S_HEAL_MONSTER_EVENT(47, 48),
    /**
     * <code>S_ACHIEVEMENT_REDEEM_EVENT = 49;</code>
     *
     * <pre>
     *S_HEAL_MONSTER_WAIT_TIME_COMPLETE_EVENT = 49;
     * </pre>
     */
    S_ACHIEVEMENT_REDEEM_EVENT(48, 49),
    /**
     * <code>S_ADD_MONSTER_TO_BATTLE_TEAM_EVENT = 50;</code>
     */
    S_ADD_MONSTER_TO_BATTLE_TEAM_EVENT(49, 50),
    /**
     * <code>S_REMOVE_MONSTER_FROM_BATTLE_TEAM_EVENT = 51;</code>
     */
    S_REMOVE_MONSTER_FROM_BATTLE_TEAM_EVENT(50, 51),
    /**
     * <code>S_INCREASE_MONSTER_INVENTORY_SLOT_EVENT = 52;</code>
     */
    S_INCREASE_MONSTER_INVENTORY_SLOT_EVENT(51, 52),
    /**
     * <code>S_ENHANCEMENT_WAIT_TIME_COMPLETE_EVENT = 53;</code>
     */
    S_ENHANCEMENT_WAIT_TIME_COMPLETE_EVENT(52, 53),
    /**
     * <code>S_COMBINE_USER_MONSTER_PIECES_EVENT = 54;</code>
     */
    S_COMBINE_USER_MONSTER_PIECES_EVENT(53, 54),
    /**
     * <code>S_SELL_USER_MONSTER_EVENT = 55;</code>
     */
    S_SELL_USER_MONSTER_EVENT(54, 55),
    /**
     * <code>S_INVITE_FB_FRIENDS_FOR_SLOTS_EVENT = 56;</code>
     */
    S_INVITE_FB_FRIENDS_FOR_SLOTS_EVENT(55, 56),
    /**
     * <code>S_ACCEPT_AND_REJECT_FB_INVITE_FOR_SLOTS_EVENT = 57;</code>
     */
    S_ACCEPT_AND_REJECT_FB_INVITE_FOR_SLOTS_EVENT(56, 57),
    /**
     * <code>S_UPDATE_USER_CURRENCY_EVENT = 59;</code>
     */
    S_UPDATE_USER_CURRENCY_EVENT(57, 59),
    /**
     * <code>S_BEGIN_PVP_BATTLE_EVENT = 60;</code>
     */
    S_BEGIN_PVP_BATTLE_EVENT(58, 60),
    /**
     * <code>S_END_PVP_BATTLE_EVENT = 61;</code>
     */
    S_END_PVP_BATTLE_EVENT(59, 61),
    /**
     * <code>S_BEGIN_CLAN_RAID_EVENT = 62;</code>
     */
    S_BEGIN_CLAN_RAID_EVENT(60, 62),
    /**
     * <code>S_ATTACK_CLAN_RAID_MONSTER_EVENT = 63;</code>
     */
    S_ATTACK_CLAN_RAID_MONSTER_EVENT(61, 63),
    /**
     * <code>S_RECORD_CLAN_RAID_STATS_EVENT = 64;</code>
     */
    S_RECORD_CLAN_RAID_STATS_EVENT(62, 64),
    /**
     * <code>S_PROMOTE_DEMOTE_CLAN_MEMBER_EVENT = 65;</code>
     */
    S_PROMOTE_DEMOTE_CLAN_MEMBER_EVENT(63, 65),
    /**
     * <code>S_SET_GAME_CENTER_ID_EVENT = 66;</code>
     */
    S_SET_GAME_CENTER_ID_EVENT(64, 66),
    /**
     * <code>S_SPAWN_OBSTACLE_EVENT = 67;</code>
     */
    S_SPAWN_OBSTACLE_EVENT(65, 67),
    /**
     * <code>S_BEGIN_OBSTACLE_REMOVAL_EVENT = 68;</code>
     */
    S_BEGIN_OBSTACLE_REMOVAL_EVENT(66, 68),
    /**
     * <code>S_OBSTACLE_REMOVAL_COMPLETE_EVENT = 69;</code>
     */
    S_OBSTACLE_REMOVAL_COMPLETE_EVENT(67, 69),
    /**
     * <code>S_SPAWN_MINI_JOB_EVENT = 70;</code>
     */
    S_SPAWN_MINI_JOB_EVENT(68, 70),
    /**
     * <code>S_BEGIN_MINI_JOB_EVENT = 71;</code>
     */
    S_BEGIN_MINI_JOB_EVENT(69, 71),
    /**
     * <code>S_COMPLETE_MINI_JOB_EVENT = 72;</code>
     */
    S_COMPLETE_MINI_JOB_EVENT(70, 72),
    /**
     * <code>S_REDEEM_MINI_JOB_EVENT = 73;</code>
     */
    S_REDEEM_MINI_JOB_EVENT(71, 73),
    /**
     * <code>S_SET_AVATAR_MONSTER_EVENT = 74;</code>
     */
    S_SET_AVATAR_MONSTER_EVENT(72, 74),
    /**
     * <code>S_RESTRICT_USER_MONSTER_EVENT = 75;</code>
     */
    S_RESTRICT_USER_MONSTER_EVENT(73, 75),
    /**
     * <code>S_UNRESTRICT_USER_MONSTER_EVENT = 76;</code>
     */
    S_UNRESTRICT_USER_MONSTER_EVENT(74, 76),
    /**
     * <code>S_ENHANCE_MONSTER_EVENT = 77;</code>
     */
    S_ENHANCE_MONSTER_EVENT(75, 77),
    /**
     * <code>S_TRADE_ITEM_FOR_BOOSTER_EVENT = 78;</code>
     */
    S_TRADE_ITEM_FOR_BOOSTER_EVENT(76, 78),
    /**
     * <code>S_SOLICIT_CLAN_HELP_EVENT = 79;</code>
     */
    S_SOLICIT_CLAN_HELP_EVENT(77, 79),
    /**
     * <code>S_GIVE_CLAN_HELP_EVENT = 80;</code>
     */
    S_GIVE_CLAN_HELP_EVENT(78, 80),
    /**
     * <code>S_END_CLAN_HELP_EVENT = 81;</code>
     */
    S_END_CLAN_HELP_EVENT(79, 81),
    /**
     * <code>S_INVITE_TO_CLAN_EVENT = 82;</code>
     */
    S_INVITE_TO_CLAN_EVENT(80, 82),
    /**
     * <code>S_ACCEPT_OR_REJECT_CLAN_INVITE_EVENT = 83;</code>
     */
    S_ACCEPT_OR_REJECT_CLAN_INVITE_EVENT(81, 83),
    /**
     * <code>S_COLLECT_MONSTER_ENHANCEMENT_EVENT = 84;</code>
     */
    S_COLLECT_MONSTER_ENHANCEMENT_EVENT(82, 84),
    /**
     * <code>S_TRADE_ITEM_FOR_SPEED_UPS_EVENT = 85;</code>
     */
    S_TRADE_ITEM_FOR_SPEED_UPS_EVENT(83, 85),
    /**
     * <code>S_REMOVE_USER_ITEM_USED_EVENT = 86;</code>
     */
    S_REMOVE_USER_ITEM_USED_EVENT(84, 86),
    /**
     * <code>S_TRADE_ITEM_FOR_RESOURCES_EVENT = 87;</code>
     */
    S_TRADE_ITEM_FOR_RESOURCES_EVENT(85, 87),
    /**
     * <code>S_REDEEM_SECRET_GIFT_EVENT = 88;</code>
     */
    S_REDEEM_SECRET_GIFT_EVENT(86, 88),
    /**
     * <code>S_SET_DEFENDING_MSG_EVENT = 89;</code>
     */
    S_SET_DEFENDING_MSG_EVENT(87, 89),
    /**
     * <code>S_BEGIN_CLAN_AVENGING_EVENT = 90;</code>
     */
    S_BEGIN_CLAN_AVENGING_EVENT(88, 90),
    /**
     * <code>S_END_CLAN_AVENGING_EVENT = 91;</code>
     */
    S_END_CLAN_AVENGING_EVENT(89, 91),
    /**
     * <code>S_AVENGE_CLAN_MATE_EVENT = 92;</code>
     */
    S_AVENGE_CLAN_MATE_EVENT(90, 92),
    /**
     * <code>S_UPDATE_CLIENT_TASK_STATE_EVENT = 93;</code>
     */
    S_UPDATE_CLIENT_TASK_STATE_EVENT(91, 93),
    /**
     * <code>S_SOLICIT_TEAM_DONATION_EVENT = 94;</code>
     */
    S_SOLICIT_TEAM_DONATION_EVENT(92, 94),
    /**
     * <code>S_FULFILL_TEAM_DONATION_SOLICITATION_EVENT = 95;</code>
     */
    S_FULFILL_TEAM_DONATION_SOLICITATION_EVENT(93, 95),
    /**
     * <code>S_VOID_TEAM_DONATION_SOLICITATION_EVENT = 96;</code>
     */
    S_VOID_TEAM_DONATION_SOLICITATION_EVENT(94, 96),
    /**
     * <code>S_RETRIEVE_USER_MONSTER_TEAM_EVENT = 97;</code>
     */
    S_RETRIEVE_USER_MONSTER_TEAM_EVENT(95, 97),
    /**
     * <code>S_DESTROY_MONEY_TREE_STRUCTURE_EVENT = 98;</code>
     */
    S_DESTROY_MONEY_TREE_STRUCTURE_EVENT(96, 98),
    /**
     * <code>S_UPDATE_CLIENT_USER_EVENT = 101;</code>
     *
     * <pre>
     *STOP AT 99, SKIP TO 200
     * </pre>
     */
    S_UPDATE_CLIENT_USER_EVENT(97, 101),
    /**
     * <code>S_REFERRAL_CODE_USED_EVENT = 102;</code>
     */
    S_REFERRAL_CODE_USED_EVENT(98, 102),
    /**
     * <code>S_PURGE_STATIC_DATA_EVENT = 103;</code>
     */
    S_PURGE_STATIC_DATA_EVENT(99, 103),
    /**
     * <code>S_RECEIVED_GROUP_CHAT_EVENT = 104;</code>
     */
    S_RECEIVED_GROUP_CHAT_EVENT(100, 104),
    /**
     * <code>S_SEND_ADMIN_MESSAGE_EVENT = 105;</code>
     */
    S_SEND_ADMIN_MESSAGE_EVENT(101, 105),
    /**
     * <code>S_GENERAL_NOTIFICATION_EVENT = 106;</code>
     */
    S_GENERAL_NOTIFICATION_EVENT(102, 106),
    /**
     * <code>S_RECEIVED_RARE_BOOSTER_PURCHASE_EVENT = 107;</code>
     */
    S_RECEIVED_RARE_BOOSTER_PURCHASE_EVENT(103, 107),
    /**
     * <code>S_AWARD_CLAN_RAID_STAGE_REWARD_EVENT = 108;</code>
     */
    S_AWARD_CLAN_RAID_STAGE_REWARD_EVENT(104, 108),
    /**
     * <code>S_FORCE_LOGOUT_EVENT = 109;</code>
     */
    S_FORCE_LOGOUT_EVENT(105, 109),
    /**
     * <code>S_RETRIEVE_CLAN_DATA_EVENT = 110;</code>
     */
    S_RETRIEVE_CLAN_DATA_EVENT(106, 110),
    /**
     * <code>S_RECEIVED_GIFT_EVENT = 111;</code>
     */
    S_RECEIVED_GIFT_EVENT(107, 111),
    /**
     * <code>S_DEV_EVENT = 200;</code>
     */
    S_DEV_EVENT(108, 200),
    /**
     * <code>S_PERFORM_RESEARCH_EVENT = 201;</code>
     */
    S_PERFORM_RESEARCH_EVENT(109, 201),
    /**
     * <code>S_FINISH_PERFORMING_RESEARCH_EVENT = 202;</code>
     */
    S_FINISH_PERFORMING_RESEARCH_EVENT(110, 202),
    /**
     * <code>S_CUSTOMIZE_PVP_BOARD_OBSTACLE_EVENT = 203;</code>
     */
    S_CUSTOMIZE_PVP_BOARD_OBSTACLE_EVENT(111, 203),
    /**
     * <code>S_CREATE_BATTLE_ITEM_EVENT = 204;</code>
     */
    S_CREATE_BATTLE_ITEM_EVENT(112, 204),
    /**
     * <code>S_DISCARD_BATTLE_ITEM_EVENT = 205;</code>
     */
    S_DISCARD_BATTLE_ITEM_EVENT(113, 205),
    /**
     * <code>S_COMPLETE_BATTLE_ITEM_EVENT = 206;</code>
     */
    S_COMPLETE_BATTLE_ITEM_EVENT(114, 206),
    /**
     * <code>S_REDEEM_MINI_EVENT_REWARD_EVENT = 207;</code>
     */
    S_REDEEM_MINI_EVENT_REWARD_EVENT(115, 207),
    /**
     * <code>S_RETRIEVE_MINI_EVENT_EVENT = 208;</code>
     */
    S_RETRIEVE_MINI_EVENT_EVENT(116, 208),
    /**
     * <code>S_UPDATE_MINI_EVENT_EVENT = 209;</code>
     */
    S_UPDATE_MINI_EVENT_EVENT(117, 209),
    /**
     * <code>S_TRANSLATE_SELECT_MESSAGES_EVENT = 210;</code>
     */
    S_TRANSLATE_SELECT_MESSAGES_EVENT(118, 210),
    /**
     * <code>S_UPDATE_USER_STRENGTH_EVENT = 211;</code>
     */
    S_UPDATE_USER_STRENGTH_EVENT(119, 211),
    /**
     * <code>S_REFRESH_MINI_JOB_EVENT = 212;</code>
     */
    S_REFRESH_MINI_JOB_EVENT(120, 212),
    /**
     * <code>S_SET_TANGO_ID_EVENT = 213;</code>
     */
    S_SET_TANGO_ID_EVENT(121, 213),
    /**
     * <code>S_SEND_TANGO_GIFT_EVENT = 214;</code>
     */
    S_SEND_TANGO_GIFT_EVENT(122, 214),
    /**
     * <code>S_DELETE_GIFT_EVENT = 215;</code>
     */
    S_DELETE_GIFT_EVENT(123, 215),
    /**
     * <code>S_COLLECT_GIFT_EVENT = 216;</code>
     */
    S_COLLECT_GIFT_EVENT(124, 216),
    /**
     * <code>S_RETRIEVE_BATTLE_REPLAY_EVENT = 217;</code>
     */
    S_RETRIEVE_BATTLE_REPLAY_EVENT(125, 217),
    /**
     * <code>S_RETRIEVE_STRENGTH_LEADER_BOARD_EVENT = 503;</code>
     *
     * <pre>
     *S_COLLECT_CLAN_GIFTS_EVENT = 500;
     *S_DELETE_CLAN_GIFTS_EVENT = 501;
     *S_RECEIVED_CLAN_GIFTS_EVENT = 502;
     * </pre>
     */
    S_RETRIEVE_STRENGTH_LEADER_BOARD_EVENT(126, 503),
    /**
     * <code>S_RECONNECT_EVENT = 504;</code>
     */
    S_RECONNECT_EVENT(127, 504),
    /**
     * <code>S_PURCHASE_ITEMS_WITH_GEMS_EVENT = 505;</code>
     */
    S_PURCHASE_ITEMS_WITH_GEMS_EVENT(128, 505),
    /**
     * <code>S_RETRIEVE_MINI_EVENT_LEADER_BOARD_EVENT = 506;</code>
     */
    S_RETRIEVE_MINI_EVENT_LEADER_BOARD_EVENT(129, 506),
    ;

    /**
     * <code>S_STARTUP_EVENT = 1;</code>
     */
    public static final int S_STARTUP_EVENT_VALUE = 1;
    /**
     * <code>S_IN_APP_PURCHASE_EVENT = 2;</code>
     */
    public static final int S_IN_APP_PURCHASE_EVENT_VALUE = 2;
    /**
     * <code>S_PURCHASE_NORM_STRUCTURE_EVENT = 3;</code>
     */
    public static final int S_PURCHASE_NORM_STRUCTURE_EVENT_VALUE = 3;
    /**
     * <code>S_MOVE_OR_ROTATE_NORM_STRUCTURE_EVENT = 4;</code>
     */
    public static final int S_MOVE_OR_ROTATE_NORM_STRUCTURE_EVENT_VALUE = 4;
    /**
     * <code>S_SET_FACEBOOK_ID_EVENT = 5;</code>
     */
    public static final int S_SET_FACEBOOK_ID_EVENT_VALUE = 5;
    /**
     * <code>S_UPGRADE_NORM_STRUCTURE_EVENT = 6;</code>
     */
    public static final int S_UPGRADE_NORM_STRUCTURE_EVENT_VALUE = 6;
    /**
     * <code>S_RETRIEVE_CURRENCY_FROM_NORM_STRUCTURE_EVENT = 7;</code>
     */
    public static final int S_RETRIEVE_CURRENCY_FROM_NORM_STRUCTURE_EVENT_VALUE = 7;
    /**
     * <code>S_FINISH_NORM_STRUCT_WAITTIME_WITH_DIAMONDS_EVENT = 8;</code>
     */
    public static final int S_FINISH_NORM_STRUCT_WAITTIME_WITH_DIAMONDS_EVENT_VALUE = 8;
    /**
     * <code>S_NORM_STRUCT_WAIT_COMPLETE_EVENT = 9;</code>
     */
    public static final int S_NORM_STRUCT_WAIT_COMPLETE_EVENT_VALUE = 9;
    /**
     * <code>S_LOAD_PLAYER_CITY_EVENT = 10;</code>
     */
    public static final int S_LOAD_PLAYER_CITY_EVENT_VALUE = 10;
    /**
     * <code>S_EXCHANGE_GEMS_FOR_RESOURCES_EVENT = 11;</code>
     */
    public static final int S_EXCHANGE_GEMS_FOR_RESOURCES_EVENT_VALUE = 11;
    /**
     * <code>S_QUEST_ACCEPT_EVENT = 12;</code>
     */
    public static final int S_QUEST_ACCEPT_EVENT_VALUE = 12;
    /**
     * <code>S_QUEST_PROGRESS_EVENT = 13;</code>
     */
    public static final int S_QUEST_PROGRESS_EVENT_VALUE = 13;
    /**
     * <code>S_QUEST_REDEEM_EVENT = 14;</code>
     */
    public static final int S_QUEST_REDEEM_EVENT_VALUE = 14;
    /**
     * <code>S_PURCHASE_CITY_EXPANSION_EVENT = 15;</code>
     */
    public static final int S_PURCHASE_CITY_EXPANSION_EVENT_VALUE = 15;
    /**
     * <code>S_EXPANSION_WAIT_COMPLETE_EVENT = 16;</code>
     */
    public static final int S_EXPANSION_WAIT_COMPLETE_EVENT_VALUE = 16;
    /**
     * <code>S_LEVEL_UP_EVENT = 17;</code>
     */
    public static final int S_LEVEL_UP_EVENT_VALUE = 17;
    /**
     * <code>S_ENABLE_APNS_EVENT = 18;</code>
     */
    public static final int S_ENABLE_APNS_EVENT_VALUE = 18;
    /**
     * <code>S_USER_CREATE_EVENT = 19;</code>
     */
    public static final int S_USER_CREATE_EVENT_VALUE = 19;
    /**
     * <code>S_LOAD_CITY_EVENT = 20;</code>
     */
    public static final int S_LOAD_CITY_EVENT_VALUE = 20;
    /**
     * <code>S_RETRIEVE_USERS_FOR_USER_IDS_EVENT = 21;</code>
     */
    public static final int S_RETRIEVE_USERS_FOR_USER_IDS_EVENT_VALUE = 21;
    /**
     * <code>S_EARN_FREE_DIAMONDS_EVENT = 22;</code>
     */
    public static final int S_EARN_FREE_DIAMONDS_EVENT_VALUE = 22;
    /**
     * <code>S_SEND_GROUP_CHAT_EVENT = 23;</code>
     */
    public static final int S_SEND_GROUP_CHAT_EVENT_VALUE = 23;
    /**
     * <code>S_CREATE_CLAN_EVENT = 24;</code>
     */
    public static final int S_CREATE_CLAN_EVENT_VALUE = 24;
    /**
     * <code>S_LEAVE_CLAN_EVENT = 25;</code>
     */
    public static final int S_LEAVE_CLAN_EVENT_VALUE = 25;
    /**
     * <code>S_REQUEST_JOIN_CLAN_EVENT = 26;</code>
     */
    public static final int S_REQUEST_JOIN_CLAN_EVENT_VALUE = 26;
    /**
     * <code>S_RETRACT_REQUEST_JOIN_CLAN_EVENT = 27;</code>
     */
    public static final int S_RETRACT_REQUEST_JOIN_CLAN_EVENT_VALUE = 27;
    /**
     * <code>S_APPROVE_OR_REJECT_REQUEST_TO_JOIN_CLAN_EVENT = 28;</code>
     */
    public static final int S_APPROVE_OR_REJECT_REQUEST_TO_JOIN_CLAN_EVENT_VALUE = 28;
    /**
     * <code>S_TRANSFER_CLAN_OWNERSHIP = 29;</code>
     */
    public static final int S_TRANSFER_CLAN_OWNERSHIP_VALUE = 29;
    /**
     * <code>S_RETRIEVE_CLAN_INFO_EVENT = 30;</code>
     */
    public static final int S_RETRIEVE_CLAN_INFO_EVENT_VALUE = 30;
    /**
     * <code>S_CHANGE_CLAN_SETTINGS_EVENT = 31;</code>
     *
     * <pre>
     *S_CHANGE_CLAN_DESCRIPTION_EVENT = 31;
     * </pre>
     */
    public static final int S_CHANGE_CLAN_SETTINGS_EVENT_VALUE = 31;
    /**
     * <code>S_BOOT_PLAYER_FROM_CLAN_EVENT = 32;</code>
     */
    public static final int S_BOOT_PLAYER_FROM_CLAN_EVENT_VALUE = 32;
    /**
     * <code>S_PICK_LOCK_BOX_EVENT = 33;</code>
     */
    public static final int S_PICK_LOCK_BOX_EVENT_VALUE = 33;
    /**
     * <code>S_RETRIEVE_TOURNAMENT_RANKINGS_EVENT = 34;</code>
     */
    public static final int S_RETRIEVE_TOURNAMENT_RANKINGS_EVENT_VALUE = 34;
    /**
     * <code>S_SUBMIT_MONSTER_ENHANCEMENT_EVENT = 35;</code>
     */
    public static final int S_SUBMIT_MONSTER_ENHANCEMENT_EVENT_VALUE = 35;
    /**
     * <code>S_EVOLVE_MONSTER_EVENT = 36;</code>
     */
    public static final int S_EVOLVE_MONSTER_EVENT_VALUE = 36;
    /**
     * <code>S_PURCHASE_BOOSTER_PACK_EVENT = 37;</code>
     */
    public static final int S_PURCHASE_BOOSTER_PACK_EVENT_VALUE = 37;
    /**
     * <code>S_EVOLUTION_FINISHED_EVENT = 38;</code>
     */
    public static final int S_EVOLUTION_FINISHED_EVENT_VALUE = 38;
    /**
     * <code>S_ACHIEVEMENT_PROGRESS_EVENT = 39;</code>
     *
     * <pre>
     *S_CHANGE_CLAN_JOIN_TYPE_EVENT = 39;
     * </pre>
     */
    public static final int S_ACHIEVEMENT_PROGRESS_EVENT_VALUE = 39;
    /**
     * <code>S_PRIVATE_CHAT_POST_EVENT = 40;</code>
     */
    public static final int S_PRIVATE_CHAT_POST_EVENT_VALUE = 40;
    /**
     * <code>S_RETRIEVE_PRIVATE_CHAT_POST_EVENT = 41;</code>
     */
    public static final int S_RETRIEVE_PRIVATE_CHAT_POST_EVENT_VALUE = 41;
    /**
     * <code>S_REDEEM_USER_LOCK_BOX_ITEMS_EVENT = 42;</code>
     */
    public static final int S_REDEEM_USER_LOCK_BOX_ITEMS_EVENT_VALUE = 42;
    /**
     * <code>S_BEGIN_DUNGEON_EVENT = 43;</code>
     */
    public static final int S_BEGIN_DUNGEON_EVENT_VALUE = 43;
    /**
     * <code>S_END_DUNGEON_EVENT = 44;</code>
     */
    public static final int S_END_DUNGEON_EVENT_VALUE = 44;
    /**
     * <code>S_REVIVE_IN_DUNGEON_EVENT = 45;</code>
     */
    public static final int S_REVIVE_IN_DUNGEON_EVENT_VALUE = 45;
    /**
     * <code>S_QUEUE_UP_EVENT = 46;</code>
     */
    public static final int S_QUEUE_UP_EVENT_VALUE = 46;
    /**
     * <code>S_UPDATE_MONSTER_HEALTH_EVENT = 47;</code>
     */
    public static final int S_UPDATE_MONSTER_HEALTH_EVENT_VALUE = 47;
    /**
     * <code>S_HEAL_MONSTER_EVENT = 48;</code>
     */
    public static final int S_HEAL_MONSTER_EVENT_VALUE = 48;
    /**
     * <code>S_ACHIEVEMENT_REDEEM_EVENT = 49;</code>
     *
     * <pre>
     *S_HEAL_MONSTER_WAIT_TIME_COMPLETE_EVENT = 49;
     * </pre>
     */
    public static final int S_ACHIEVEMENT_REDEEM_EVENT_VALUE = 49;
    /**
     * <code>S_ADD_MONSTER_TO_BATTLE_TEAM_EVENT = 50;</code>
     */
    public static final int S_ADD_MONSTER_TO_BATTLE_TEAM_EVENT_VALUE = 50;
    /**
     * <code>S_REMOVE_MONSTER_FROM_BATTLE_TEAM_EVENT = 51;</code>
     */
    public static final int S_REMOVE_MONSTER_FROM_BATTLE_TEAM_EVENT_VALUE = 51;
    /**
     * <code>S_INCREASE_MONSTER_INVENTORY_SLOT_EVENT = 52;</code>
     */
    public static final int S_INCREASE_MONSTER_INVENTORY_SLOT_EVENT_VALUE = 52;
    /**
     * <code>S_ENHANCEMENT_WAIT_TIME_COMPLETE_EVENT = 53;</code>
     */
    public static final int S_ENHANCEMENT_WAIT_TIME_COMPLETE_EVENT_VALUE = 53;
    /**
     * <code>S_COMBINE_USER_MONSTER_PIECES_EVENT = 54;</code>
     */
    public static final int S_COMBINE_USER_MONSTER_PIECES_EVENT_VALUE = 54;
    /**
     * <code>S_SELL_USER_MONSTER_EVENT = 55;</code>
     */
    public static final int S_SELL_USER_MONSTER_EVENT_VALUE = 55;
    /**
     * <code>S_INVITE_FB_FRIENDS_FOR_SLOTS_EVENT = 56;</code>
     */
    public static final int S_INVITE_FB_FRIENDS_FOR_SLOTS_EVENT_VALUE = 56;
    /**
     * <code>S_ACCEPT_AND_REJECT_FB_INVITE_FOR_SLOTS_EVENT = 57;</code>
     */
    public static final int S_ACCEPT_AND_REJECT_FB_INVITE_FOR_SLOTS_EVENT_VALUE = 57;
    /**
     * <code>S_UPDATE_USER_CURRENCY_EVENT = 59;</code>
     */
    public static final int S_UPDATE_USER_CURRENCY_EVENT_VALUE = 59;
    /**
     * <code>S_BEGIN_PVP_BATTLE_EVENT = 60;</code>
     */
    public static final int S_BEGIN_PVP_BATTLE_EVENT_VALUE = 60;
    /**
     * <code>S_END_PVP_BATTLE_EVENT = 61;</code>
     */
    public static final int S_END_PVP_BATTLE_EVENT_VALUE = 61;
    /**
     * <code>S_BEGIN_CLAN_RAID_EVENT = 62;</code>
     */
    public static final int S_BEGIN_CLAN_RAID_EVENT_VALUE = 62;
    /**
     * <code>S_ATTACK_CLAN_RAID_MONSTER_EVENT = 63;</code>
     */
    public static final int S_ATTACK_CLAN_RAID_MONSTER_EVENT_VALUE = 63;
    /**
     * <code>S_RECORD_CLAN_RAID_STATS_EVENT = 64;</code>
     */
    public static final int S_RECORD_CLAN_RAID_STATS_EVENT_VALUE = 64;
    /**
     * <code>S_PROMOTE_DEMOTE_CLAN_MEMBER_EVENT = 65;</code>
     */
    public static final int S_PROMOTE_DEMOTE_CLAN_MEMBER_EVENT_VALUE = 65;
    /**
     * <code>S_SET_GAME_CENTER_ID_EVENT = 66;</code>
     */
    public static final int S_SET_GAME_CENTER_ID_EVENT_VALUE = 66;
    /**
     * <code>S_SPAWN_OBSTACLE_EVENT = 67;</code>
     */
    public static final int S_SPAWN_OBSTACLE_EVENT_VALUE = 67;
    /**
     * <code>S_BEGIN_OBSTACLE_REMOVAL_EVENT = 68;</code>
     */
    public static final int S_BEGIN_OBSTACLE_REMOVAL_EVENT_VALUE = 68;
    /**
     * <code>S_OBSTACLE_REMOVAL_COMPLETE_EVENT = 69;</code>
     */
    public static final int S_OBSTACLE_REMOVAL_COMPLETE_EVENT_VALUE = 69;
    /**
     * <code>S_SPAWN_MINI_JOB_EVENT = 70;</code>
     */
    public static final int S_SPAWN_MINI_JOB_EVENT_VALUE = 70;
    /**
     * <code>S_BEGIN_MINI_JOB_EVENT = 71;</code>
     */
    public static final int S_BEGIN_MINI_JOB_EVENT_VALUE = 71;
    /**
     * <code>S_COMPLETE_MINI_JOB_EVENT = 72;</code>
     */
    public static final int S_COMPLETE_MINI_JOB_EVENT_VALUE = 72;
    /**
     * <code>S_REDEEM_MINI_JOB_EVENT = 73;</code>
     */
    public static final int S_REDEEM_MINI_JOB_EVENT_VALUE = 73;
    /**
     * <code>S_SET_AVATAR_MONSTER_EVENT = 74;</code>
     */
    public static final int S_SET_AVATAR_MONSTER_EVENT_VALUE = 74;
    /**
     * <code>S_RESTRICT_USER_MONSTER_EVENT = 75;</code>
     */
    public static final int S_RESTRICT_USER_MONSTER_EVENT_VALUE = 75;
    /**
     * <code>S_UNRESTRICT_USER_MONSTER_EVENT = 76;</code>
     */
    public static final int S_UNRESTRICT_USER_MONSTER_EVENT_VALUE = 76;
    /**
     * <code>S_ENHANCE_MONSTER_EVENT = 77;</code>
     */
    public static final int S_ENHANCE_MONSTER_EVENT_VALUE = 77;
    /**
     * <code>S_TRADE_ITEM_FOR_BOOSTER_EVENT = 78;</code>
     */
    public static final int S_TRADE_ITEM_FOR_BOOSTER_EVENT_VALUE = 78;
    /**
     * <code>S_SOLICIT_CLAN_HELP_EVENT = 79;</code>
     */
    public static final int S_SOLICIT_CLAN_HELP_EVENT_VALUE = 79;
    /**
     * <code>S_GIVE_CLAN_HELP_EVENT = 80;</code>
     */
    public static final int S_GIVE_CLAN_HELP_EVENT_VALUE = 80;
    /**
     * <code>S_END_CLAN_HELP_EVENT = 81;</code>
     */
    public static final int S_END_CLAN_HELP_EVENT_VALUE = 81;
    /**
     * <code>S_INVITE_TO_CLAN_EVENT = 82;</code>
     */
    public static final int S_INVITE_TO_CLAN_EVENT_VALUE = 82;
    /**
     * <code>S_ACCEPT_OR_REJECT_CLAN_INVITE_EVENT = 83;</code>
     */
    public static final int S_ACCEPT_OR_REJECT_CLAN_INVITE_EVENT_VALUE = 83;
    /**
     * <code>S_COLLECT_MONSTER_ENHANCEMENT_EVENT = 84;</code>
     */
    public static final int S_COLLECT_MONSTER_ENHANCEMENT_EVENT_VALUE = 84;
    /**
     * <code>S_TRADE_ITEM_FOR_SPEED_UPS_EVENT = 85;</code>
     */
    public static final int S_TRADE_ITEM_FOR_SPEED_UPS_EVENT_VALUE = 85;
    /**
     * <code>S_REMOVE_USER_ITEM_USED_EVENT = 86;</code>
     */
    public static final int S_REMOVE_USER_ITEM_USED_EVENT_VALUE = 86;
    /**
     * <code>S_TRADE_ITEM_FOR_RESOURCES_EVENT = 87;</code>
     */
    public static final int S_TRADE_ITEM_FOR_RESOURCES_EVENT_VALUE = 87;
    /**
     * <code>S_REDEEM_SECRET_GIFT_EVENT = 88;</code>
     */
    public static final int S_REDEEM_SECRET_GIFT_EVENT_VALUE = 88;
    /**
     * <code>S_SET_DEFENDING_MSG_EVENT = 89;</code>
     */
    public static final int S_SET_DEFENDING_MSG_EVENT_VALUE = 89;
    /**
     * <code>S_BEGIN_CLAN_AVENGING_EVENT = 90;</code>
     */
    public static final int S_BEGIN_CLAN_AVENGING_EVENT_VALUE = 90;
    /**
     * <code>S_END_CLAN_AVENGING_EVENT = 91;</code>
     */
    public static final int S_END_CLAN_AVENGING_EVENT_VALUE = 91;
    /**
     * <code>S_AVENGE_CLAN_MATE_EVENT = 92;</code>
     */
    public static final int S_AVENGE_CLAN_MATE_EVENT_VALUE = 92;
    /**
     * <code>S_UPDATE_CLIENT_TASK_STATE_EVENT = 93;</code>
     */
    public static final int S_UPDATE_CLIENT_TASK_STATE_EVENT_VALUE = 93;
    /**
     * <code>S_SOLICIT_TEAM_DONATION_EVENT = 94;</code>
     */
    public static final int S_SOLICIT_TEAM_DONATION_EVENT_VALUE = 94;
    /**
     * <code>S_FULFILL_TEAM_DONATION_SOLICITATION_EVENT = 95;</code>
     */
    public static final int S_FULFILL_TEAM_DONATION_SOLICITATION_EVENT_VALUE = 95;
    /**
     * <code>S_VOID_TEAM_DONATION_SOLICITATION_EVENT = 96;</code>
     */
    public static final int S_VOID_TEAM_DONATION_SOLICITATION_EVENT_VALUE = 96;
    /**
     * <code>S_RETRIEVE_USER_MONSTER_TEAM_EVENT = 97;</code>
     */
    public static final int S_RETRIEVE_USER_MONSTER_TEAM_EVENT_VALUE = 97;
    /**
     * <code>S_DESTROY_MONEY_TREE_STRUCTURE_EVENT = 98;</code>
     */
    public static final int S_DESTROY_MONEY_TREE_STRUCTURE_EVENT_VALUE = 98;
    /**
     * <code>S_UPDATE_CLIENT_USER_EVENT = 101;</code>
     *
     * <pre>
     *STOP AT 99, SKIP TO 200
     * </pre>
     */
    public static final int S_UPDATE_CLIENT_USER_EVENT_VALUE = 101;
    /**
     * <code>S_REFERRAL_CODE_USED_EVENT = 102;</code>
     */
    public static final int S_REFERRAL_CODE_USED_EVENT_VALUE = 102;
    /**
     * <code>S_PURGE_STATIC_DATA_EVENT = 103;</code>
     */
    public static final int S_PURGE_STATIC_DATA_EVENT_VALUE = 103;
    /**
     * <code>S_RECEIVED_GROUP_CHAT_EVENT = 104;</code>
     */
    public static final int S_RECEIVED_GROUP_CHAT_EVENT_VALUE = 104;
    /**
     * <code>S_SEND_ADMIN_MESSAGE_EVENT = 105;</code>
     */
    public static final int S_SEND_ADMIN_MESSAGE_EVENT_VALUE = 105;
    /**
     * <code>S_GENERAL_NOTIFICATION_EVENT = 106;</code>
     */
    public static final int S_GENERAL_NOTIFICATION_EVENT_VALUE = 106;
    /**
     * <code>S_RECEIVED_RARE_BOOSTER_PURCHASE_EVENT = 107;</code>
     */
    public static final int S_RECEIVED_RARE_BOOSTER_PURCHASE_EVENT_VALUE = 107;
    /**
     * <code>S_AWARD_CLAN_RAID_STAGE_REWARD_EVENT = 108;</code>
     */
    public static final int S_AWARD_CLAN_RAID_STAGE_REWARD_EVENT_VALUE = 108;
    /**
     * <code>S_FORCE_LOGOUT_EVENT = 109;</code>
     */
    public static final int S_FORCE_LOGOUT_EVENT_VALUE = 109;
    /**
     * <code>S_RETRIEVE_CLAN_DATA_EVENT = 110;</code>
     */
    public static final int S_RETRIEVE_CLAN_DATA_EVENT_VALUE = 110;
    /**
     * <code>S_RECEIVED_GIFT_EVENT = 111;</code>
     */
    public static final int S_RECEIVED_GIFT_EVENT_VALUE = 111;
    /**
     * <code>S_DEV_EVENT = 200;</code>
     */
    public static final int S_DEV_EVENT_VALUE = 200;
    /**
     * <code>S_PERFORM_RESEARCH_EVENT = 201;</code>
     */
    public static final int S_PERFORM_RESEARCH_EVENT_VALUE = 201;
    /**
     * <code>S_FINISH_PERFORMING_RESEARCH_EVENT = 202;</code>
     */
    public static final int S_FINISH_PERFORMING_RESEARCH_EVENT_VALUE = 202;
    /**
     * <code>S_CUSTOMIZE_PVP_BOARD_OBSTACLE_EVENT = 203;</code>
     */
    public static final int S_CUSTOMIZE_PVP_BOARD_OBSTACLE_EVENT_VALUE = 203;
    /**
     * <code>S_CREATE_BATTLE_ITEM_EVENT = 204;</code>
     */
    public static final int S_CREATE_BATTLE_ITEM_EVENT_VALUE = 204;
    /**
     * <code>S_DISCARD_BATTLE_ITEM_EVENT = 205;</code>
     */
    public static final int S_DISCARD_BATTLE_ITEM_EVENT_VALUE = 205;
    /**
     * <code>S_COMPLETE_BATTLE_ITEM_EVENT = 206;</code>
     */
    public static final int S_COMPLETE_BATTLE_ITEM_EVENT_VALUE = 206;
    /**
     * <code>S_REDEEM_MINI_EVENT_REWARD_EVENT = 207;</code>
     */
    public static final int S_REDEEM_MINI_EVENT_REWARD_EVENT_VALUE = 207;
    /**
     * <code>S_RETRIEVE_MINI_EVENT_EVENT = 208;</code>
     */
    public static final int S_RETRIEVE_MINI_EVENT_EVENT_VALUE = 208;
    /**
     * <code>S_UPDATE_MINI_EVENT_EVENT = 209;</code>
     */
    public static final int S_UPDATE_MINI_EVENT_EVENT_VALUE = 209;
    /**
     * <code>S_TRANSLATE_SELECT_MESSAGES_EVENT = 210;</code>
     */
    public static final int S_TRANSLATE_SELECT_MESSAGES_EVENT_VALUE = 210;
    /**
     * <code>S_UPDATE_USER_STRENGTH_EVENT = 211;</code>
     */
    public static final int S_UPDATE_USER_STRENGTH_EVENT_VALUE = 211;
    /**
     * <code>S_REFRESH_MINI_JOB_EVENT = 212;</code>
     */
    public static final int S_REFRESH_MINI_JOB_EVENT_VALUE = 212;
    /**
     * <code>S_SET_TANGO_ID_EVENT = 213;</code>
     */
    public static final int S_SET_TANGO_ID_EVENT_VALUE = 213;
    /**
     * <code>S_SEND_TANGO_GIFT_EVENT = 214;</code>
     */
    public static final int S_SEND_TANGO_GIFT_EVENT_VALUE = 214;
    /**
     * <code>S_DELETE_GIFT_EVENT = 215;</code>
     */
    public static final int S_DELETE_GIFT_EVENT_VALUE = 215;
    /**
     * <code>S_COLLECT_GIFT_EVENT = 216;</code>
     */
    public static final int S_COLLECT_GIFT_EVENT_VALUE = 216;
    /**
     * <code>S_RETRIEVE_BATTLE_REPLAY_EVENT = 217;</code>
     */
    public static final int S_RETRIEVE_BATTLE_REPLAY_EVENT_VALUE = 217;
    /**
     * <code>S_RETRIEVE_STRENGTH_LEADER_BOARD_EVENT = 503;</code>
     *
     * <pre>
     *S_COLLECT_CLAN_GIFTS_EVENT = 500;
     *S_DELETE_CLAN_GIFTS_EVENT = 501;
     *S_RECEIVED_CLAN_GIFTS_EVENT = 502;
     * </pre>
     */
    public static final int S_RETRIEVE_STRENGTH_LEADER_BOARD_EVENT_VALUE = 503;
    /**
     * <code>S_RECONNECT_EVENT = 504;</code>
     */
    public static final int S_RECONNECT_EVENT_VALUE = 504;
    /**
     * <code>S_PURCHASE_ITEMS_WITH_GEMS_EVENT = 505;</code>
     */
    public static final int S_PURCHASE_ITEMS_WITH_GEMS_EVENT_VALUE = 505;
    /**
     * <code>S_RETRIEVE_MINI_EVENT_LEADER_BOARD_EVENT = 506;</code>
     */
    public static final int S_RETRIEVE_MINI_EVENT_LEADER_BOARD_EVENT_VALUE = 506;


    public final int getNumber() { return value; }

    public static EventProtocolResponse valueOf(int value) {
      switch (value) {
        case 1: return S_STARTUP_EVENT;
        case 2: return S_IN_APP_PURCHASE_EVENT;
        case 3: return S_PURCHASE_NORM_STRUCTURE_EVENT;
        case 4: return S_MOVE_OR_ROTATE_NORM_STRUCTURE_EVENT;
        case 5: return S_SET_FACEBOOK_ID_EVENT;
        case 6: return S_UPGRADE_NORM_STRUCTURE_EVENT;
        case 7: return S_RETRIEVE_CURRENCY_FROM_NORM_STRUCTURE_EVENT;
        case 8: return S_FINISH_NORM_STRUCT_WAITTIME_WITH_DIAMONDS_EVENT;
        case 9: return S_NORM_STRUCT_WAIT_COMPLETE_EVENT;
        case 10: return S_LOAD_PLAYER_CITY_EVENT;
        case 11: return S_EXCHANGE_GEMS_FOR_RESOURCES_EVENT;
        case 12: return S_QUEST_ACCEPT_EVENT;
        case 13: return S_QUEST_PROGRESS_EVENT;
        case 14: return S_QUEST_REDEEM_EVENT;
        case 15: return S_PURCHASE_CITY_EXPANSION_EVENT;
        case 16: return S_EXPANSION_WAIT_COMPLETE_EVENT;
        case 17: return S_LEVEL_UP_EVENT;
        case 18: return S_ENABLE_APNS_EVENT;
        case 19: return S_USER_CREATE_EVENT;
        case 20: return S_LOAD_CITY_EVENT;
        case 21: return S_RETRIEVE_USERS_FOR_USER_IDS_EVENT;
        case 22: return S_EARN_FREE_DIAMONDS_EVENT;
        case 23: return S_SEND_GROUP_CHAT_EVENT;
        case 24: return S_CREATE_CLAN_EVENT;
        case 25: return S_LEAVE_CLAN_EVENT;
        case 26: return S_REQUEST_JOIN_CLAN_EVENT;
        case 27: return S_RETRACT_REQUEST_JOIN_CLAN_EVENT;
        case 28: return S_APPROVE_OR_REJECT_REQUEST_TO_JOIN_CLAN_EVENT;
        case 29: return S_TRANSFER_CLAN_OWNERSHIP;
        case 30: return S_RETRIEVE_CLAN_INFO_EVENT;
        case 31: return S_CHANGE_CLAN_SETTINGS_EVENT;
        case 32: return S_BOOT_PLAYER_FROM_CLAN_EVENT;
        case 33: return S_PICK_LOCK_BOX_EVENT;
        case 34: return S_RETRIEVE_TOURNAMENT_RANKINGS_EVENT;
        case 35: return S_SUBMIT_MONSTER_ENHANCEMENT_EVENT;
        case 36: return S_EVOLVE_MONSTER_EVENT;
        case 37: return S_PURCHASE_BOOSTER_PACK_EVENT;
        case 38: return S_EVOLUTION_FINISHED_EVENT;
        case 39: return S_ACHIEVEMENT_PROGRESS_EVENT;
        case 40: return S_PRIVATE_CHAT_POST_EVENT;
        case 41: return S_RETRIEVE_PRIVATE_CHAT_POST_EVENT;
        case 42: return S_REDEEM_USER_LOCK_BOX_ITEMS_EVENT;
        case 43: return S_BEGIN_DUNGEON_EVENT;
        case 44: return S_END_DUNGEON_EVENT;
        case 45: return S_REVIVE_IN_DUNGEON_EVENT;
        case 46: return S_QUEUE_UP_EVENT;
        case 47: return S_UPDATE_MONSTER_HEALTH_EVENT;
        case 48: return S_HEAL_MONSTER_EVENT;
        case 49: return S_ACHIEVEMENT_REDEEM_EVENT;
        case 50: return S_ADD_MONSTER_TO_BATTLE_TEAM_EVENT;
        case 51: return S_REMOVE_MONSTER_FROM_BATTLE_TEAM_EVENT;
        case 52: return S_INCREASE_MONSTER_INVENTORY_SLOT_EVENT;
        case 53: return S_ENHANCEMENT_WAIT_TIME_COMPLETE_EVENT;
        case 54: return S_COMBINE_USER_MONSTER_PIECES_EVENT;
        case 55: return S_SELL_USER_MONSTER_EVENT;
        case 56: return S_INVITE_FB_FRIENDS_FOR_SLOTS_EVENT;
        case 57: return S_ACCEPT_AND_REJECT_FB_INVITE_FOR_SLOTS_EVENT;
        case 59: return S_UPDATE_USER_CURRENCY_EVENT;
        case 60: return S_BEGIN_PVP_BATTLE_EVENT;
        case 61: return S_END_PVP_BATTLE_EVENT;
        case 62: return S_BEGIN_CLAN_RAID_EVENT;
        case 63: return S_ATTACK_CLAN_RAID_MONSTER_EVENT;
        case 64: return S_RECORD_CLAN_RAID_STATS_EVENT;
        case 65: return S_PROMOTE_DEMOTE_CLAN_MEMBER_EVENT;
        case 66: return S_SET_GAME_CENTER_ID_EVENT;
        case 67: return S_SPAWN_OBSTACLE_EVENT;
        case 68: return S_BEGIN_OBSTACLE_REMOVAL_EVENT;
        case 69: return S_OBSTACLE_REMOVAL_COMPLETE_EVENT;
        case 70: return S_SPAWN_MINI_JOB_EVENT;
        case 71: return S_BEGIN_MINI_JOB_EVENT;
        case 72: return S_COMPLETE_MINI_JOB_EVENT;
        case 73: return S_REDEEM_MINI_JOB_EVENT;
        case 74: return S_SET_AVATAR_MONSTER_EVENT;
        case 75: return S_RESTRICT_USER_MONSTER_EVENT;
        case 76: return S_UNRESTRICT_USER_MONSTER_EVENT;
        case 77: return S_ENHANCE_MONSTER_EVENT;
        case 78: return S_TRADE_ITEM_FOR_BOOSTER_EVENT;
        case 79: return S_SOLICIT_CLAN_HELP_EVENT;
        case 80: return S_GIVE_CLAN_HELP_EVENT;
        case 81: return S_END_CLAN_HELP_EVENT;
        case 82: return S_INVITE_TO_CLAN_EVENT;
        case 83: return S_ACCEPT_OR_REJECT_CLAN_INVITE_EVENT;
        case 84: return S_COLLECT_MONSTER_ENHANCEMENT_EVENT;
        case 85: return S_TRADE_ITEM_FOR_SPEED_UPS_EVENT;
        case 86: return S_REMOVE_USER_ITEM_USED_EVENT;
        case 87: return S_TRADE_ITEM_FOR_RESOURCES_EVENT;
        case 88: return S_REDEEM_SECRET_GIFT_EVENT;
        case 89: return S_SET_DEFENDING_MSG_EVENT;
        case 90: return S_BEGIN_CLAN_AVENGING_EVENT;
        case 91: return S_END_CLAN_AVENGING_EVENT;
        case 92: return S_AVENGE_CLAN_MATE_EVENT;
        case 93: return S_UPDATE_CLIENT_TASK_STATE_EVENT;
        case 94: return S_SOLICIT_TEAM_DONATION_EVENT;
        case 95: return S_FULFILL_TEAM_DONATION_SOLICITATION_EVENT;
        case 96: return S_VOID_TEAM_DONATION_SOLICITATION_EVENT;
        case 97: return S_RETRIEVE_USER_MONSTER_TEAM_EVENT;
        case 98: return S_DESTROY_MONEY_TREE_STRUCTURE_EVENT;
        case 101: return S_UPDATE_CLIENT_USER_EVENT;
        case 102: return S_REFERRAL_CODE_USED_EVENT;
        case 103: return S_PURGE_STATIC_DATA_EVENT;
        case 104: return S_RECEIVED_GROUP_CHAT_EVENT;
        case 105: return S_SEND_ADMIN_MESSAGE_EVENT;
        case 106: return S_GENERAL_NOTIFICATION_EVENT;
        case 107: return S_RECEIVED_RARE_BOOSTER_PURCHASE_EVENT;
        case 108: return S_AWARD_CLAN_RAID_STAGE_REWARD_EVENT;
        case 109: return S_FORCE_LOGOUT_EVENT;
        case 110: return S_RETRIEVE_CLAN_DATA_EVENT;
        case 111: return S_RECEIVED_GIFT_EVENT;
        case 200: return S_DEV_EVENT;
        case 201: return S_PERFORM_RESEARCH_EVENT;
        case 202: return S_FINISH_PERFORMING_RESEARCH_EVENT;
        case 203: return S_CUSTOMIZE_PVP_BOARD_OBSTACLE_EVENT;
        case 204: return S_CREATE_BATTLE_ITEM_EVENT;
        case 205: return S_DISCARD_BATTLE_ITEM_EVENT;
        case 206: return S_COMPLETE_BATTLE_ITEM_EVENT;
        case 207: return S_REDEEM_MINI_EVENT_REWARD_EVENT;
        case 208: return S_RETRIEVE_MINI_EVENT_EVENT;
        case 209: return S_UPDATE_MINI_EVENT_EVENT;
        case 210: return S_TRANSLATE_SELECT_MESSAGES_EVENT;
        case 211: return S_UPDATE_USER_STRENGTH_EVENT;
        case 212: return S_REFRESH_MINI_JOB_EVENT;
        case 213: return S_SET_TANGO_ID_EVENT;
        case 214: return S_SEND_TANGO_GIFT_EVENT;
        case 215: return S_DELETE_GIFT_EVENT;
        case 216: return S_COLLECT_GIFT_EVENT;
        case 217: return S_RETRIEVE_BATTLE_REPLAY_EVENT;
        case 503: return S_RETRIEVE_STRENGTH_LEADER_BOARD_EVENT;
        case 504: return S_RECONNECT_EVENT;
        case 505: return S_PURCHASE_ITEMS_WITH_GEMS_EVENT;
        case 506: return S_RETRIEVE_MINI_EVENT_LEADER_BOARD_EVENT;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<EventProtocolResponse>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<EventProtocolResponse>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<EventProtocolResponse>() {
            public EventProtocolResponse findValueByNumber(int number) {
              return EventProtocolResponse.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.lvl6.proto.ProtocolsProto.getDescriptor().getEnumTypes().get(1);
    }

    private static final EventProtocolResponse[] VALUES = values();

    public static EventProtocolResponse valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private EventProtocolResponse(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:com.lvl6.proto.EventProtocolResponse)
  }

  public interface EventProtoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.lvl6.proto.EventProto)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional int32 eventType = 1;</code>
     */
    boolean hasEventType();
    /**
     * <code>optional int32 eventType = 1;</code>
     */
    int getEventType();

    /**
     * <code>optional int32 tagNum = 2;</code>
     */
    boolean hasTagNum();
    /**
     * <code>optional int32 tagNum = 2;</code>
     */
    int getTagNum();

    /**
     * <code>optional string eventUuid = 3;</code>
     */
    boolean hasEventUuid();
    /**
     * <code>optional string eventUuid = 3;</code>
     */
    java.lang.String getEventUuid();
    /**
     * <code>optional string eventUuid = 3;</code>
     */
    com.google.protobuf.ByteString
        getEventUuidBytes();

    /**
     * <code>optional bytes eventBytes = 4;</code>
     */
    boolean hasEventBytes();
    /**
     * <code>optional bytes eventBytes = 4;</code>
     */
    com.google.protobuf.ByteString getEventBytes();
  }
  /**
   * Protobuf type {@code com.lvl6.proto.EventProto}
   */
  public static final class EventProto extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:com.lvl6.proto.EventProto)
      EventProtoOrBuilder {
    // Use EventProto.newBuilder() to construct.
    private EventProto(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private EventProto(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final EventProto defaultInstance;
    public static EventProto getDefaultInstance() {
      return defaultInstance;
    }

    public EventProto getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private EventProto(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              eventType_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              tagNum_ = input.readInt32();
              break;
            }
            case 26: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000004;
              eventUuid_ = bs;
              break;
            }
            case 34: {
              bitField0_ |= 0x00000008;
              eventBytes_ = input.readBytes();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.lvl6.proto.ProtocolsProto.internal_static_com_lvl6_proto_EventProto_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.lvl6.proto.ProtocolsProto.internal_static_com_lvl6_proto_EventProto_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.lvl6.proto.ProtocolsProto.EventProto.class, com.lvl6.proto.ProtocolsProto.EventProto.Builder.class);
    }

    public static com.google.protobuf.Parser<EventProto> PARSER =
        new com.google.protobuf.AbstractParser<EventProto>() {
      public EventProto parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new EventProto(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<EventProto> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int EVENTTYPE_FIELD_NUMBER = 1;
    private int eventType_;
    /**
     * <code>optional int32 eventType = 1;</code>
     */
    public boolean hasEventType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 eventType = 1;</code>
     */
    public int getEventType() {
      return eventType_;
    }

    public static final int TAGNUM_FIELD_NUMBER = 2;
    private int tagNum_;
    /**
     * <code>optional int32 tagNum = 2;</code>
     */
    public boolean hasTagNum() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 tagNum = 2;</code>
     */
    public int getTagNum() {
      return tagNum_;
    }

    public static final int EVENTUUID_FIELD_NUMBER = 3;
    private java.lang.Object eventUuid_;
    /**
     * <code>optional string eventUuid = 3;</code>
     */
    public boolean hasEventUuid() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional string eventUuid = 3;</code>
     */
    public java.lang.String getEventUuid() {
      java.lang.Object ref = eventUuid_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          eventUuid_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string eventUuid = 3;</code>
     */
    public com.google.protobuf.ByteString
        getEventUuidBytes() {
      java.lang.Object ref = eventUuid_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        eventUuid_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int EVENTBYTES_FIELD_NUMBER = 4;
    private com.google.protobuf.ByteString eventBytes_;
    /**
     * <code>optional bytes eventBytes = 4;</code>
     */
    public boolean hasEventBytes() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional bytes eventBytes = 4;</code>
     */
    public com.google.protobuf.ByteString getEventBytes() {
      return eventBytes_;
    }

    private void initFields() {
      eventType_ = 0;
      tagNum_ = 0;
      eventUuid_ = "";
      eventBytes_ = com.google.protobuf.ByteString.EMPTY;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, eventType_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, tagNum_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBytes(3, getEventUuidBytes());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBytes(4, eventBytes_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, eventType_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, tagNum_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, getEventUuidBytes());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(4, eventBytes_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.lvl6.proto.ProtocolsProto.EventProto parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.lvl6.proto.ProtocolsProto.EventProto parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.lvl6.proto.ProtocolsProto.EventProto parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.lvl6.proto.ProtocolsProto.EventProto parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.lvl6.proto.ProtocolsProto.EventProto parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.lvl6.proto.ProtocolsProto.EventProto parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.lvl6.proto.ProtocolsProto.EventProto parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.lvl6.proto.ProtocolsProto.EventProto parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.lvl6.proto.ProtocolsProto.EventProto parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.lvl6.proto.ProtocolsProto.EventProto parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.lvl6.proto.ProtocolsProto.EventProto prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.lvl6.proto.EventProto}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.lvl6.proto.EventProto)
        com.lvl6.proto.ProtocolsProto.EventProtoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.lvl6.proto.ProtocolsProto.internal_static_com_lvl6_proto_EventProto_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.lvl6.proto.ProtocolsProto.internal_static_com_lvl6_proto_EventProto_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.lvl6.proto.ProtocolsProto.EventProto.class, com.lvl6.proto.ProtocolsProto.EventProto.Builder.class);
      }

      // Construct using com.lvl6.proto.ProtocolsProto.EventProto.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        eventType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        tagNum_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        eventUuid_ = "";
        bitField0_ = (bitField0_ & ~0x00000004);
        eventBytes_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.lvl6.proto.ProtocolsProto.internal_static_com_lvl6_proto_EventProto_descriptor;
      }

      public com.lvl6.proto.ProtocolsProto.EventProto getDefaultInstanceForType() {
        return com.lvl6.proto.ProtocolsProto.EventProto.getDefaultInstance();
      }

      public com.lvl6.proto.ProtocolsProto.EventProto build() {
        com.lvl6.proto.ProtocolsProto.EventProto result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.lvl6.proto.ProtocolsProto.EventProto buildPartial() {
        com.lvl6.proto.ProtocolsProto.EventProto result = new com.lvl6.proto.ProtocolsProto.EventProto(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.eventType_ = eventType_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.tagNum_ = tagNum_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.eventUuid_ = eventUuid_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.eventBytes_ = eventBytes_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.lvl6.proto.ProtocolsProto.EventProto) {
          return mergeFrom((com.lvl6.proto.ProtocolsProto.EventProto)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.lvl6.proto.ProtocolsProto.EventProto other) {
        if (other == com.lvl6.proto.ProtocolsProto.EventProto.getDefaultInstance()) return this;
        if (other.hasEventType()) {
          setEventType(other.getEventType());
        }
        if (other.hasTagNum()) {
          setTagNum(other.getTagNum());
        }
        if (other.hasEventUuid()) {
          bitField0_ |= 0x00000004;
          eventUuid_ = other.eventUuid_;
          onChanged();
        }
        if (other.hasEventBytes()) {
          setEventBytes(other.getEventBytes());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.lvl6.proto.ProtocolsProto.EventProto parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.lvl6.proto.ProtocolsProto.EventProto) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int eventType_ ;
      /**
       * <code>optional int32 eventType = 1;</code>
       */
      public boolean hasEventType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 eventType = 1;</code>
       */
      public int getEventType() {
        return eventType_;
      }
      /**
       * <code>optional int32 eventType = 1;</code>
       */
      public Builder setEventType(int value) {
        bitField0_ |= 0x00000001;
        eventType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 eventType = 1;</code>
       */
      public Builder clearEventType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        eventType_ = 0;
        onChanged();
        return this;
      }

      private int tagNum_ ;
      /**
       * <code>optional int32 tagNum = 2;</code>
       */
      public boolean hasTagNum() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 tagNum = 2;</code>
       */
      public int getTagNum() {
        return tagNum_;
      }
      /**
       * <code>optional int32 tagNum = 2;</code>
       */
      public Builder setTagNum(int value) {
        bitField0_ |= 0x00000002;
        tagNum_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 tagNum = 2;</code>
       */
      public Builder clearTagNum() {
        bitField0_ = (bitField0_ & ~0x00000002);
        tagNum_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object eventUuid_ = "";
      /**
       * <code>optional string eventUuid = 3;</code>
       */
      public boolean hasEventUuid() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional string eventUuid = 3;</code>
       */
      public java.lang.String getEventUuid() {
        java.lang.Object ref = eventUuid_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            eventUuid_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string eventUuid = 3;</code>
       */
      public com.google.protobuf.ByteString
          getEventUuidBytes() {
        java.lang.Object ref = eventUuid_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          eventUuid_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string eventUuid = 3;</code>
       */
      public Builder setEventUuid(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        eventUuid_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string eventUuid = 3;</code>
       */
      public Builder clearEventUuid() {
        bitField0_ = (bitField0_ & ~0x00000004);
        eventUuid_ = getDefaultInstance().getEventUuid();
        onChanged();
        return this;
      }
      /**
       * <code>optional string eventUuid = 3;</code>
       */
      public Builder setEventUuidBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        eventUuid_ = value;
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString eventBytes_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes eventBytes = 4;</code>
       */
      public boolean hasEventBytes() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional bytes eventBytes = 4;</code>
       */
      public com.google.protobuf.ByteString getEventBytes() {
        return eventBytes_;
      }
      /**
       * <code>optional bytes eventBytes = 4;</code>
       */
      public Builder setEventBytes(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        eventBytes_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes eventBytes = 4;</code>
       */
      public Builder clearEventBytes() {
        bitField0_ = (bitField0_ & ~0x00000008);
        eventBytes_ = getDefaultInstance().getEventBytes();
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.lvl6.proto.EventProto)
    }

    static {
      defaultInstance = new EventProto(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.lvl6.proto.EventProto)
  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_lvl6_proto_EventProto_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_lvl6_proto_EventProto_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\017Protocols.proto\022\016com.lvl6.proto\032\026Achie" +
      "vementStuff.proto\032\014Battle.proto\032\020BattleI" +
      "tem.proto\032\013Board.proto\032\026BoosterPackStuff" +
      ".proto\032\nChat.proto\032\nCity.proto\032\nClan.pro" +
      "to\032\tDev.proto\032\026EventAchievement.proto\032\017E" +
      "ventApns.proto\032\025EventBattleItem.proto\032\026E" +
      "ventBoosterPack.proto\032\017EventChat.proto\032\017" +
      "EventCity.proto\032\017EventClan.proto\032\016EventD" +
      "ev.proto\032\022EventDungeon.proto\032\030EventInApp" +
      "Purchase.proto\032\017EventItem.proto\032\026EventLe",
      "aderBoard.proto\032\024EventMiniEvent.proto\032\022E" +
      "ventMiniJob.proto\032\022EventMonster.proto\032\016E" +
      "ventPvp.proto\032\020EventQuest.proto\032\023EventRe" +
      "ferral.proto\032\023EventResearch.proto\032\021Event" +
      "Reward.proto\032\022EventStartup.proto\032\025EventS" +
      "taticData.proto\032\024EventStructure.proto\032\025E" +
      "ventTournament.proto\032\017EventUser.proto\032\023I" +
      "nAppPurchase.proto\032\nItem.proto\032\021LeaderBo" +
      "ard.proto\032\017MiniEvent.proto\032\023MiniJobConfi" +
      "g.proto\032\022MonsterStuff.proto\032\022Prerequisit",
      "e.proto\032\013Quest.proto\032\016Research.proto\032\014Re" +
      "ward.proto\032\026SharedEnumConfig.proto\032\013Skil" +
      "l.proto\032\020StaticData.proto\032\017Structure.pro" +
      "to\032\nTask.proto\032\025TournamentStuff.proto\032\nU" +
      "ser.proto\"V\n\nEventProto\022\021\n\teventType\030\001 \001" +
      "(\005\022\016\n\006tagNum\030\002 \001(\005\022\021\n\teventUuid\030\003 \001(\t\022\022\n" +
      "\neventBytes\030\004 \001(\014*\214 \n\024EventProtocolReque" +
      "st\022\023\n\017C_STARTUP_EVENT\020\001\022\033\n\027C_IN_APP_PURC" +
      "HASE_EVENT\020\002\022#\n\037C_PURCHASE_NORM_STRUCTUR" +
      "E_EVENT\020\003\022)\n%C_MOVE_OR_ROTATE_NORM_STRUC",
      "TURE_EVENT\020\004\022\033\n\027C_SET_FACEBOOK_ID_EVENT\020" +
      "\005\022\"\n\036C_UPGRADE_NORM_STRUCTURE_EVENT\020\006\0221\n" +
      "-C_RETRIEVE_CURRENCY_FROM_NORM_STRUCTURE" +
      "_EVENT\020\007\0225\n1C_FINISH_NORM_STRUCT_WAITTIM" +
      "E_WITH_DIAMONDS_EVENT\020\010\022%\n!C_NORM_STRUCT" +
      "_WAIT_COMPLETE_EVENT\020\t\022\034\n\030C_LOAD_PLAYER_" +
      "CITY_EVENT\020\n\022\'\n#C_EXCHANGE_GEMS_FOR_RESO" +
      "URCES_EVENT\020\013\022\030\n\024C_QUEST_ACCEPT_EVENT\020\014\022" +
      "\032\n\026C_QUEST_PROGRESS_EVENT\020\r\022\030\n\024C_QUEST_R" +
      "EDEEM_EVENT\020\016\022#\n\037C_PURCHASE_CITY_EXPANSI",
      "ON_EVENT\020\017\022#\n\037C_EXPANSION_WAIT_COMPLETE_" +
      "EVENT\020\020\022\024\n\020C_LEVEL_UP_EVENT\020\021\022\027\n\023C_ENABL" +
      "E_APNS_EVENT\020\022\022\027\n\023C_USER_CREATE_EVENT\020\023\022" +
      "\025\n\021C_LOAD_CITY_EVENT\020\024\022\'\n#C_RETRIEVE_USE" +
      "RS_FOR_USER_IDS_EVENT\020\025\022\036\n\032C_EARN_FREE_D" +
      "IAMONDS_EVENT\020\026\022\033\n\027C_SEND_GROUP_CHAT_EVE" +
      "NT\020\027\022\027\n\023C_CREATE_CLAN_EVENT\020\030\022\026\n\022C_LEAVE" +
      "_CLAN_EVENT\020\031\022\035\n\031C_REQUEST_JOIN_CLAN_EVE" +
      "NT\020\032\022%\n!C_RETRACT_REQUEST_JOIN_CLAN_EVEN" +
      "T\020\033\0222\n.C_APPROVE_OR_REJECT_REQUEST_TO_JO",
      "IN_CLAN_EVENT\020\034\022\035\n\031C_TRANSFER_CLAN_OWNER" +
      "SHIP\020\035\022\036\n\032C_RETRIEVE_CLAN_INFO_EVENT\020\036\022 " +
      "\n\034C_CHANGE_CLAN_SETTINGS_EVENT\020\037\022!\n\035C_BO" +
      "OT_PLAYER_FROM_CLAN_EVENT\020 \022\031\n\025C_PICK_LO" +
      "CK_BOX_EVENT\020!\022(\n$C_RETRIEVE_TOURNAMENT_" +
      "RANKINGS_EVENT\020\"\022&\n\"C_SUBMIT_MONSTER_ENH" +
      "ANCEMENT_EVENT\020#\022\032\n\026C_EVOLVE_MONSTER_EVE" +
      "NT\020$\022!\n\035C_PURCHASE_BOOSTER_PACK_EVENT\020%\022" +
      "\036\n\032C_EVOLUTION_FINISHED_EVENT\020&\022 \n\034C_ACH" +
      "IEVEMENT_PROGRESS_EVENT\020\'\022\035\n\031C_PRIVATE_C",
      "HAT_POST_EVENT\020(\022&\n\"C_RETRIEVE_PRIVATE_C" +
      "HAT_POST_EVENT\020)\022&\n\"C_REDEEM_USER_LOCK_B" +
      "OX_ITEMS_EVENT\020*\022\031\n\025C_BEGIN_DUNGEON_EVEN" +
      "T\020+\022\027\n\023C_END_DUNGEON_EVENT\020,\022\035\n\031C_REVIVE" +
      "_IN_DUNGEON_EVENT\020-\022\024\n\020C_QUEUE_UP_EVENT\020" +
      ".\022!\n\035C_UPDATE_MONSTER_HEALTH_EVENT\020/\022\030\n\024" +
      "C_HEAL_MONSTER_EVENT\0200\022\036\n\032C_ACHIEVEMENT_" +
      "REDEEM_EVENT\0201\022&\n\"C_ADD_MONSTER_TO_BATTL" +
      "E_TEAM_EVENT\0202\022+\n\'C_REMOVE_MONSTER_FROM_" +
      "BATTLE_TEAM_EVENT\0203\022+\n\'C_INCREASE_MONSTE",
      "R_INVENTORY_SLOT_EVENT\0204\022*\n&C_ENHANCEMEN" +
      "T_WAIT_TIME_COMPLETE_EVENT\0205\022\'\n#C_COMBIN" +
      "E_USER_MONSTER_PIECES_EVENT\0206\022\035\n\031C_SELL_" +
      "USER_MONSTER_EVENT\0207\022\'\n#C_INVITE_FB_FRIE" +
      "NDS_FOR_SLOTS_EVENT\0208\0221\n-C_ACCEPT_AND_RE" +
      "JECT_FB_INVITE_FOR_SLOTS_EVENT\0209\022 \n\034C_UP" +
      "DATE_USER_CURRENCY_EVENT\020;\022\034\n\030C_BEGIN_PV" +
      "P_BATTLE_EVENT\020<\022\032\n\026C_END_PVP_BATTLE_EVE" +
      "NT\020=\022\033\n\027C_BEGIN_CLAN_RAID_EVENT\020>\022$\n C_A" +
      "TTACK_CLAN_RAID_MONSTER_EVENT\020?\022\"\n\036C_REC",
      "ORD_CLAN_RAID_STATS_EVENT\020@\022&\n\"C_PROMOTE" +
      "_DEMOTE_CLAN_MEMBER_EVENT\020A\022\036\n\032C_SET_GAM" +
      "E_CENTER_ID_EVENT\020B\022\032\n\026C_SPAWN_OBSTACLE_" +
      "EVENT\020C\022\"\n\036C_BEGIN_OBSTACLE_REMOVAL_EVEN" +
      "T\020D\022%\n!C_OBSTACLE_REMOVAL_COMPLETE_EVENT" +
      "\020E\022\032\n\026C_SPAWN_MINI_JOB_EVENT\020F\022\032\n\026C_BEGI" +
      "N_MINI_JOB_EVENT\020G\022\035\n\031C_COMPLETE_MINI_JO" +
      "B_EVENT\020H\022\033\n\027C_REDEEM_MINI_JOB_EVENT\020I\022\036" +
      "\n\032C_SET_AVATAR_MONSTER_EVENT\020J\022!\n\035C_REST" +
      "RICT_USER_MONSTER_EVENT\020K\022#\n\037C_UNRESTRIC",
      "T_USER_MONSTER_EVENT\020L\022\033\n\027C_ENHANCE_MONS" +
      "TER_EVENT\020M\022\"\n\036C_TRADE_ITEM_FOR_BOOSTER_" +
      "EVENT\020N\022\035\n\031C_SOLICIT_CLAN_HELP_EVENT\020O\022\032" +
      "\n\026C_GIVE_CLAN_HELP_EVENT\020P\022\031\n\025C_END_CLAN" +
      "_HELP_EVENT\020Q\022\032\n\026C_INVITE_TO_CLAN_EVENT\020" +
      "R\022(\n$C_ACCEPT_OR_REJECT_CLAN_INVITE_EVEN" +
      "T\020S\022\'\n#C_COLLECT_MONSTER_ENHANCEMENT_EVE" +
      "NT\020T\022$\n C_TRADE_ITEM_FOR_SPEED_UPS_EVENT" +
      "\020U\022!\n\035C_REMOVE_USER_ITEM_USED_EVENT\020V\022$\n" +
      " C_TRADE_ITEM_FOR_RESOURCES_EVENT\020W\022\036\n\032C",
      "_REDEEM_SECRET_GIFT_EVENT\020X\022\035\n\031C_SET_DEF" +
      "ENDING_MSG_EVENT\020Y\022\037\n\033C_BEGIN_CLAN_AVENG" +
      "ING_EVENT\020Z\022\035\n\031C_END_CLAN_AVENGING_EVENT" +
      "\020[\022\034\n\030C_AVENGE_CLAN_MATE_EVENT\020\\\022$\n C_UP" +
      "DATE_CLIENT_TASK_STATE_EVENT\020]\022!\n\035C_SOLI" +
      "CIT_TEAM_DONATION_EVENT\020^\022.\n*C_FULFILL_T" +
      "EAM_DONATION_SOLICITATION_EVENT\020_\022+\n\'C_V" +
      "OID_TEAM_DONATION_SOLICITATION_EVENT\020`\022&" +
      "\n\"C_RETRIEVE_USER_MONSTER_TEAM_EVENT\020a\022(" +
      "\n$C_DESTROY_MONEY_TREE_STRUCTURE_EVENT\020b",
      "\022\022\n\016C_LOGOUT_EVENT\020e\022\020\n\013C_DEV_EVENT\020\310\001\022\035" +
      "\n\030C_PERFORM_RESEARCH_EVENT\020\311\001\022\'\n\"C_FINIS" +
      "H_PERFORMING_RESEARCH_EVENT\020\312\001\022)\n$C_CUST" +
      "OMIZE_PVP_BOARD_OBSTACLE_EVENT\020\313\001\022\037\n\032C_C" +
      "REATE_BATTLE_ITEM_EVENT\020\314\001\022 \n\033C_DISCARD_" +
      "BATTLE_ITEM_EVENT\020\315\001\022!\n\034C_COMPLETE_BATTL" +
      "E_ITEM_EVENT\020\316\001\022%\n C_REDEEM_MINI_EVENT_R" +
      "EWARD_EVENT\020\317\001\022 \n\033C_RETRIEVE_MINI_EVENT_" +
      "EVENT\020\320\001\022\036\n\031C_UPDATE_MINI_EVENT_EVENT\020\321\001" +
      "\022&\n!C_TRANSLATE_SELECT_MESSAGES_EVENT\020\322\001",
      "\022!\n\034C_UPDATE_USER_STRENGTH_EVENT\020\323\001\022\035\n\030C" +
      "_REFRESH_MINI_JOB_EVENT\020\324\001\022\031\n\024C_SET_TANG" +
      "O_ID_EVENT\020\325\001\022\034\n\027C_SEND_TANGO_GIFT_EVENT" +
      "\020\326\001\022\030\n\023C_DELETE_GIFT_EVENT\020\327\001\022\031\n\024C_COLLE" +
      "CT_GIFT_EVENT\020\330\001\022#\n\036C_RETRIEVE_BATTLE_RE" +
      "PLAY_EVENT\020\331\001\022+\n&C_RETRIEVE_STRENGTH_LEA" +
      "DER_BOARD_EVENT\020\367\003\022%\n C_PURCHASE_ITEMS_W" +
      "ITH_GEMS_EVENT\020\370\003\022\026\n\021C_RECONNECT_EVENT\020\371" +
      "\003\022-\n(C_RETRIEVE_MINI_EVENT_LEADER_BOARD_" +
      "EVENT\020\372\003*\346\"\n\025EventProtocolResponse\022\023\n\017S_",
      "STARTUP_EVENT\020\001\022\033\n\027S_IN_APP_PURCHASE_EVE" +
      "NT\020\002\022#\n\037S_PURCHASE_NORM_STRUCTURE_EVENT\020" +
      "\003\022)\n%S_MOVE_OR_ROTATE_NORM_STRUCTURE_EVE" +
      "NT\020\004\022\033\n\027S_SET_FACEBOOK_ID_EVENT\020\005\022\"\n\036S_U" +
      "PGRADE_NORM_STRUCTURE_EVENT\020\006\0221\n-S_RETRI" +
      "EVE_CURRENCY_FROM_NORM_STRUCTURE_EVENT\020\007" +
      "\0225\n1S_FINISH_NORM_STRUCT_WAITTIME_WITH_D" +
      "IAMONDS_EVENT\020\010\022%\n!S_NORM_STRUCT_WAIT_CO" +
      "MPLETE_EVENT\020\t\022\034\n\030S_LOAD_PLAYER_CITY_EVE" +
      "NT\020\n\022\'\n#S_EXCHANGE_GEMS_FOR_RESOURCES_EV",
      "ENT\020\013\022\030\n\024S_QUEST_ACCEPT_EVENT\020\014\022\032\n\026S_QUE" +
      "ST_PROGRESS_EVENT\020\r\022\030\n\024S_QUEST_REDEEM_EV" +
      "ENT\020\016\022#\n\037S_PURCHASE_CITY_EXPANSION_EVENT" +
      "\020\017\022#\n\037S_EXPANSION_WAIT_COMPLETE_EVENT\020\020\022" +
      "\024\n\020S_LEVEL_UP_EVENT\020\021\022\027\n\023S_ENABLE_APNS_E" +
      "VENT\020\022\022\027\n\023S_USER_CREATE_EVENT\020\023\022\025\n\021S_LOA" +
      "D_CITY_EVENT\020\024\022\'\n#S_RETRIEVE_USERS_FOR_U" +
      "SER_IDS_EVENT\020\025\022\036\n\032S_EARN_FREE_DIAMONDS_" +
      "EVENT\020\026\022\033\n\027S_SEND_GROUP_CHAT_EVENT\020\027\022\027\n\023" +
      "S_CREATE_CLAN_EVENT\020\030\022\026\n\022S_LEAVE_CLAN_EV",
      "ENT\020\031\022\035\n\031S_REQUEST_JOIN_CLAN_EVENT\020\032\022%\n!" +
      "S_RETRACT_REQUEST_JOIN_CLAN_EVENT\020\033\0222\n.S" +
      "_APPROVE_OR_REJECT_REQUEST_TO_JOIN_CLAN_" +
      "EVENT\020\034\022\035\n\031S_TRANSFER_CLAN_OWNERSHIP\020\035\022\036" +
      "\n\032S_RETRIEVE_CLAN_INFO_EVENT\020\036\022 \n\034S_CHAN" +
      "GE_CLAN_SETTINGS_EVENT\020\037\022!\n\035S_BOOT_PLAYE" +
      "R_FROM_CLAN_EVENT\020 \022\031\n\025S_PICK_LOCK_BOX_E" +
      "VENT\020!\022(\n$S_RETRIEVE_TOURNAMENT_RANKINGS" +
      "_EVENT\020\"\022&\n\"S_SUBMIT_MONSTER_ENHANCEMENT" +
      "_EVENT\020#\022\032\n\026S_EVOLVE_MONSTER_EVENT\020$\022!\n\035",
      "S_PURCHASE_BOOSTER_PACK_EVENT\020%\022\036\n\032S_EVO" +
      "LUTION_FINISHED_EVENT\020&\022 \n\034S_ACHIEVEMENT" +
      "_PROGRESS_EVENT\020\'\022\035\n\031S_PRIVATE_CHAT_POST" +
      "_EVENT\020(\022&\n\"S_RETRIEVE_PRIVATE_CHAT_POST" +
      "_EVENT\020)\022&\n\"S_REDEEM_USER_LOCK_BOX_ITEMS" +
      "_EVENT\020*\022\031\n\025S_BEGIN_DUNGEON_EVENT\020+\022\027\n\023S" +
      "_END_DUNGEON_EVENT\020,\022\035\n\031S_REVIVE_IN_DUNG" +
      "EON_EVENT\020-\022\024\n\020S_QUEUE_UP_EVENT\020.\022!\n\035S_U" +
      "PDATE_MONSTER_HEALTH_EVENT\020/\022\030\n\024S_HEAL_M" +
      "ONSTER_EVENT\0200\022\036\n\032S_ACHIEVEMENT_REDEEM_E",
      "VENT\0201\022&\n\"S_ADD_MONSTER_TO_BATTLE_TEAM_E" +
      "VENT\0202\022+\n\'S_REMOVE_MONSTER_FROM_BATTLE_T" +
      "EAM_EVENT\0203\022+\n\'S_INCREASE_MONSTER_INVENT" +
      "ORY_SLOT_EVENT\0204\022*\n&S_ENHANCEMENT_WAIT_T" +
      "IME_COMPLETE_EVENT\0205\022\'\n#S_COMBINE_USER_M" +
      "ONSTER_PIECES_EVENT\0206\022\035\n\031S_SELL_USER_MON" +
      "STER_EVENT\0207\022\'\n#S_INVITE_FB_FRIENDS_FOR_" +
      "SLOTS_EVENT\0208\0221\n-S_ACCEPT_AND_REJECT_FB_" +
      "INVITE_FOR_SLOTS_EVENT\0209\022 \n\034S_UPDATE_USE" +
      "R_CURRENCY_EVENT\020;\022\034\n\030S_BEGIN_PVP_BATTLE",
      "_EVENT\020<\022\032\n\026S_END_PVP_BATTLE_EVENT\020=\022\033\n\027" +
      "S_BEGIN_CLAN_RAID_EVENT\020>\022$\n S_ATTACK_CL" +
      "AN_RAID_MONSTER_EVENT\020?\022\"\n\036S_RECORD_CLAN" +
      "_RAID_STATS_EVENT\020@\022&\n\"S_PROMOTE_DEMOTE_" +
      "CLAN_MEMBER_EVENT\020A\022\036\n\032S_SET_GAME_CENTER" +
      "_ID_EVENT\020B\022\032\n\026S_SPAWN_OBSTACLE_EVENT\020C\022" +
      "\"\n\036S_BEGIN_OBSTACLE_REMOVAL_EVENT\020D\022%\n!S" +
      "_OBSTACLE_REMOVAL_COMPLETE_EVENT\020E\022\032\n\026S_" +
      "SPAWN_MINI_JOB_EVENT\020F\022\032\n\026S_BEGIN_MINI_J" +
      "OB_EVENT\020G\022\035\n\031S_COMPLETE_MINI_JOB_EVENT\020",
      "H\022\033\n\027S_REDEEM_MINI_JOB_EVENT\020I\022\036\n\032S_SET_" +
      "AVATAR_MONSTER_EVENT\020J\022!\n\035S_RESTRICT_USE" +
      "R_MONSTER_EVENT\020K\022#\n\037S_UNRESTRICT_USER_M" +
      "ONSTER_EVENT\020L\022\033\n\027S_ENHANCE_MONSTER_EVEN" +
      "T\020M\022\"\n\036S_TRADE_ITEM_FOR_BOOSTER_EVENT\020N\022" +
      "\035\n\031S_SOLICIT_CLAN_HELP_EVENT\020O\022\032\n\026S_GIVE" +
      "_CLAN_HELP_EVENT\020P\022\031\n\025S_END_CLAN_HELP_EV" +
      "ENT\020Q\022\032\n\026S_INVITE_TO_CLAN_EVENT\020R\022(\n$S_A" +
      "CCEPT_OR_REJECT_CLAN_INVITE_EVENT\020S\022\'\n#S" +
      "_COLLECT_MONSTER_ENHANCEMENT_EVENT\020T\022$\n ",
      "S_TRADE_ITEM_FOR_SPEED_UPS_EVENT\020U\022!\n\035S_" +
      "REMOVE_USER_ITEM_USED_EVENT\020V\022$\n S_TRADE" +
      "_ITEM_FOR_RESOURCES_EVENT\020W\022\036\n\032S_REDEEM_" +
      "SECRET_GIFT_EVENT\020X\022\035\n\031S_SET_DEFENDING_M" +
      "SG_EVENT\020Y\022\037\n\033S_BEGIN_CLAN_AVENGING_EVEN" +
      "T\020Z\022\035\n\031S_END_CLAN_AVENGING_EVENT\020[\022\034\n\030S_" +
      "AVENGE_CLAN_MATE_EVENT\020\\\022$\n S_UPDATE_CLI" +
      "ENT_TASK_STATE_EVENT\020]\022!\n\035S_SOLICIT_TEAM" +
      "_DONATION_EVENT\020^\022.\n*S_FULFILL_TEAM_DONA" +
      "TION_SOLICITATION_EVENT\020_\022+\n\'S_VOID_TEAM",
      "_DONATION_SOLICITATION_EVENT\020`\022&\n\"S_RETR" +
      "IEVE_USER_MONSTER_TEAM_EVENT\020a\022(\n$S_DEST" +
      "ROY_MONEY_TREE_STRUCTURE_EVENT\020b\022\036\n\032S_UP" +
      "DATE_CLIENT_USER_EVENT\020e\022\036\n\032S_REFERRAL_C" +
      "ODE_USED_EVENT\020f\022\035\n\031S_PURGE_STATIC_DATA_" +
      "EVENT\020g\022\037\n\033S_RECEIVED_GROUP_CHAT_EVENT\020h" +
      "\022\036\n\032S_SEND_ADMIN_MESSAGE_EVENT\020i\022 \n\034S_GE" +
      "NERAL_NOTIFICATION_EVENT\020j\022*\n&S_RECEIVED" +
      "_RARE_BOOSTER_PURCHASE_EVENT\020k\022(\n$S_AWAR" +
      "D_CLAN_RAID_STAGE_REWARD_EVENT\020l\022\030\n\024S_FO",
      "RCE_LOGOUT_EVENT\020m\022\036\n\032S_RETRIEVE_CLAN_DA" +
      "TA_EVENT\020n\022\031\n\025S_RECEIVED_GIFT_EVENT\020o\022\020\n" +
      "\013S_DEV_EVENT\020\310\001\022\035\n\030S_PERFORM_RESEARCH_EV" +
      "ENT\020\311\001\022\'\n\"S_FINISH_PERFORMING_RESEARCH_E" +
      "VENT\020\312\001\022)\n$S_CUSTOMIZE_PVP_BOARD_OBSTACL" +
      "E_EVENT\020\313\001\022\037\n\032S_CREATE_BATTLE_ITEM_EVENT" +
      "\020\314\001\022 \n\033S_DISCARD_BATTLE_ITEM_EVENT\020\315\001\022!\n" +
      "\034S_COMPLETE_BATTLE_ITEM_EVENT\020\316\001\022%\n S_RE" +
      "DEEM_MINI_EVENT_REWARD_EVENT\020\317\001\022 \n\033S_RET" +
      "RIEVE_MINI_EVENT_EVENT\020\320\001\022\036\n\031S_UPDATE_MI",
      "NI_EVENT_EVENT\020\321\001\022&\n!S_TRANSLATE_SELECT_" +
      "MESSAGES_EVENT\020\322\001\022!\n\034S_UPDATE_USER_STREN" +
      "GTH_EVENT\020\323\001\022\035\n\030S_REFRESH_MINI_JOB_EVENT" +
      "\020\324\001\022\031\n\024S_SET_TANGO_ID_EVENT\020\325\001\022\034\n\027S_SEND" +
      "_TANGO_GIFT_EVENT\020\326\001\022\030\n\023S_DELETE_GIFT_EV" +
      "ENT\020\327\001\022\031\n\024S_COLLECT_GIFT_EVENT\020\330\001\022#\n\036S_R" +
      "ETRIEVE_BATTLE_REPLAY_EVENT\020\331\001\022+\n&S_RETR" +
      "IEVE_STRENGTH_LEADER_BOARD_EVENT\020\367\003\022\026\n\021S" +
      "_RECONNECT_EVENT\020\370\003\022%\n S_PURCHASE_ITEMS_" +
      "WITH_GEMS_EVENT\020\371\003\022-\n(S_RETRIEVE_MINI_EV",
      "ENT_LEADER_BOARD_EVENT\020\372\003B\020B\016ProtocolsPr" +
      "oto"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.lvl6.proto.AchievementStuffProto.getDescriptor(),
          com.lvl6.proto.BattleProto.getDescriptor(),
          com.lvl6.proto.BattleItemsProto.getDescriptor(),
          com.lvl6.proto.BoardProto.getDescriptor(),
          com.lvl6.proto.BoosterPackStuffProto.getDescriptor(),
          com.lvl6.proto.ChatProto.getDescriptor(),
          com.lvl6.proto.CityProto.getDescriptor(),
          com.lvl6.proto.ClanProto.getDescriptor(),
          com.lvl6.proto.DevProto.getDescriptor(),
          com.lvl6.proto.EventAchievementProto.getDescriptor(),
          com.lvl6.proto.EventApnsProto.getDescriptor(),
          com.lvl6.proto.EventBattleItemProto.getDescriptor(),
          com.lvl6.proto.EventBoosterPackProto.getDescriptor(),
          com.lvl6.proto.EventChatProto.getDescriptor(),
          com.lvl6.proto.EventCityProto.getDescriptor(),
          com.lvl6.proto.EventClanProto.getDescriptor(),
          com.lvl6.proto.EventDevProto.getDescriptor(),
          com.lvl6.proto.EventDungeonProto.getDescriptor(),
          com.lvl6.proto.EventInAppPurchaseProto.getDescriptor(),
          com.lvl6.proto.EventItemProto.getDescriptor(),
          com.lvl6.proto.EventLeaderBoardProto.getDescriptor(),
          com.lvl6.proto.EventMiniEventProto.getDescriptor(),
          com.lvl6.proto.EventMiniJobProto.getDescriptor(),
          com.lvl6.proto.EventMonsterProto.getDescriptor(),
          com.lvl6.proto.EventPvpProto.getDescriptor(),
          com.lvl6.proto.EventQuestProto.getDescriptor(),
          com.lvl6.proto.EventReferralProto.getDescriptor(),
          com.lvl6.proto.EventResearchProto.getDescriptor(),
          com.lvl6.proto.EventRewardProto.getDescriptor(),
          com.lvl6.proto.EventStartupProto.getDescriptor(),
          com.lvl6.proto.EventStaticDataProto.getDescriptor(),
          com.lvl6.proto.EventStructureProto.getDescriptor(),
          com.lvl6.proto.EventTournamentProto.getDescriptor(),
          com.lvl6.proto.EventUserProto.getDescriptor(),
          com.lvl6.proto.InAppPurchaseProto.getDescriptor(),
          com.lvl6.proto.ItemsProto.getDescriptor(),
          com.lvl6.proto.LeaderBoardProto.getDescriptor(),
          com.lvl6.proto.MiniEventProtos.getDescriptor(),
          com.lvl6.proto.MiniJobConfigProto.getDescriptor(),
          com.lvl6.proto.MonsterStuffProto.getDescriptor(),
          com.lvl6.proto.PrerequisiteProto.getDescriptor(),
          com.lvl6.proto.QuestProto.getDescriptor(),
          com.lvl6.proto.ResearchsProto.getDescriptor(),
          com.lvl6.proto.RewardsProto.getDescriptor(),
          com.lvl6.proto.SharedEnumConfigProto.getDescriptor(),
          com.lvl6.proto.SkillsProto.getDescriptor(),
          com.lvl6.proto.StaticDataStuffProto.getDescriptor(),
          com.lvl6.proto.StructureProto.getDescriptor(),
          com.lvl6.proto.TaskProto.getDescriptor(),
          com.lvl6.proto.TournamentStuffProto.getDescriptor(),
          com.lvl6.proto.UserProto.getDescriptor(),
        }, assigner);
    internal_static_com_lvl6_proto_EventProto_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_com_lvl6_proto_EventProto_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_com_lvl6_proto_EventProto_descriptor,
        new java.lang.String[] { "EventType", "TagNum", "EventUuid", "EventBytes", });
    com.lvl6.proto.AchievementStuffProto.getDescriptor();
    com.lvl6.proto.BattleProto.getDescriptor();
    com.lvl6.proto.BattleItemsProto.getDescriptor();
    com.lvl6.proto.BoardProto.getDescriptor();
    com.lvl6.proto.BoosterPackStuffProto.getDescriptor();
    com.lvl6.proto.ChatProto.getDescriptor();
    com.lvl6.proto.CityProto.getDescriptor();
    com.lvl6.proto.ClanProto.getDescriptor();
    com.lvl6.proto.DevProto.getDescriptor();
    com.lvl6.proto.EventAchievementProto.getDescriptor();
    com.lvl6.proto.EventApnsProto.getDescriptor();
    com.lvl6.proto.EventBattleItemProto.getDescriptor();
    com.lvl6.proto.EventBoosterPackProto.getDescriptor();
    com.lvl6.proto.EventChatProto.getDescriptor();
    com.lvl6.proto.EventCityProto.getDescriptor();
    com.lvl6.proto.EventClanProto.getDescriptor();
    com.lvl6.proto.EventDevProto.getDescriptor();
    com.lvl6.proto.EventDungeonProto.getDescriptor();
    com.lvl6.proto.EventInAppPurchaseProto.getDescriptor();
    com.lvl6.proto.EventItemProto.getDescriptor();
    com.lvl6.proto.EventLeaderBoardProto.getDescriptor();
    com.lvl6.proto.EventMiniEventProto.getDescriptor();
    com.lvl6.proto.EventMiniJobProto.getDescriptor();
    com.lvl6.proto.EventMonsterProto.getDescriptor();
    com.lvl6.proto.EventPvpProto.getDescriptor();
    com.lvl6.proto.EventQuestProto.getDescriptor();
    com.lvl6.proto.EventReferralProto.getDescriptor();
    com.lvl6.proto.EventResearchProto.getDescriptor();
    com.lvl6.proto.EventRewardProto.getDescriptor();
    com.lvl6.proto.EventStartupProto.getDescriptor();
    com.lvl6.proto.EventStaticDataProto.getDescriptor();
    com.lvl6.proto.EventStructureProto.getDescriptor();
    com.lvl6.proto.EventTournamentProto.getDescriptor();
    com.lvl6.proto.EventUserProto.getDescriptor();
    com.lvl6.proto.InAppPurchaseProto.getDescriptor();
    com.lvl6.proto.ItemsProto.getDescriptor();
    com.lvl6.proto.LeaderBoardProto.getDescriptor();
    com.lvl6.proto.MiniEventProtos.getDescriptor();
    com.lvl6.proto.MiniJobConfigProto.getDescriptor();
    com.lvl6.proto.MonsterStuffProto.getDescriptor();
    com.lvl6.proto.PrerequisiteProto.getDescriptor();
    com.lvl6.proto.QuestProto.getDescriptor();
    com.lvl6.proto.ResearchsProto.getDescriptor();
    com.lvl6.proto.RewardsProto.getDescriptor();
    com.lvl6.proto.SharedEnumConfigProto.getDescriptor();
    com.lvl6.proto.SkillsProto.getDescriptor();
    com.lvl6.proto.StaticDataStuffProto.getDescriptor();
    com.lvl6.proto.StructureProto.getDescriptor();
    com.lvl6.proto.TaskProto.getDescriptor();
    com.lvl6.proto.TournamentStuffProto.getDescriptor();
    com.lvl6.proto.UserProto.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
